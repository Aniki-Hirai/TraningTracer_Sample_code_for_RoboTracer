
TraningTracerV7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800e338  0800e338  0001e338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e994  0800e994  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e994  0800e994  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e994  0800e994  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e994  0800e994  0001e994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e998  0800e998  0001e998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e99c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c8  200001f0  0800eb8c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b8  0800eb8c  000217b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000220da  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467d  00000000  00000000  000422fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00046978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  00047f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc9b  00000000  00000000  00049260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c32a  00000000  00000000  00065efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968b3  00000000  00000000  00082225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cac  00000000  00000000  00118b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e31c 	.word	0x0800e31c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800e31c 	.word	0x0800e31c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d26:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d38:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d40:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d72:	4825      	ldr	r0, [pc, #148]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d74:	f003 ff34 	bl	8004be0 <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d7e:	f001 ff14 	bl	8002baa <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481e      	ldr	r0, [pc, #120]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000d8e:	f004 fc55 	bl	800563c <HAL_ADCEx_MultiModeConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000d98:	f001 ff07 	bl	8002baa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000da8:	2306      	movs	r3, #6
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000dba:	f004 f97d 	bl	80050b8 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000dc4:	f001 fef1 	bl	8002baa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dc8:	230b      	movs	r3, #11
 8000dca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000dd6:	f004 f96f 	bl	80050b8 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000de0:	f001 fee3 	bl	8002baa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000de4:	230c      	movs	r3, #12
 8000de6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000de8:	2303      	movs	r3, #3
 8000dea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_ADC1_Init+0x114>)
 8000df2:	f004 f961 	bl	80050b8 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000dfc:	f001 fed5 	bl	8002baa <Error_Handler>
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000340 	.word	0x20000340

08000e0c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e24:	4a3c      	ldr	r2, [pc, #240]	; (8000f18 <MX_ADC2_Init+0x10c>)
 8000e26:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e2e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e42:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e7c:	4825      	ldr	r0, [pc, #148]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000e7e:	f003 feaf 	bl	8004be0 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000e88:	f001 fe8f 	bl	8002baa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481a      	ldr	r0, [pc, #104]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000eaa:	f004 f905 	bl	80050b8 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000eb4:	f001 fe79 	bl	8002baa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000ec6:	f004 f8f7 	bl	80050b8 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000ed0:	f001 fe6b 	bl	8002baa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000ee2:	f004 f8e9 	bl	80050b8 <HAL_ADC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000eec:	f001 fe5d 	bl	8002baa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_ADC2_Init+0x108>)
 8000efe:	f004 f8db 	bl	80050b8 <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000f08:	f001 fe4f 	bl	8002baa <Error_Handler>
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200002f0 	.word	0x200002f0
 8000f18:	50000100 	.word	0x50000100

08000f1c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3c:	d16f      	bne.n	800101e <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f3e:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <HAL_ADC_MspInit+0x1c4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a66      	ldr	r2, [pc, #408]	; (80010e0 <HAL_ADC_MspInit+0x1c4>)
 8000f46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f48:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <HAL_ADC_MspInit+0x1c4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f50:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a63      	ldr	r2, [pc, #396]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6153      	str	r3, [r2, #20]
 8000f5c:	4b61      	ldr	r3, [pc, #388]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b5e      	ldr	r3, [pc, #376]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	4a5d      	ldr	r2, [pc, #372]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	6153      	str	r3, [r2, #20]
 8000f74:	4b5b      	ldr	r3, [pc, #364]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4a57      	ldr	r2, [pc, #348]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8a:	6153      	str	r3, [r2, #20]
 8000f8c:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = LS_R2_Pin;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LS_R2_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f005 f85b 	bl	8006068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MK_R_Pin|MK_L_Pin;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4848      	ldr	r0, [pc, #288]	; (80010e8 <HAL_ADC_MspInit+0x1cc>)
 8000fc6:	f005 f84f 	bl	8006068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fca:	4b48      	ldr	r3, [pc, #288]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_ADC_MspInit+0x1d4>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b45      	ldr	r3, [pc, #276]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001000:	483a      	ldr	r0, [pc, #232]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8001002:	f004 fe16 	bl	8005c32 <HAL_DMA_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 800100c:	f001 fdcd 	bl	8002baa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8001014:	639a      	str	r2, [r3, #56]	; 0x38
 8001016:	4a35      	ldr	r2, [pc, #212]	; (80010ec <HAL_ADC_MspInit+0x1d0>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800101c:	e05b      	b.n	80010d6 <HAL_ADC_MspInit+0x1ba>
  else if(adcHandle->Instance==ADC2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <HAL_ADC_MspInit+0x1d8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d156      	bne.n	80010d6 <HAL_ADC_MspInit+0x1ba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_ADC_MspInit+0x1c4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <HAL_ADC_MspInit+0x1c4>)
 8001030:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_ADC_MspInit+0x1c4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10b      	bne.n	8001052 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_ADC_MspInit+0x1c8>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LS_R1_Pin|LS_L1_Pin|LS_L2_Pin|BATT_Pin;
 800106a:	23f0      	movs	r3, #240	; 0xf0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f004 fff2 	bl	8006068 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_ADC_MspInit+0x1e0>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 800109e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 80010a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010aa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 80010ae:	2220      	movs	r2, #32
 80010b0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 80010b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80010ba:	480f      	ldr	r0, [pc, #60]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 80010bc:	f004 fdb9 	bl	8005c32 <HAL_DMA_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 80010c6:	f001 fd70 	bl	8002baa <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 80010ce:	639a      	str	r2, [r3, #56]	; 0x38
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <HAL_ADC_MspInit+0x1dc>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000020c 	.word	0x2000020c
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	20000390 	.word	0x20000390
 80010f0:	40020008 	.word	0x40020008
 80010f4:	50000100 	.word	0x50000100
 80010f8:	200003d4 	.word	0x200003d4
 80010fc:	4002001c 	.word	0x4002001c

08001100 <Battery_GetVoltage>:

/* ---------------------------------------------------------------
	バッテリの電圧を取得する関数
--------------------------------------------------------------- */
float Battery_GetVoltage( void )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	return ((BATTERY_REFERENCE * (30.f / 10.f) * (float)Sensor_GetValue_Battery()) / 4096.f) + BATTERY_OFFSET;
 8001104:	f002 ffa8 	bl	8004058 <Sensor_GetValue_Battery>
 8001108:	4603      	mov	r3, r0
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001112:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001130 <Battery_GetVoltage+0x30>
 8001116:	ee27 7a87 	vmul.f32	s14, s15, s14
 800111a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001134 <Battery_GetVoltage+0x34>
 800111e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001122:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001138 <Battery_GetVoltage+0x38>
 8001126:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800112a:	eeb0 0a67 	vmov.f32	s0, s15
 800112e:	bd80      	pop	{r7, pc}
 8001130:	411e6666 	.word	0x411e6666
 8001134:	45800000 	.word	0x45800000
 8001138:	3e2e147b 	.word	0x3e2e147b

0800113c <Battery_LimiterVoltage>:

/* ---------------------------------------------------------------
	バッテリの電圧制限関数
--------------------------------------------------------------- */
void Battery_LimiterVoltage( void )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	volatile int	i;
	volatile float	battery_voltage_average;

	for( i = 0; i < 10; i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e00f      	b.n	8001168 <Battery_LimiterVoltage+0x2c>
		HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f003 fd07 	bl	8004b5c <HAL_Delay>
		battery_voltage_average += Battery_GetVoltage();
 800114e:	f7ff ffd7 	bl	8001100 <Battery_GetVoltage>
 8001152:	eeb0 7a40 	vmov.f32	s14, s0
 8001156:	edd7 7a00 	vldr	s15, [r7]
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	edc7 7a00 	vstr	s15, [r7]
	for( i = 0; i < 10; i++) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b09      	cmp	r3, #9
 800116c:	ddec      	ble.n	8001148 <Battery_LimiterVoltage+0xc>
	}
	battery_voltage_average /= 10.0;
 800116e:	ed97 7a00 	vldr	s14, [r7]
 8001172:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800117a:	edc7 7a00 	vstr	s15, [r7]

	if( battery_voltage_average < BATTERY_LIMIT ) {
 800117e:	edd7 7a00 	vldr	s15, [r7]
 8001182:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	d400      	bmi.n	8001192 <Battery_LimiterVoltage+0x56>
		while( 1 ) {
			LED_TOGGLE();
			HAL_Delay(100);
		}
	} else;
}
 8001190:	e011      	b.n	80011b6 <Battery_LimiterVoltage+0x7a>
		Vel_Set(0.0f);
 8001192:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80011bc <Battery_LimiterVoltage+0x80>
 8001196:	f000 ffb9 	bl	800210c <Vel_Set>
		HAL_Delay(1000);
 800119a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119e:	f003 fcdd 	bl	8004b5c <HAL_Delay>
		Servo_Disable();
 80011a2:	f000 ff8b 	bl	80020bc <Servo_Disable>
			LED_TOGGLE();
 80011a6:	2108      	movs	r1, #8
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <Battery_LimiterVoltage+0x84>)
 80011aa:	f005 f8ff 	bl	80063ac <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f003 fcd4 	bl	8004b5c <HAL_Delay>
			LED_TOGGLE();
 80011b4:	e7f7      	b.n	80011a6 <Battery_LimiterVoltage+0x6a>
}
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	00000000 	.word	0x00000000
 80011c0:	48000400 	.word	0x48000400

080011c4 <Communicate_TerminalRecv>:

/* ---------------------------------------------------------------
	UART1で1文字受信する関数
--------------------------------------------------------------- */
uint8_t Communicate_TerminalRecv( void )
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t data[1];
	HAL_UART_Receive( &huart2, (uint8_t*)data, sizeof(data), 1 );
 80011ca:	1d39      	adds	r1, r7, #4
 80011cc:	2301      	movs	r3, #1
 80011ce:	2201      	movs	r2, #1
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <Communicate_TerminalRecv+0x1c>)
 80011d2:	f007 fbb5 	bl	8008940 <HAL_UART_Receive>
	return (*data);
 80011d6:	793b      	ldrb	r3, [r7, #4]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20001724 	.word	0x20001724

080011e4 <Communicate_RxPushData>:

void Communicate_RxPushData( void )
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
// head（DMACが受信データを書き込む位置）に新しく受信データが蓄積される．
// tailから読み出せばいい
// headがtailに追いつくとバッファオーバーフローとなり正しく読み出せない

	// これ以上格納できない場合はそのまま戻る
	if(rx_buffer.remain >= TRX_BUFFER_SIZE){
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <Communicate_RxPushData+0x54>)
 80011ea:	889b      	ldrh	r3, [r3, #4]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2b7f      	cmp	r3, #127	; 0x7f
 80011f0:	d81c      	bhi.n	800122c <Communicate_RxPushData+0x48>
		return;
	}

	rx_buffer.data[rx_buffer.head++] = rx_data;	// 書き込みポインタにデータを格納
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <Communicate_RxPushData+0x54>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	b291      	uxth	r1, r2
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <Communicate_RxPushData+0x54>)
 80011fe:	8011      	strh	r1, [r2, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <Communicate_RxPushData+0x58>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <Communicate_RxPushData+0x54>)
 8001208:	440b      	add	r3, r1
 800120a:	719a      	strb	r2, [r3, #6]
	rx_buffer.remain++;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <Communicate_RxPushData+0x54>)
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	b29b      	uxth	r3, r3
 8001212:	3301      	adds	r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <Communicate_RxPushData+0x54>)
 8001218:	809a      	strh	r2, [r3, #4]
	// 終端に来たら、先頭に戻る
	if( rx_buffer.head >= TRX_BUFFER_SIZE ) {
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <Communicate_RxPushData+0x54>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b7f      	cmp	r3, #127	; 0x7f
 8001222:	d904      	bls.n	800122e <Communicate_RxPushData+0x4a>
		rx_buffer.head = 0;
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <Communicate_RxPushData+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
 800122a:	e000      	b.n	800122e <Communicate_RxPushData+0x4a>
		return;
 800122c:	bf00      	nop
	} else;
}
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000418 	.word	0x20000418
 800123c:	20000526 	.word	0x20000526

08001240 <Communicate_RxPopData>:

uint8_t Communicate_RxPopData( void )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001246:	b672      	cpsid	i
}
 8001248:	bf00      	nop

	// この関数は多重に実行されるとまずいので割り込みを禁止する
	__disable_irq();

	// データがない場合
	if( rx_buffer.remain == 0 ) {
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <Communicate_RxPopData+0x74>)
 800124c:	889b      	ldrh	r3, [r3, #4]
 800124e:	b29b      	uxth	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <Communicate_RxPopData+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8001254:	b662      	cpsie	i
}
 8001256:	bf00      	nop
		// 割り込み許可
		__enable_irq();

		// データを受信するまで待機
		while( rx_buffer.remain == 0 ) {
 8001258:	e004      	b.n	8001264 <Communicate_RxPopData+0x24>
			HAL_UART_Receive_DMA( &huart2, &rx_data, 1 );
 800125a:	2201      	movs	r2, #1
 800125c:	4916      	ldr	r1, [pc, #88]	; (80012b8 <Communicate_RxPopData+0x78>)
 800125e:	4817      	ldr	r0, [pc, #92]	; (80012bc <Communicate_RxPopData+0x7c>)
 8001260:	f007 fcb8 	bl	8008bd4 <HAL_UART_Receive_DMA>
		while( rx_buffer.remain == 0 ) {
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <Communicate_RxPopData+0x74>)
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f5      	beq.n	800125a <Communicate_RxPopData+0x1a>
		}
	} else;

	// 読み出しデータの取り出し
	ch = rx_buffer.data[rx_buffer.tail++];
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <Communicate_RxPopData+0x74>)
 8001270:	885b      	ldrh	r3, [r3, #2]
 8001272:	b29b      	uxth	r3, r3
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	b291      	uxth	r1, r2
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <Communicate_RxPopData+0x74>)
 800127a:	8051      	strh	r1, [r2, #2]
 800127c:	461a      	mov	r2, r3
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <Communicate_RxPopData+0x74>)
 8001280:	4413      	add	r3, r2
 8001282:	799b      	ldrb	r3, [r3, #6]
 8001284:	71fb      	strb	r3, [r7, #7]
	rx_buffer.remain--;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <Communicate_RxPopData+0x74>)
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	3b01      	subs	r3, #1
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <Communicate_RxPopData+0x74>)
 8001292:	809a      	strh	r2, [r3, #4]

	// 終端に来たら先頭に戻る
	if( rx_buffer.tail >= TRX_BUFFER_SIZE ) {
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <Communicate_RxPopData+0x74>)
 8001296:	885b      	ldrh	r3, [r3, #2]
 8001298:	b29b      	uxth	r3, r3
 800129a:	2b7f      	cmp	r3, #127	; 0x7f
 800129c:	d902      	bls.n	80012a4 <Communicate_RxPopData+0x64>
		rx_buffer.tail = 0;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <Communicate_RxPopData+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 80012a4:	b662      	cpsie	i
}
 80012a6:	bf00      	nop
	} else;

	// 割り込み許可
	__enable_irq();

	return ch;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000418 	.word	0x20000418
 80012b8:	20000526 	.word	0x20000526
 80012bc:	20001724 	.word	0x20001724

080012c0 <Communicate_TxPushData>:

/* ---------------------------------------------------------------
	UART1で1文字送信する関数
--------------------------------------------------------------- */
void Communicate_TxPushData( int8_t data )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80012ca:	b672      	cpsid	i
}
 80012cc:	bf00      	nop
	while(1) {
		// この関数は多重に実行されるとまずいので割り込みを禁止する
		__disable_irq();

		// DMAを一時的に停止
		HAL_DMA_Abort(huart2.hdmatx);
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <Communicate_TxPushData+0x8c>)
 80012d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fd53 	bl	8005d7e <HAL_DMA_Abort>

		// バッファに空きがあればループから抜ける
		if( tx_buffer.remain < TRX_BUFFER_SIZE ) {
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <Communicate_TxPushData+0x90>)
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	2b7f      	cmp	r3, #127	; 0x7f
 80012e0:	d90d      	bls.n	80012fe <Communicate_TxPushData+0x3e>
			break;
		} else;

		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart2, &tx_data, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	491b      	ldr	r1, [pc, #108]	; (8001354 <Communicate_TxPushData+0x94>)
 80012e6:	4819      	ldr	r0, [pc, #100]	; (800134c <Communicate_TxPushData+0x8c>)
 80012e8:	f007 fbf8 	bl	8008adc <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 80012ec:	b662      	cpsie	i
}
 80012ee:	bf00      	nop

		// 割り込み許可
		__enable_irq();

		// バッファに空きができるまで待機（この間割り込みが発生してもよい）
		while(tx_buffer.remain == TRX_BUFFER_SIZE);
 80012f0:	bf00      	nop
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <Communicate_TxPushData+0x90>)
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	2b80      	cmp	r3, #128	; 0x80
 80012fa:	d0fa      	beq.n	80012f2 <Communicate_TxPushData+0x32>
		__disable_irq();
 80012fc:	e7e5      	b.n	80012ca <Communicate_TxPushData+0xa>
			break;
 80012fe:	bf00      	nop
	}
	// ここの時点でDMACは停止，割り込みは禁止されている

	// 書き込みポインタにデータを格納
	tx_buffer.data[tx_buffer.head++] = data;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <Communicate_TxPushData+0x90>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	b291      	uxth	r1, r2
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <Communicate_TxPushData+0x90>)
 800130c:	8011      	strh	r1, [r2, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <Communicate_TxPushData+0x90>)
 8001314:	440b      	add	r3, r1
 8001316:	719a      	strb	r2, [r3, #6]
	tx_buffer.remain++;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <Communicate_TxPushData+0x90>)
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	b29b      	uxth	r3, r3
 800131e:	3301      	adds	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <Communicate_TxPushData+0x90>)
 8001324:	809a      	strh	r2, [r3, #4]
	// 終端に来たら、先頭に戻る
	if(tx_buffer.head >= TRX_BUFFER_SIZE){
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <Communicate_TxPushData+0x90>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	2b7f      	cmp	r3, #127	; 0x7f
 800132e:	d902      	bls.n	8001336 <Communicate_TxPushData+0x76>
		tx_buffer.head = 0;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <Communicate_TxPushData+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
	} else;

	// DMA動作再開
	HAL_UART_Transmit_DMA(&huart2, &tx_data, 1);
 8001336:	2201      	movs	r2, #1
 8001338:	4906      	ldr	r1, [pc, #24]	; (8001354 <Communicate_TxPushData+0x94>)
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <Communicate_TxPushData+0x8c>)
 800133c:	f007 fbce 	bl	8008adc <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 8001340:	b662      	cpsie	i
}
 8001342:	bf00      	nop

	// 割り込み許可
	__enable_irq();
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20001724 	.word	0x20001724
 8001350:	200004a0 	.word	0x200004a0
 8001354:	20000527 	.word	0x20000527

08001358 <Communicate_TxPopData>:

void Communicate_TxPopData( void )
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	// データがない場合
	if( tx_buffer.remain == 0 ) {
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <Communicate_TxPopData+0x5c>)
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	b29b      	uxth	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d103      	bne.n	800136e <Communicate_TxPopData+0x16>
		// DMAを停止
		HAL_UART_DMAStop(&huart2);
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <Communicate_TxPopData+0x60>)
 8001368:	f007 fcb8 	bl	8008cdc <HAL_UART_DMAStop>
		} else;

		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart2, &tx_data, 1);
	}
}
 800136c:	e020      	b.n	80013b0 <Communicate_TxPopData+0x58>
		tx_data = tx_buffer.data[tx_buffer.tail++];
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <Communicate_TxPopData+0x5c>)
 8001370:	885b      	ldrh	r3, [r3, #2]
 8001372:	b29b      	uxth	r3, r3
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	b291      	uxth	r1, r2
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <Communicate_TxPopData+0x5c>)
 800137a:	8051      	strh	r1, [r2, #2]
 800137c:	461a      	mov	r2, r3
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <Communicate_TxPopData+0x5c>)
 8001380:	4413      	add	r3, r2
 8001382:	799a      	ldrb	r2, [r3, #6]
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <Communicate_TxPopData+0x64>)
 8001386:	701a      	strb	r2, [r3, #0]
		tx_buffer.remain--;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <Communicate_TxPopData+0x5c>)
 800138a:	889b      	ldrh	r3, [r3, #4]
 800138c:	b29b      	uxth	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <Communicate_TxPopData+0x5c>)
 8001394:	809a      	strh	r2, [r3, #4]
		if(tx_buffer.tail >= TRX_BUFFER_SIZE){
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <Communicate_TxPopData+0x5c>)
 8001398:	885b      	ldrh	r3, [r3, #2]
 800139a:	b29b      	uxth	r3, r3
 800139c:	2b7f      	cmp	r3, #127	; 0x7f
 800139e:	d902      	bls.n	80013a6 <Communicate_TxPopData+0x4e>
			tx_buffer.tail = 0;
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <Communicate_TxPopData+0x5c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	805a      	strh	r2, [r3, #2]
		HAL_UART_Transmit_DMA(&huart2, &tx_data, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	4904      	ldr	r1, [pc, #16]	; (80013bc <Communicate_TxPopData+0x64>)
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <Communicate_TxPopData+0x60>)
 80013ac:	f007 fb96 	bl	8008adc <HAL_UART_Transmit_DMA>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200004a0 	.word	0x200004a0
 80013b8:	20001724 	.word	0x20001724
 80013bc:	20000527 	.word	0x20000527

080013c0 <HAL_UART_RxCpltCallback>:

/* ---------------------------------------------------------------
	受信・送信完了時のコールバック関数
--------------------------------------------------------------- */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART2 ) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_UART_RxCpltCallback+0x20>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_UART_RxCpltCallback+0x16>
        Communicate_RxPushData();
 80013d2:	f7ff ff07 	bl	80011e4 <Communicate_RxPushData>
    } else;
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40004400 	.word	0x40004400

080013e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART2 ) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_UART_TxCpltCallback+0x20>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_UART_TxCpltCallback+0x16>
        Communicate_TxPopData();
 80013f6:	f7ff ffaf 	bl	8001358 <Communicate_TxPopData>
    } else;
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400

08001408 <Communicate_Initialize>:

/* ---------------------------------------------------------------
	printfとscanfを使用するための設定
--------------------------------------------------------------- */
void Communicate_Initialize( void )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	setbuf(stdout, NULL);
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <Communicate_Initialize+0x18>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f009 fb7d 	bl	800ab14 <setbuf>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000001c 	.word	0x2000001c

08001424 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	Communicate_TxPushData(ch);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff45 	bl	80012c0 <Communicate_TxPushData>
	return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <__io_getchar>:
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
GETCHAR_PROTOTYPE
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	//return Communicate_TerminalRecv();
	return Communicate_RxPopData();
 8001444:	f7ff fefc 	bl	8001240 <Communicate_RxPopData>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <Interrupt_SysTick>:

/* ---------------------------------------------------------------
	SysTickによる1ms周期で割り込む処理関数
--------------------------------------------------------------- */
void Interrupt_SysTick( void )
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	af00      	add	r7, sp, #0

	//LED_ON();

	// 	以下にメインの割り込み処理を記述する
	boot_time += 0.001f;		//呼び出されるたびに1ms追加
 8001454:	4ba5      	ldr	r3, [pc, #660]	; (80016ec <Interrupt_SysTick+0x29c>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80016f0 <Interrupt_SysTick+0x2a0>
 800145e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001462:	4ba2      	ldr	r3, [pc, #648]	; (80016ec <Interrupt_SysTick+0x29c>)
 8001464:	edc3 7a00 	vstr	s15, [r3]

	//速度・即速度計算は10ms周期で行う
	if(servo_cycle_cnt == SERVO_CYCLE_TIME){
 8001468:	4ba2      	ldr	r3, [pc, #648]	; (80016f4 <Interrupt_SysTick+0x2a4>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b0a      	cmp	r3, #10
 800146e:	f040 8082 	bne.w	8001576 <Interrupt_SysTick+0x126>

		//エンコーダ読み込み 走行距離計算
		dist_L_now = Encoder_GetDist_Left();
 8001472:	f000 fef9 	bl	8002268 <Encoder_GetDist_Left>
 8001476:	eef0 7a40 	vmov.f32	s15, s0
 800147a:	4b9f      	ldr	r3, [pc, #636]	; (80016f8 <Interrupt_SysTick+0x2a8>)
 800147c:	edc3 7a00 	vstr	s15, [r3]
		dist_R_now = Encoder_GetDist_Right();
 8001480:	f000 ff5a 	bl	8002338 <Encoder_GetDist_Right>
 8001484:	eef0 7a40 	vmov.f32	s15, s0
 8001488:	4b9c      	ldr	r3, [pc, #624]	; (80016fc <Interrupt_SysTick+0x2ac>)
 800148a:	edc3 7a00 	vstr	s15, [r3]
		dist_C_now = (dist_L_now + dist_R_now) / 2.0f;
 800148e:	4b9a      	ldr	r3, [pc, #616]	; (80016f8 <Interrupt_SysTick+0x2a8>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b99      	ldr	r3, [pc, #612]	; (80016fc <Interrupt_SysTick+0x2ac>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	4b96      	ldr	r3, [pc, #600]	; (8001700 <Interrupt_SysTick+0x2b0>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]

		//現在速度・角速度計算
		vel_L = (dist_L_now - dist_L_last) / 0.01f;
 80014ac:	4b92      	ldr	r3, [pc, #584]	; (80016f8 <Interrupt_SysTick+0x2a8>)
 80014ae:	ed93 7a00 	vldr	s14, [r3]
 80014b2:	4b94      	ldr	r3, [pc, #592]	; (8001704 <Interrupt_SysTick+0x2b4>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014bc:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001708 <Interrupt_SysTick+0x2b8>
 80014c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c4:	4b91      	ldr	r3, [pc, #580]	; (800170c <Interrupt_SysTick+0x2bc>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		vel_R = (dist_R_now - dist_R_last) / 0.01f;
 80014ca:	4b8c      	ldr	r3, [pc, #560]	; (80016fc <Interrupt_SysTick+0x2ac>)
 80014cc:	ed93 7a00 	vldr	s14, [r3]
 80014d0:	4b8f      	ldr	r3, [pc, #572]	; (8001710 <Interrupt_SysTick+0x2c0>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014da:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001708 <Interrupt_SysTick+0x2b8>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <Interrupt_SysTick+0x2c4>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]
		vel_C = (dist_C_now - dist_C_last) / 0.01f;
 80014e8:	4b85      	ldr	r3, [pc, #532]	; (8001700 <Interrupt_SysTick+0x2b0>)
 80014ea:	ed93 7a00 	vldr	s14, [r3]
 80014ee:	4b8a      	ldr	r3, [pc, #552]	; (8001718 <Interrupt_SysTick+0x2c8>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f8:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001708 <Interrupt_SysTick+0x2b8>
 80014fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001500:	4b86      	ldr	r3, [pc, #536]	; (800171c <Interrupt_SysTick+0x2cc>)
 8001502:	edc3 7a00 	vstr	s15, [r3]
		omega = (vel_R - vel_L)/ ((float)TRED * 2.0f);
 8001506:	4b83      	ldr	r3, [pc, #524]	; (8001714 <Interrupt_SysTick+0x2c4>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	4b7f      	ldr	r3, [pc, #508]	; (800170c <Interrupt_SysTick+0x2bc>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001516:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001720 <Interrupt_SysTick+0x2d0>
 800151a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151e:	4b81      	ldr	r3, [pc, #516]	; (8001724 <Interrupt_SysTick+0x2d4>)
 8001520:	edc3 7a00 	vstr	s15, [r3]

		//曲率計算　1/r 旋回半径の逆数を使って無限大演算を防ぐ
		curvature = (vel_R - vel_L) / ((vel_R + vel_L) * (float)TRED );
 8001524:	4b7b      	ldr	r3, [pc, #492]	; (8001714 <Interrupt_SysTick+0x2c4>)
 8001526:	ed93 7a00 	vldr	s14, [r3]
 800152a:	4b78      	ldr	r3, [pc, #480]	; (800170c <Interrupt_SysTick+0x2bc>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001534:	4b77      	ldr	r3, [pc, #476]	; (8001714 <Interrupt_SysTick+0x2c4>)
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	4b74      	ldr	r3, [pc, #464]	; (800170c <Interrupt_SysTick+0x2bc>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001544:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001728 <Interrupt_SysTick+0x2d8>
 8001548:	ee27 7a87 	vmul.f32	s14, s15, s14
 800154c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001550:	4b76      	ldr	r3, [pc, #472]	; (800172c <Interrupt_SysTick+0x2dc>)
 8001552:	edc3 7a00 	vstr	s15, [r3]

		//距離値再代入
		dist_L_last = dist_L_now;
 8001556:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <Interrupt_SysTick+0x2a8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6a      	ldr	r2, [pc, #424]	; (8001704 <Interrupt_SysTick+0x2b4>)
 800155c:	6013      	str	r3, [r2, #0]
		dist_R_last = dist_R_now;
 800155e:	4b67      	ldr	r3, [pc, #412]	; (80016fc <Interrupt_SysTick+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6b      	ldr	r2, [pc, #428]	; (8001710 <Interrupt_SysTick+0x2c0>)
 8001564:	6013      	str	r3, [r2, #0]
		dist_C_last = dist_C_now;
 8001566:	4b66      	ldr	r3, [pc, #408]	; (8001700 <Interrupt_SysTick+0x2b0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6b      	ldr	r2, [pc, #428]	; (8001718 <Interrupt_SysTick+0x2c8>)
 800156c:	6013      	str	r3, [r2, #0]

		servo_cycle_cnt = 0;	//計算周期カウンタクリア
 800156e:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <Interrupt_SysTick+0x2a4>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e005      	b.n	8001582 <Interrupt_SysTick+0x132>

	}
	else{ ++servo_cycle_cnt; }
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <Interrupt_SysTick+0x2a4>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <Interrupt_SysTick+0x2a4>)
 8001580:	701a      	strb	r2, [r3, #0]

	//ラインセンサを読み込んで正規化処理
	ls_L1 = (Sensor_GetValue_L1() - LS_L1_MIN) * AD_RESOLUTION / (LS_L1_MAX - LS_L1_MIN);
 8001582:	f002 fd45 	bl	8004010 <Sensor_GetValue_L1>
 8001586:	4603      	mov	r3, r0
 8001588:	031b      	lsls	r3, r3, #12
 800158a:	4a69      	ldr	r2, [pc, #420]	; (8001730 <Interrupt_SysTick+0x2e0>)
 800158c:	fb82 1203 	smull	r1, r2, r2, r3
 8001590:	1292      	asrs	r2, r2, #10
 8001592:	17db      	asrs	r3, r3, #31
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b66      	ldr	r3, [pc, #408]	; (8001734 <Interrupt_SysTick+0x2e4>)
 800159a:	801a      	strh	r2, [r3, #0]
	ls_R1 = (Sensor_GetValue_R1() - LS_R1_MIN) * AD_RESOLUTION / (LS_R1_MAX - LS_R1_MIN);
 800159c:	f002 fd20 	bl	8003fe0 <Sensor_GetValue_R1>
 80015a0:	4603      	mov	r3, r0
 80015a2:	031b      	lsls	r3, r3, #12
 80015a4:	4a64      	ldr	r2, [pc, #400]	; (8001738 <Interrupt_SysTick+0x2e8>)
 80015a6:	fb82 1203 	smull	r1, r2, r2, r3
 80015aa:	1252      	asrs	r2, r2, #9
 80015ac:	17db      	asrs	r3, r3, #31
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <Interrupt_SysTick+0x2ec>)
 80015b4:	801a      	strh	r2, [r3, #0]
	ls_L2 = (Sensor_GetValue_L2() - LS_L2_MIN) * AD_RESOLUTION / (LS_L2_MAX - LS_L2_MIN);
 80015b6:	f002 fd1f 	bl	8003ff8 <Sensor_GetValue_L2>
 80015ba:	4603      	mov	r3, r0
 80015bc:	031b      	lsls	r3, r3, #12
 80015be:	4a60      	ldr	r2, [pc, #384]	; (8001740 <Interrupt_SysTick+0x2f0>)
 80015c0:	fb82 1203 	smull	r1, r2, r2, r3
 80015c4:	1292      	asrs	r2, r2, #10
 80015c6:	17db      	asrs	r3, r3, #31
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <Interrupt_SysTick+0x2f4>)
 80015ce:	801a      	strh	r2, [r3, #0]
	ls_R2 = (Sensor_GetValue_R2() - LS_R2_MIN) * AD_RESOLUTION / (LS_R2_MAX - LS_R2_MIN);
 80015d0:	f002 fcfa 	bl	8003fc8 <Sensor_GetValue_R2>
 80015d4:	4603      	mov	r3, r0
 80015d6:	031b      	lsls	r3, r3, #12
 80015d8:	4a5b      	ldr	r2, [pc, #364]	; (8001748 <Interrupt_SysTick+0x2f8>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1292      	asrs	r2, r2, #10
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b59      	ldr	r3, [pc, #356]	; (800174c <Interrupt_SysTick+0x2fc>)
 80015e8:	801a      	strh	r2, [r3, #0]
	mk_L  = (Sensor_GetValue_ML() - MK_L_MIN) * AD_RESOLUTION / (MK_L_MAX - MK_L_MIN);
 80015ea:	f002 fd1d 	bl	8004028 <Sensor_GetValue_ML>
 80015ee:	4603      	mov	r3, r0
 80015f0:	031b      	lsls	r3, r3, #12
 80015f2:	4a57      	ldr	r2, [pc, #348]	; (8001750 <Interrupt_SysTick+0x300>)
 80015f4:	fb82 1203 	smull	r1, r2, r2, r3
 80015f8:	441a      	add	r2, r3
 80015fa:	1212      	asrs	r2, r2, #8
 80015fc:	17db      	asrs	r3, r3, #31
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b54      	ldr	r3, [pc, #336]	; (8001754 <Interrupt_SysTick+0x304>)
 8001604:	801a      	strh	r2, [r3, #0]
	mk_R  = (Sensor_GetValue_MR() - MK_R_MIN) * AD_RESOLUTION / (MK_R_MAX - MK_R_MIN);
 8001606:	f002 fd1b 	bl	8004040 <Sensor_GetValue_MR>
 800160a:	4603      	mov	r3, r0
 800160c:	031b      	lsls	r3, r3, #12
 800160e:	4a50      	ldr	r2, [pc, #320]	; (8001750 <Interrupt_SysTick+0x300>)
 8001610:	fb82 1203 	smull	r1, r2, r2, r3
 8001614:	441a      	add	r2, r3
 8001616:	1212      	asrs	r2, r2, #8
 8001618:	17db      	asrs	r3, r3, #31
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <Interrupt_SysTick+0x308>)
 8001620:	801a      	strh	r2, [r3, #0]
	if(ls_R2 < AD_MIM){ ls_R2 = AD_MIM; }
	if(mk_L < AD_MIM){ mk_L = AD_MIM; }
	if(mk_R < AD_MIM){ mk_R = AD_MIM; }

	//ラインセンサ取得値の最大側のガード
	if(ls_L1 >= AD_MAX){ ls_L1 = AD_MAX; }
 8001622:	4b44      	ldr	r3, [pc, #272]	; (8001734 <Interrupt_SysTick+0x2e4>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800162a:	d303      	bcc.n	8001634 <Interrupt_SysTick+0x1e4>
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <Interrupt_SysTick+0x2e4>)
 800162e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001632:	801a      	strh	r2, [r3, #0]
	if(ls_R1 >= AD_MAX){ ls_R1 = AD_MAX; }
 8001634:	4b41      	ldr	r3, [pc, #260]	; (800173c <Interrupt_SysTick+0x2ec>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800163c:	d303      	bcc.n	8001646 <Interrupt_SysTick+0x1f6>
 800163e:	4b3f      	ldr	r3, [pc, #252]	; (800173c <Interrupt_SysTick+0x2ec>)
 8001640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001644:	801a      	strh	r2, [r3, #0]
	if(ls_L2 >= AD_MAX){ ls_L2 = AD_MAX; }
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <Interrupt_SysTick+0x2f4>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164e:	d303      	bcc.n	8001658 <Interrupt_SysTick+0x208>
 8001650:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <Interrupt_SysTick+0x2f4>)
 8001652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001656:	801a      	strh	r2, [r3, #0]
	if(ls_R2 >= AD_MAX){ ls_R2 = AD_MAX; }
 8001658:	4b3c      	ldr	r3, [pc, #240]	; (800174c <Interrupt_SysTick+0x2fc>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001660:	d303      	bcc.n	800166a <Interrupt_SysTick+0x21a>
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <Interrupt_SysTick+0x2fc>)
 8001664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001668:	801a      	strh	r2, [r3, #0]
	if(mk_L >= AD_MAX){ mk_L = AD_MAX; }
 800166a:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <Interrupt_SysTick+0x304>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001672:	d303      	bcc.n	800167c <Interrupt_SysTick+0x22c>
 8001674:	4b37      	ldr	r3, [pc, #220]	; (8001754 <Interrupt_SysTick+0x304>)
 8001676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167a:	801a      	strh	r2, [r3, #0]
	if(mk_R >= AD_MAX){ mk_R = AD_MAX; }
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <Interrupt_SysTick+0x308>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001684:	d303      	bcc.n	800168e <Interrupt_SysTick+0x23e>
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <Interrupt_SysTick+0x308>)
 8001688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168c:	801a      	strh	r2, [r3, #0]

	//ラインアウトフラグ処理
	if((ls_L2 < LINE_OUT_AD) && (ls_L1< LINE_OUT_AD) && (ls_R1 < LINE_OUT_AD) && (ls_R2 < LINE_OUT_AD)){
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <Interrupt_SysTick+0x2f4>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001696:	d212      	bcs.n	80016be <Interrupt_SysTick+0x26e>
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <Interrupt_SysTick+0x2e4>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a0:	d20d      	bcs.n	80016be <Interrupt_SysTick+0x26e>
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <Interrupt_SysTick+0x2ec>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016aa:	d208      	bcs.n	80016be <Interrupt_SysTick+0x26e>
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <Interrupt_SysTick+0x2fc>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016b4:	d203      	bcs.n	80016be <Interrupt_SysTick+0x26e>
		line_out_flag = 1;
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <Interrupt_SysTick+0x30c>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e002      	b.n	80016c4 <Interrupt_SysTick+0x274>
	}
	else{ line_out_flag = 0; }
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <Interrupt_SysTick+0x30c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]

	//左右マーカーセンサの状態処理
	if( mk_L >= MK_L_THRESHOLD ){ marker_state_L = MK_LEFT; }
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <Interrupt_SysTick+0x304>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	2bd1      	cmp	r3, #209	; 0xd1
 80016ca:	d903      	bls.n	80016d4 <Interrupt_SysTick+0x284>
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <Interrupt_SysTick+0x310>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e002      	b.n	80016da <Interrupt_SysTick+0x28a>
	else{ marker_state_L = 0; }
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <Interrupt_SysTick+0x310>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
	if( mk_R >= MK_R_THRESHOLD ){ marker_state_R = MK_RIGHT; }
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <Interrupt_SysTick+0x308>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	2bd1      	cmp	r3, #209	; 0xd1
 80016e0:	d942      	bls.n	8001768 <Interrupt_SysTick+0x318>
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <Interrupt_SysTick+0x314>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e041      	b.n	800176e <Interrupt_SysTick+0x31e>
 80016ea:	bf00      	nop
 80016ec:	20000210 	.word	0x20000210
 80016f0:	3a83126f 	.word	0x3a83126f
 80016f4:	200002a0 	.word	0x200002a0
 80016f8:	20000214 	.word	0x20000214
 80016fc:	2000021c 	.word	0x2000021c
 8001700:	20000224 	.word	0x20000224
 8001704:	20000218 	.word	0x20000218
 8001708:	3c23d70a 	.word	0x3c23d70a
 800170c:	20000230 	.word	0x20000230
 8001710:	20000220 	.word	0x20000220
 8001714:	20000234 	.word	0x20000234
 8001718:	20000228 	.word	0x20000228
 800171c:	20000238 	.word	0x20000238
 8001720:	3e27ef9e 	.word	0x3e27ef9e
 8001724:	2000023c 	.word	0x2000023c
 8001728:	3da7ef9e 	.word	0x3da7ef9e
 800172c:	20000240 	.word	0x20000240
 8001730:	7482296b 	.word	0x7482296b
 8001734:	2000028c 	.word	0x2000028c
 8001738:	37c67b51 	.word	0x37c67b51
 800173c:	2000028e 	.word	0x2000028e
 8001740:	77280773 	.word	0x77280773
 8001744:	2000028a 	.word	0x2000028a
 8001748:	7fe007ff 	.word	0x7fe007ff
 800174c:	20000290 	.word	0x20000290
 8001750:	9c09c09d 	.word	0x9c09c09d
 8001754:	20000292 	.word	0x20000292
 8001758:	20000294 	.word	0x20000294
 800175c:	200002a4 	.word	0x200002a4
 8001760:	200002a2 	.word	0x200002a2
 8001764:	200002a3 	.word	0x200002a3
	else{ marker_state_R = 0; }
 8001768:	4bbd      	ldr	r3, [pc, #756]	; (8001a60 <Interrupt_SysTick+0x610>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]

	//ライン差分制御量計算
	line_diff = ( ls_L1 - ls_R1 ) + 2 * ( ls_L2 - ls_R2 );	//ライン差分生値
 800176e:	4bbd      	ldr	r3, [pc, #756]	; (8001a64 <Interrupt_SysTick+0x614>)
 8001770:	881a      	ldrh	r2, [r3, #0]
 8001772:	4bbd      	ldr	r3, [pc, #756]	; (8001a68 <Interrupt_SysTick+0x618>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b29a      	uxth	r2, r3
 800177a:	4bbc      	ldr	r3, [pc, #752]	; (8001a6c <Interrupt_SysTick+0x61c>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4bbb      	ldr	r3, [pc, #748]	; (8001a70 <Interrupt_SysTick+0x620>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	1acb      	subs	r3, r1, r3
 8001786:	b29b      	uxth	r3, r3
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	b29b      	uxth	r3, r3
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21a      	sxth	r2, r3
 8001792:	4bb8      	ldr	r3, [pc, #736]	; (8001a74 <Interrupt_SysTick+0x624>)
 8001794:	801a      	strh	r2, [r3, #0]
	line_diff_dist = (float)LINE_DIFF( line_diff );			//ライン差分距離換算
 8001796:	4bb7      	ldr	r3, [pc, #732]	; (8001a74 <Interrupt_SysTick+0x624>)
 8001798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fec1 	bl	8000524 <__aeabi_i2d>
 80017a2:	a3a7      	add	r3, pc, #668	; (adr r3, 8001a40 <Interrupt_SysTick+0x5f0>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe ff26 	bl	80005f8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	a3a4      	add	r3, pc, #656	; (adr r3, 8001a48 <Interrupt_SysTick+0x5f8>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe fd67 	bl	800028c <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa0f 	bl	8000be8 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4aaa      	ldr	r2, [pc, #680]	; (8001a78 <Interrupt_SysTick+0x628>)
 80017ce:	6013      	str	r3, [r2, #0]

	//機体サーボ系記述
	if(servo_enable_flag == 1){
 80017d0:	4baa      	ldr	r3, [pc, #680]	; (8001a7c <Interrupt_SysTick+0x62c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	f040 8362 	bne.w	8001e9e <Interrupt_SysTick+0xa4e>

		//目標速度の上下ガード
		if(vel_set >  VEL_MAX){ vel_set = VEL_MAX; }	//入力速度の最大ガード
 80017da:	4ba9      	ldr	r3, [pc, #676]	; (8001a80 <Interrupt_SysTick+0x630>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80017e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	dd03      	ble.n	80017f6 <Interrupt_SysTick+0x3a6>
 80017ee:	4ba4      	ldr	r3, [pc, #656]	; (8001a80 <Interrupt_SysTick+0x630>)
 80017f0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80017f4:	601a      	str	r2, [r3, #0]
		if(vel_set <= VEL_MIN){ vel_set = VEL_MIN; }	//入力速度の最小ガード
 80017f6:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <Interrupt_SysTick+0x630>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d802      	bhi.n	8001810 <Interrupt_SysTick+0x3c0>
 800180a:	4b9d      	ldr	r3, [pc, #628]	; (8001a80 <Interrupt_SysTick+0x630>)
 800180c:	4a9d      	ldr	r2, [pc, #628]	; (8001a84 <Interrupt_SysTick+0x634>)
 800180e:	601a      	str	r2, [r3, #0]

		//目標速度の加減速処理
		if( vel_target == vel_set ){
 8001810:	4b9d      	ldr	r3, [pc, #628]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	4b9a      	ldr	r3, [pc, #616]	; (8001a80 <Interrupt_SysTick+0x630>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d104      	bne.n	8001830 <Interrupt_SysTick+0x3e0>
			vel_target = vel_set;
 8001826:	4b96      	ldr	r3, [pc, #600]	; (8001a80 <Interrupt_SysTick+0x630>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a97      	ldr	r2, [pc, #604]	; (8001a88 <Interrupt_SysTick+0x638>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e034      	b.n	800189a <Interrupt_SysTick+0x44a>
		}
		else if( vel_target < vel_set ){
 8001830:	4b95      	ldr	r3, [pc, #596]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	4b92      	ldr	r3, [pc, #584]	; (8001a80 <Interrupt_SysTick+0x630>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d50f      	bpl.n	8001866 <Interrupt_SysTick+0x416>
			vel_target = vel_target + accel * 0.001f;	// V =  V + att
 8001846:	4b91      	ldr	r3, [pc, #580]	; (8001a8c <Interrupt_SysTick+0x63c>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001a90 <Interrupt_SysTick+0x640>
 8001850:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001854:	4b8c      	ldr	r3, [pc, #560]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	4b8a      	ldr	r3, [pc, #552]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
 8001864:	e019      	b.n	800189a <Interrupt_SysTick+0x44a>
		}
		else if( vel_target > vel_set ){
 8001866:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001868:	ed93 7a00 	vldr	s14, [r3]
 800186c:	4b84      	ldr	r3, [pc, #528]	; (8001a80 <Interrupt_SysTick+0x630>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	dd0e      	ble.n	800189a <Interrupt_SysTick+0x44a>
			vel_target = vel_target - accel * 0.001f;	// V =  V - att
 800187c:	4b82      	ldr	r3, [pc, #520]	; (8001a88 <Interrupt_SysTick+0x638>)
 800187e:	ed93 7a00 	vldr	s14, [r3]
 8001882:	4b82      	ldr	r3, [pc, #520]	; (8001a8c <Interrupt_SysTick+0x63c>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001a90 <Interrupt_SysTick+0x640>
 800188c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001894:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001896:	edc3 7a00 	vstr	s15, [r3]
		}

		//目標角速度計算
		omega_set = ((2.0f * line_diff_dist)/(WHEEL_BASE * WHEEL_BASE) - (line_diff_dist * line_diff_dist)) * vel_C;
 800189a:	4b77      	ldr	r3, [pc, #476]	; (8001a78 <Interrupt_SysTick+0x628>)
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018a4:	ee17 0a90 	vmov	r0, s15
 80018a8:	f7fe fe4e 	bl	8000548 <__aeabi_f2d>
 80018ac:	a368      	add	r3, pc, #416	; (adr r3, 8001a50 <Interrupt_SysTick+0x600>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe ffcb 	bl	800084c <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <Interrupt_SysTick+0x628>)
 80018c0:	ed93 7a00 	vldr	s14, [r3]
 80018c4:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <Interrupt_SysTick+0x628>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ce:	ee17 0a90 	vmov	r0, s15
 80018d2:	f7fe fe39 	bl	8000548 <__aeabi_f2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fcd3 	bl	8000288 <__aeabi_dsub>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <Interrupt_SysTick+0x644>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe2a 	bl	8000548 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fe7c 	bl	80005f8 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f96e 	bl	8000be8 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4a62      	ldr	r2, [pc, #392]	; (8001a98 <Interrupt_SysTick+0x648>)
 8001910:	6013      	str	r3, [r2, #0]
		omega_target = 2.0f * omega_set; //SSMレート比の倍という隠し味
 8001912:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <Interrupt_SysTick+0x648>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800191c:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <Interrupt_SysTick+0x64c>)
 800191e:	edc3 7a00 	vstr	s15, [r3]

		//左右輪目標速度再計算
		vel_L_target = vel_target - (TRED/2.0f) * omega_target;
 8001922:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe0e 	bl	8000548 <__aeabi_f2d>
 800192c:	4604      	mov	r4, r0
 800192e:	460d      	mov	r5, r1
 8001930:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <Interrupt_SysTick+0x64c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe07 	bl	8000548 <__aeabi_f2d>
 800193a:	a347      	add	r3, pc, #284	; (adr r3, 8001a58 <Interrupt_SysTick+0x608>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fe5a 	bl	80005f8 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fc9c 	bl	8000288 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff f946 	bl	8000be8 <__aeabi_d2f>
 800195c:	4603      	mov	r3, r0
 800195e:	4a50      	ldr	r2, [pc, #320]	; (8001aa0 <Interrupt_SysTick+0x650>)
 8001960:	6013      	str	r3, [r2, #0]
		vel_R_target = vel_target + (TRED/2.0f) * omega_target;
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <Interrupt_SysTick+0x638>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fdee 	bl	8000548 <__aeabi_f2d>
 800196c:	4604      	mov	r4, r0
 800196e:	460d      	mov	r5, r1
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <Interrupt_SysTick+0x64c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fde7 	bl	8000548 <__aeabi_f2d>
 800197a:	a337      	add	r3, pc, #220	; (adr r3, 8001a58 <Interrupt_SysTick+0x608>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe3a 	bl	80005f8 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc7e 	bl	800028c <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f926 	bl	8000be8 <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	4a41      	ldr	r2, [pc, #260]	; (8001aa4 <Interrupt_SysTick+0x654>)
 80019a0:	6013      	str	r3, [r2, #0]

		//速度制御量計算
		vel_error_p = vel_target - vel_C;
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <Interrupt_SysTick+0x638>)
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <Interrupt_SysTick+0x644>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <Interrupt_SysTick+0x658>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
		vel_error_i += vel_error_p;
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <Interrupt_SysTick+0x65c>)
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <Interrupt_SysTick+0x658>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <Interrupt_SysTick+0x65c>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]
		vel_error_d = vel_error_p - vel_error_p_last;
 80019ce:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <Interrupt_SysTick+0x658>)
 80019d0:	ed93 7a00 	vldr	s14, [r3]
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <Interrupt_SysTick+0x660>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <Interrupt_SysTick+0x664>)
 80019e0:	edc3 7a00 	vstr	s15, [r3]
		vel_error_p_last = vel_error_p;
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <Interrupt_SysTick+0x658>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <Interrupt_SysTick+0x660>)
 80019ea:	6013      	str	r3, [r2, #0]

		//速度制御 積算制御量，上下ガード
		if( vel_error_i >= PWM_MOT_MAX){ vel_error_i = PWM_MOT_MAX; }
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <Interrupt_SysTick+0x65c>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ab8 <Interrupt_SysTick+0x668>
 80019f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	db03      	blt.n	8001a08 <Interrupt_SysTick+0x5b8>
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <Interrupt_SysTick+0x65c>)
 8001a02:	4a2e      	ldr	r2, [pc, #184]	; (8001abc <Interrupt_SysTick+0x66c>)
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e00c      	b.n	8001a22 <Interrupt_SysTick+0x5d2>
		else if( vel_error_i <= -PWM_MOT_MAX){ vel_error_i = -PWM_MOT_MAX; }
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <Interrupt_SysTick+0x65c>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ac0 <Interrupt_SysTick+0x670>
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d802      	bhi.n	8001a22 <Interrupt_SysTick+0x5d2>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <Interrupt_SysTick+0x65c>)
 8001a1e:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <Interrupt_SysTick+0x674>)
 8001a20:	601a      	str	r2, [r3, #0]

		//速度制御量計算の上下ガード
		if( vel_control >= PWM_MOT_MAX){ vel_control = PWM_MOT_MAX; }
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <Interrupt_SysTick+0x678>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001ab8 <Interrupt_SysTick+0x668>
 8001a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	db4a      	blt.n	8001acc <Interrupt_SysTick+0x67c>
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <Interrupt_SysTick+0x678>)
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <Interrupt_SysTick+0x66c>)
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e053      	b.n	8001ae6 <Interrupt_SysTick+0x696>
 8001a3e:	bf00      	nop
 8001a40:	38ccbb8a 	.word	0x38ccbb8a
 8001a44:	3ecc0f1e 	.word	0x3ecc0f1e
 8001a48:	e6724661 	.word	0xe6724661
 8001a4c:	3f4d2750 	.word	0x3f4d2750
 8001a50:	70a3d70a 	.word	0x70a3d70a
 8001a54:	3f770a3d 	.word	0x3f770a3d
 8001a58:	b645a1cb 	.word	0xb645a1cb
 8001a5c:	3fa4fdf3 	.word	0x3fa4fdf3
 8001a60:	200002a3 	.word	0x200002a3
 8001a64:	2000028c 	.word	0x2000028c
 8001a68:	2000028e 	.word	0x2000028e
 8001a6c:	2000028a 	.word	0x2000028a
 8001a70:	20000290 	.word	0x20000290
 8001a74:	20000288 	.word	0x20000288
 8001a78:	20000284 	.word	0x20000284
 8001a7c:	200002a1 	.word	0x200002a1
 8001a80:	20000244 	.word	0x20000244
 8001a84:	bf800000 	.word	0xbf800000
 8001a88:	20000248 	.word	0x20000248
 8001a8c:	2000022c 	.word	0x2000022c
 8001a90:	3a83126f 	.word	0x3a83126f
 8001a94:	20000238 	.word	0x20000238
 8001a98:	20000260 	.word	0x20000260
 8001a9c:	20000264 	.word	0x20000264
 8001aa0:	2000027c 	.word	0x2000027c
 8001aa4:	20000280 	.word	0x20000280
 8001aa8:	2000024c 	.word	0x2000024c
 8001aac:	20000254 	.word	0x20000254
 8001ab0:	20000250 	.word	0x20000250
 8001ab4:	20000258 	.word	0x20000258
 8001ab8:	446d8000 	.word	0x446d8000
 8001abc:	446d8000 	.word	0x446d8000
 8001ac0:	c46d8000 	.word	0xc46d8000
 8001ac4:	c46d8000 	.word	0xc46d8000
 8001ac8:	2000025c 	.word	0x2000025c
		else if( vel_control <= -PWM_MOT_MAX){ vel_control = -PWM_MOT_MAX; }
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <Interrupt_SysTick+0x8f8>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001d4c <Interrupt_SysTick+0x8fc>
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	d802      	bhi.n	8001ae6 <Interrupt_SysTick+0x696>
 8001ae0:	4b99      	ldr	r3, [pc, #612]	; (8001d48 <Interrupt_SysTick+0x8f8>)
 8001ae2:	4a9b      	ldr	r2, [pc, #620]	; (8001d50 <Interrupt_SysTick+0x900>)
 8001ae4:	601a      	str	r2, [r3, #0]

		//角速度制御量計算
		omega_error_p = omega_target - omega;
 8001ae6:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <Interrupt_SysTick+0x904>)
 8001ae8:	ed93 7a00 	vldr	s14, [r3]
 8001aec:	4b9a      	ldr	r3, [pc, #616]	; (8001d58 <Interrupt_SysTick+0x908>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	4b99      	ldr	r3, [pc, #612]	; (8001d5c <Interrupt_SysTick+0x90c>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		omega_error_i += omega_error_p;
 8001afc:	4b98      	ldr	r3, [pc, #608]	; (8001d60 <Interrupt_SysTick+0x910>)
 8001afe:	ed93 7a00 	vldr	s14, [r3]
 8001b02:	4b96      	ldr	r3, [pc, #600]	; (8001d5c <Interrupt_SysTick+0x90c>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	4b94      	ldr	r3, [pc, #592]	; (8001d60 <Interrupt_SysTick+0x910>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
		omega_error_d = omega_error_p - omega_error_p_last;
 8001b12:	4b92      	ldr	r3, [pc, #584]	; (8001d5c <Interrupt_SysTick+0x90c>)
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <Interrupt_SysTick+0x914>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b22:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <Interrupt_SysTick+0x918>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
		omega_error_p_last = omega_error_p;
 8001b28:	4b8c      	ldr	r3, [pc, #560]	; (8001d5c <Interrupt_SysTick+0x90c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a8d      	ldr	r2, [pc, #564]	; (8001d64 <Interrupt_SysTick+0x914>)
 8001b2e:	6013      	str	r3, [r2, #0]

		//角速度制御 積算制御量，上下ガード
		if( omega_error_i >= PWM_MOT_MAX){ omega_error_i = PWM_MOT_MAX; }
 8001b30:	4b8b      	ldr	r3, [pc, #556]	; (8001d60 <Interrupt_SysTick+0x910>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001d6c <Interrupt_SysTick+0x91c>
 8001b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	db03      	blt.n	8001b4c <Interrupt_SysTick+0x6fc>
 8001b44:	4b86      	ldr	r3, [pc, #536]	; (8001d60 <Interrupt_SysTick+0x910>)
 8001b46:	4a8a      	ldr	r2, [pc, #552]	; (8001d70 <Interrupt_SysTick+0x920>)
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e00c      	b.n	8001b66 <Interrupt_SysTick+0x716>
		else if( omega_error_i <= -PWM_MOT_MAX){ omega_error_i = -PWM_MOT_MAX; }
 8001b4c:	4b84      	ldr	r3, [pc, #528]	; (8001d60 <Interrupt_SysTick+0x910>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001d4c <Interrupt_SysTick+0x8fc>
 8001b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	d802      	bhi.n	8001b66 <Interrupt_SysTick+0x716>
 8001b60:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <Interrupt_SysTick+0x910>)
 8001b62:	4a7b      	ldr	r2, [pc, #492]	; (8001d50 <Interrupt_SysTick+0x900>)
 8001b64:	601a      	str	r2, [r3, #0]

		//角速度制御量計算の上下ガード
		if( omega_control >= PWM_MOT_MAX){ omega_control = PWM_MOT_MAX; }
 8001b66:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <Interrupt_SysTick+0x924>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001d6c <Interrupt_SysTick+0x91c>
 8001b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	db03      	blt.n	8001b82 <Interrupt_SysTick+0x732>
 8001b7a:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <Interrupt_SysTick+0x924>)
 8001b7c:	4a7c      	ldr	r2, [pc, #496]	; (8001d70 <Interrupt_SysTick+0x920>)
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e00c      	b.n	8001b9c <Interrupt_SysTick+0x74c>
		else if( omega_control <= -PWM_MOT_MAX){ omega_control = -PWM_MOT_MAX; }
 8001b82:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <Interrupt_SysTick+0x924>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001d4c <Interrupt_SysTick+0x8fc>
 8001b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d802      	bhi.n	8001b9c <Interrupt_SysTick+0x74c>
 8001b96:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <Interrupt_SysTick+0x924>)
 8001b98:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <Interrupt_SysTick+0x900>)
 8001b9a:	601a      	str	r2, [r3, #0]

		//速度制御量・角速度制御量　ゲイン演算
		vel_control = vel_error_p * V_KP + vel_error_i * V_KI + vel_error_d * V_KD;
 8001b9c:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <Interrupt_SysTick+0x928>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd1 	bl	8000548 <__aeabi_f2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <Interrupt_SysTick+0x92c>)
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	4b71      	ldr	r3, [pc, #452]	; (8001d80 <Interrupt_SysTick+0x930>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fcc3 	bl	8000548 <__aeabi_f2d>
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <Interrupt_SysTick+0x934>)
 8001bc8:	f7fe fd16 	bl	80005f8 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb5a 	bl	800028c <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4614      	mov	r4, r2
 8001bde:	461d      	mov	r5, r3
 8001be0:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <Interrupt_SysTick+0x938>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fcaf 	bl	8000548 <__aeabi_f2d>
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	f7fe fd01 	bl	80005f8 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fb45 	bl	800028c <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ffed 	bl	8000be8 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a4d      	ldr	r2, [pc, #308]	; (8001d48 <Interrupt_SysTick+0x8f8>)
 8001c12:	6013      	str	r3, [r2, #0]
		omega_control = omega_error_p * W_KP + omega_error_i * W_KI + omega_error_d * W_KD;
 8001c14:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <Interrupt_SysTick+0x90c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc95 	bl	8000548 <__aeabi_f2d>
 8001c1e:	a344      	add	r3, pc, #272	; (adr r3, 8001d30 <Interrupt_SysTick+0x8e0>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fce8 	bl	80005f8 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <Interrupt_SysTick+0x910>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc87 	bl	8000548 <__aeabi_f2d>
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f7fe fcd9 	bl	80005f8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fb1d 	bl	800028c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <Interrupt_SysTick+0x918>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc72 	bl	8000548 <__aeabi_f2d>
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <Interrupt_SysTick+0x93c>)
 8001c6a:	f7fe fcc5 	bl	80005f8 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fb09 	bl	800028c <__adddf3>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ffb1 	bl	8000be8 <__aeabi_d2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a3a      	ldr	r2, [pc, #232]	; (8001d74 <Interrupt_SysTick+0x924>)
 8001c8a:	6013      	str	r3, [r2, #0]

		//左右輪に制御量の代入
		duty_L = MOT_FF_DUTY_L( vel_L_target ) + (int16_t)vel_control - (int16_t)omega_control;
 8001c8c:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <Interrupt_SysTick+0x940>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc59 	bl	8000548 <__aeabi_f2d>
 8001c96:	a328      	add	r3, pc, #160	; (adr r3, 8001d38 <Interrupt_SysTick+0x8e8>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fcac 	bl	80005f8 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	a325      	add	r3, pc, #148	; (adr r3, 8001d40 <Interrupt_SysTick+0x8f0>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe faed 	bl	800028c <__adddf3>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4614      	mov	r4, r2
 8001cb8:	461d      	mov	r5, r3
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <Interrupt_SysTick+0x8f8>)
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc4:	ee17 3a90 	vmov	r3, s15
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc2a 	bl	8000524 <__aeabi_i2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fad8 	bl	800028c <__adddf3>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4614      	mov	r4, r2
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <Interrupt_SysTick+0x924>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cee:	ee17 3a90 	vmov	r3, s15
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc15 	bl	8000524 <__aeabi_i2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fac1 	bl	8000288 <__aeabi_dsub>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe ff23 	bl	8000b58 <__aeabi_d2iz>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <Interrupt_SysTick+0x944>)
 8001d18:	801a      	strh	r2, [r3, #0]
		duty_L = SIGN(duty_L) * MIN( PWM_MOT_MAX, ABS(duty_L) );
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <Interrupt_SysTick+0x944>)
 8001d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da39      	bge.n	8001d98 <Interrupt_SysTick+0x948>
 8001d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d28:	e037      	b.n	8001d9a <Interrupt_SysTick+0x94a>
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	00000000 	.word	0x00000000
 8001d34:	4075e000 	.word	0x4075e000
 8001d38:	cccccccd 	.word	0xcccccccd
 8001d3c:	4092a2cc 	.word	0x4092a2cc
 8001d40:	e9e1b08a 	.word	0xe9e1b08a
 8001d44:	4011f295 	.word	0x4011f295
 8001d48:	2000025c 	.word	0x2000025c
 8001d4c:	c46d8000 	.word	0xc46d8000
 8001d50:	c46d8000 	.word	0xc46d8000
 8001d54:	20000264 	.word	0x20000264
 8001d58:	2000023c 	.word	0x2000023c
 8001d5c:	20000268 	.word	0x20000268
 8001d60:	20000270 	.word	0x20000270
 8001d64:	2000026c 	.word	0x2000026c
 8001d68:	20000274 	.word	0x20000274
 8001d6c:	446d8000 	.word	0x446d8000
 8001d70:	446d8000 	.word	0x446d8000
 8001d74:	20000278 	.word	0x20000278
 8001d78:	2000024c 	.word	0x2000024c
 8001d7c:	408f4000 	.word	0x408f4000
 8001d80:	20000254 	.word	0x20000254
 8001d84:	40240000 	.word	0x40240000
 8001d88:	20000258 	.word	0x20000258
 8001d8c:	40418000 	.word	0x40418000
 8001d90:	2000027c 	.word	0x2000027c
 8001d94:	20000296 	.word	0x20000296
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <Interrupt_SysTick+0xac8>)
 8001d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bfb8      	it	lt
 8001da4:	425b      	neglt	r3, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f240 31b6 	movw	r1, #950	; 0x3b6
 8001dac:	428b      	cmp	r3, r1
 8001dae:	bf28      	it	cs
 8001db0:	460b      	movcs	r3, r1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	fb12 f303 	smulbb	r3, r2, r3
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <Interrupt_SysTick+0xac8>)
 8001dbe:	801a      	strh	r2, [r3, #0]
		Motor_SetDuty_Left(duty_L);
 8001dc0:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <Interrupt_SysTick+0xac8>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 f90a 	bl	8002fe0 <Motor_SetDuty_Left>

		duty_R = MOT_FF_DUTY_R( vel_R_target ) + (int16_t)vel_control + (int16_t)omega_control;
 8001dcc:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <Interrupt_SysTick+0xacc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbb9 	bl	8000548 <__aeabi_f2d>
 8001dd6:	a34c      	add	r3, pc, #304	; (adr r3, 8001f08 <Interrupt_SysTick+0xab8>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fc0c 	bl	80005f8 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	a349      	add	r3, pc, #292	; (adr r3, 8001f10 <Interrupt_SysTick+0xac0>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fa4d 	bl	800028c <__adddf3>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	461d      	mov	r5, r3
 8001dfa:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <Interrupt_SysTick+0xad0>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e04:	ee17 3a90 	vmov	r3, s15
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb8a 	bl	8000524 <__aeabi_i2d>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fa38 	bl	800028c <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4614      	mov	r4, r2
 8001e22:	461d      	mov	r5, r3
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <Interrupt_SysTick+0xad4>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2e:	ee17 3a90 	vmov	r3, s15
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb75 	bl	8000524 <__aeabi_i2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	f7fe fa23 	bl	800028c <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7fe fe83 	bl	8000b58 <__aeabi_d2iz>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <Interrupt_SysTick+0xad8>)
 8001e58:	801a      	strh	r2, [r3, #0]
		duty_R = SIGN(duty_R) * MIN( PWM_MOT_MAX, ABS(duty_R) );
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <Interrupt_SysTick+0xad8>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da02      	bge.n	8001e6a <Interrupt_SysTick+0xa1a>
 8001e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e68:	e000      	b.n	8001e6c <Interrupt_SysTick+0xa1c>
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <Interrupt_SysTick+0xad8>)
 8001e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bfb8      	it	lt
 8001e76:	425b      	neglt	r3, r3
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f240 31b6 	movw	r1, #950	; 0x3b6
 8001e7e:	428b      	cmp	r3, r1
 8001e80:	bf28      	it	cs
 8001e82:	460b      	movcs	r3, r1
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	fb12 f303 	smulbb	r3, r2, r3
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <Interrupt_SysTick+0xad8>)
 8001e90:	801a      	strh	r2, [r3, #0]
		Motor_SetDuty_Right(duty_R);
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <Interrupt_SysTick+0xad8>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 f909 	bl	80030b0 <Motor_SetDuty_Right>

	}

	//ブザー制御
	if(buzz_times > 0){					//	ブザー使用指示回数が0以上のとき
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <Interrupt_SysTick+0xadc>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02b      	beq.n	8001efe <Interrupt_SysTick+0xaae>
		BUZZ_ON();						//	ブザー鳴らす
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f004 fa64 	bl	800637c <HAL_GPIO_WritePin>
		if(buzz_cnt >= buzz_set_ms){	//	指定時間待ち
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <Interrupt_SysTick+0xae0>)
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <Interrupt_SysTick+0xae4>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d306      	bcc.n	8001ece <Interrupt_SysTick+0xa7e>
			BUZZ_OFF();					//	ブザー落とす
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eca:	f004 fa57 	bl	800637c <HAL_GPIO_WritePin>
		}
		if(buzz_cnt >= buzz_set_ms*2 ){	//	指定時間待ち
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <Interrupt_SysTick+0xae0>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <Interrupt_SysTick+0xae4>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	429a      	cmp	r2, r3
 8001edc:	db09      	blt.n	8001ef2 <Interrupt_SysTick+0xaa2>
			buzz_cnt = 0;				//	割り込みブザーカウントインクリメントクリア
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <Interrupt_SysTick+0xae0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	801a      	strh	r2, [r3, #0]
			--buzz_times;				//	ブザー使用回数デクリメント
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <Interrupt_SysTick+0xadc>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <Interrupt_SysTick+0xadc>)
 8001eee:	801a      	strh	r2, [r3, #0]
		}
		else{++buzz_cnt;}				//	ブザーのカウントインクリメント
	}

	//LED_OFF();
}
 8001ef0:	e005      	b.n	8001efe <Interrupt_SysTick+0xaae>
		else{++buzz_cnt;}				//	ブザーのカウントインクリメント
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <Interrupt_SysTick+0xae0>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <Interrupt_SysTick+0xae0>)
 8001efc:	801a      	strh	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	bdb0      	pop	{r4, r5, r7, pc}
 8001f02:	bf00      	nop
 8001f04:	f3af 8000 	nop.w
 8001f08:	33333333 	.word	0x33333333
 8001f0c:	40930b33 	.word	0x40930b33
 8001f10:	d6388659 	.word	0xd6388659
 8001f14:	3fe46dc5 	.word	0x3fe46dc5
 8001f18:	20000296 	.word	0x20000296
 8001f1c:	20000280 	.word	0x20000280
 8001f20:	2000025c 	.word	0x2000025c
 8001f24:	20000278 	.word	0x20000278
 8001f28:	20000298 	.word	0x20000298
 8001f2c:	2000029c 	.word	0x2000029c
 8001f30:	2000029a 	.word	0x2000029a
 8001f34:	2000029e 	.word	0x2000029e

08001f38 <Interrupt_GetBootTime>:

/* ---------------------------------------------------------------
	マイコン起動時からの経過時間を取得する関数
--------------------------------------------------------------- */
float Interrupt_GetBootTime( void )
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
	return boot_time;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <Interrupt_GetBootTime+0x18>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20000210 	.word	0x20000210

08001f54 <Control_VariableReset>:

/* ---------------------------------------------------------------
	制御系変数のクリア関数
--------------------------------------------------------------- */
void Control_VariableReset( void ){
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

	dist_L_now = 0.0f;
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <Control_VariableReset+0xe0>)
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
	dist_L_last = 0.0f;
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <Control_VariableReset+0xe4>)
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
	dist_R_now = 0.0f;
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <Control_VariableReset+0xe8>)
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
	dist_R_last = 0.0f;
 8001f70:	4b33      	ldr	r3, [pc, #204]	; (8002040 <Control_VariableReset+0xec>)
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
	dist_C_now = 0.0f;
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <Control_VariableReset+0xf0>)
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
	dist_C_last = 0.0f;
 8001f80:	4b31      	ldr	r3, [pc, #196]	; (8002048 <Control_VariableReset+0xf4>)
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

	//accel = ACCEL;
	vel_L = 0.0f;
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <Control_VariableReset+0xf8>)
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
	vel_R = 0.0f;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <Control_VariableReset+0xfc>)
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
	vel_C = 0.0f;
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <Control_VariableReset+0x100>)
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
	omega = 0.0f;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <Control_VariableReset+0x104>)
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
	curvature = 0.0f;
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <Control_VariableReset+0x108>)
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

	//vel_set = 0.0f;
	vel_target = 0.0f;
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <Control_VariableReset+0x10c>)
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
	vel_error_p = 0.0f;
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <Control_VariableReset+0x110>)
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
	vel_error_p_last = 0.0f;
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <Control_VariableReset+0x114>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
	vel_error_i = 0.0f;
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <Control_VariableReset+0x118>)
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
	vel_error_d = 0.0f;
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <Control_VariableReset+0x11c>)
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
	vel_control = 0.0f;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <Control_VariableReset+0x120>)
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

	omega_set = 0.0f;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <Control_VariableReset+0x124>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
	omega_target = 0.0f;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <Control_VariableReset+0x128>)
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
	omega_error_p = 0.0f;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <Control_VariableReset+0x12c>)
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
	omega_error_p_last = 0.0f;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <Control_VariableReset+0x130>)
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
	omega_error_i = 0.0f;
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <Control_VariableReset+0x134>)
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
	omega_error_d = 0.0f;
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <Control_VariableReset+0x138>)
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
	omega_control = 0.0f;
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <Control_VariableReset+0x13c>)
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

	vel_L_target = 0.0f;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <Control_VariableReset+0x140>)
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
	vel_R_target = 0.0f;
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <Control_VariableReset+0x144>)
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000214 	.word	0x20000214
 8002038:	20000218 	.word	0x20000218
 800203c:	2000021c 	.word	0x2000021c
 8002040:	20000220 	.word	0x20000220
 8002044:	20000224 	.word	0x20000224
 8002048:	20000228 	.word	0x20000228
 800204c:	20000230 	.word	0x20000230
 8002050:	20000234 	.word	0x20000234
 8002054:	20000238 	.word	0x20000238
 8002058:	2000023c 	.word	0x2000023c
 800205c:	20000240 	.word	0x20000240
 8002060:	20000248 	.word	0x20000248
 8002064:	2000024c 	.word	0x2000024c
 8002068:	20000250 	.word	0x20000250
 800206c:	20000254 	.word	0x20000254
 8002070:	20000258 	.word	0x20000258
 8002074:	2000025c 	.word	0x2000025c
 8002078:	20000260 	.word	0x20000260
 800207c:	20000264 	.word	0x20000264
 8002080:	20000268 	.word	0x20000268
 8002084:	2000026c 	.word	0x2000026c
 8002088:	20000270 	.word	0x20000270
 800208c:	20000274 	.word	0x20000274
 8002090:	20000278 	.word	0x20000278
 8002094:	2000027c 	.word	0x2000027c
 8002098:	20000280 	.word	0x20000280

0800209c <Servo_Enable>:

/* ---------------------------------------------------------------
	速度制御の設定関数
--------------------------------------------------------------- */
void Servo_Enable( void ) {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0

	Encoder_Reset_Left();
 80020a0:	f000 f9b0 	bl	8002404 <Encoder_Reset_Left>
	Encoder_Reset_Right();
 80020a4:	f000 f9d0 	bl	8002448 <Encoder_Reset_Right>
	Control_VariableReset();
 80020a8:	f7ff ff54 	bl	8001f54 <Control_VariableReset>
	servo_enable_flag = 1;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <Servo_Enable+0x1c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200002a1 	.word	0x200002a1

080020bc <Servo_Disable>:
void Servo_Disable( void ){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	servo_enable_flag = 0;
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <Servo_Disable+0x24>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
	Control_VariableReset();
 80020c6:	f7ff ff45 	bl	8001f54 <Control_VariableReset>
	MOT_STOP_PWM();
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <Servo_Disable+0x28>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <Servo_Disable+0x2c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200002a1 	.word	0x200002a1
 80020e4:	2000165c 	.word	0x2000165c
 80020e8:	2000159c 	.word	0x2000159c

080020ec <Acc_Set>:

/* ---------------------------------------------------------------
	加速度・速度設定の入力関数
--------------------------------------------------------------- */
void Acc_Set( float a ){ accel = a; }
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <Acc_Set+0x1c>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	2000022c 	.word	0x2000022c

0800210c <Vel_Set>:
void Vel_Set( float v ){ vel_set = v; }
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	ed87 0a01 	vstr	s0, [r7, #4]
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <Vel_Set+0x1c>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20000244 	.word	0x20000244

0800212c <Get_Dist>:

/* ---------------------------------------------------------------
	現在距離のリターン関数
--------------------------------------------------------------- */
float Get_Dist(void){ return dist_C_now; }
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <Get_Dist+0x18>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb0 0a67 	vmov.f32	s0, s15
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	20000224 	.word	0x20000224

08002148 <Get_Vel>:

/* ---------------------------------------------------------------
	現在速度のリターン関数
--------------------------------------------------------------- */
float Get_Vel(void){ return vel_C; }
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <Get_Vel+0x18>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000238 	.word	0x20000238

08002164 <Get_LineOut_Flag>:

/* ---------------------------------------------------------------
	ラインアウトフラグのリターン関数
--------------------------------------------------------------- */
uint8_t	Get_LineOut_Flag(void){ return line_out_flag; }
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <Get_LineOut_Flag+0x14>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	200002a4 	.word	0x200002a4

0800217c <Get_MarkerState_L>:

/* ---------------------------------------------------------------
	マーカセンサ状態のリターン関数
--------------------------------------------------------------- */
uint8_t	Get_MarkerState_L(void){ return marker_state_L; }
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <Get_MarkerState_L+0x14>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	200002a2 	.word	0x200002a2

08002194 <Get_MarkerState_R>:
uint8_t	Get_MarkerState_R(void){ return marker_state_R; }
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <Get_MarkerState_R+0x14>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200002a3 	.word	0x200002a3

080021ac <Buzz_Set>:

/* ---------------------------------------------------------------
	ブザーの駆動指令関数
--------------------------------------------------------------- */
void Buzz_Set( uint16_t times, uint16_t ms){
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	80fb      	strh	r3, [r7, #6]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80bb      	strh	r3, [r7, #4]

	buzz_times = times;
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <Buzz_Set+0x28>)
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	8013      	strh	r3, [r2, #0]
	buzz_set_ms = ms;
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <Buzz_Set+0x2c>)
 80021c4:	88bb      	ldrh	r3, [r7, #4]
 80021c6:	8013      	strh	r3, [r2, #0]

}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	2000029c 	.word	0x2000029c
 80021d8:	2000029e 	.word	0x2000029e

080021dc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <MX_DMA_Init+0x88>)
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <MX_DMA_Init+0x88>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6153      	str	r3, [r2, #20]
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <MX_DMA_Init+0x88>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	200b      	movs	r0, #11
 8002200:	f003 fce1 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002204:	200b      	movs	r0, #11
 8002206:	f003 fcfa 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	200c      	movs	r0, #12
 8002210:	f003 fcd9 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002214:	200c      	movs	r0, #12
 8002216:	f003 fcf2 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	200d      	movs	r0, #13
 8002220:	f003 fcd1 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002224:	200d      	movs	r0, #13
 8002226:	f003 fcea 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	200e      	movs	r0, #14
 8002230:	f003 fcc9 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002234:	200e      	movs	r0, #14
 8002236:	f003 fce2 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2102      	movs	r1, #2
 800223e:	2010      	movs	r0, #16
 8002240:	f003 fcc1 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002244:	2010      	movs	r0, #16
 8002246:	f003 fcda 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2102      	movs	r1, #2
 800224e:	2011      	movs	r0, #17
 8002250:	f003 fcb9 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002254:	2011      	movs	r0, #17
 8002256:	f003 fcd2 	bl	8005bfe <HAL_NVIC_EnableIRQ>

}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <Encoder_GetDist_Left>:

/* ---------------------------------------------------------------
	左タイヤの走行距離を取得する関数[rad]
--------------------------------------------------------------- */
float Encoder_GetDist_Left( void )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	cnt_now_L = ENC_CNT_L;
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <Encoder_GetDist_Left+0xa8>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	b29a      	uxth	r2, r3
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <Encoder_GetDist_Left+0xac>)
 8002274:	801a      	strh	r2, [r3, #0]
	diff_cnt_L = (int16_t)(cnt_now_L - cnt_last_L);
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <Encoder_GetDist_Left+0xac>)
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <Encoder_GetDist_Left+0xb0>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	b29b      	uxth	r3, r3
 8002282:	b21a      	sxth	r2, r3
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <Encoder_GetDist_Left+0xb4>)
 8002286:	801a      	strh	r2, [r3, #0]
	cnt_last_L = cnt_now_L;
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <Encoder_GetDist_Left+0xac>)
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <Encoder_GetDist_Left+0xb0>)
 800228e:	801a      	strh	r2, [r3, #0]
	angle_L += (2 * PI * (float)(diff_cnt_L) / (float)ENC_RESOLUTION);
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <Encoder_GetDist_Left+0xb4>)
 8002292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002320 <Encoder_GetDist_Left+0xb8>
 80022a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002324 <Encoder_GetDist_Left+0xbc>
 80022aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <Encoder_GetDist_Left+0xc0>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <Encoder_GetDist_Left+0xc0>)
 80022ba:	edc3 7a00 	vstr	s15, [r3]

	return(TIRE_DIAMETER * PI* ( RAD2DEG(angle_L) / 360.0f));
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <Encoder_GetDist_Left+0xc0>)
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800232c <Encoder_GetDist_Left+0xc4>
 80022c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022cc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002330 <Encoder_GetDist_Left+0xc8>
 80022d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002334 <Encoder_GetDist_Left+0xcc>
 80022d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022dc:	ee16 0a90 	vmov	r0, s13
 80022e0:	f7fe f932 	bl	8000548 <__aeabi_f2d>
 80022e4:	a308      	add	r3, pc, #32	; (adr r3, 8002308 <Encoder_GetDist_Left+0xa0>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f985 	bl	80005f8 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7fe fc77 	bl	8000be8 <__aeabi_d2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	ee07 3a90 	vmov	s15, r3
}
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	42c3c9ef 	.word	0x42c3c9ef
 800230c:	3fb0ba75 	.word	0x3fb0ba75
 8002310:	40012c00 	.word	0x40012c00
 8002314:	200002a6 	.word	0x200002a6
 8002318:	200002a8 	.word	0x200002a8
 800231c:	200002aa 	.word	0x200002aa
 8002320:	40c90fda 	.word	0x40c90fda
 8002324:	440c0000 	.word	0x440c0000
 8002328:	200002b4 	.word	0x200002b4
 800232c:	40490fda 	.word	0x40490fda
 8002330:	43340000 	.word	0x43340000
 8002334:	43b40000 	.word	0x43b40000

08002338 <Encoder_GetDist_Right>:

/* ---------------------------------------------------------------
	右タイヤの走行距離を取得する関数[m]
--------------------------------------------------------------- */
float Encoder_GetDist_Right( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	cnt_now_R = ENC_CNT_R;
 800233c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <Encoder_GetDist_Right+0xa8>)
 8002346:	801a      	strh	r2, [r3, #0]
	diff_cnt_R = (int16_t)(cnt_now_R - cnt_last_R);
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <Encoder_GetDist_Right+0xa8>)
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <Encoder_GetDist_Right+0xac>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	b29b      	uxth	r3, r3
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <Encoder_GetDist_Right+0xb0>)
 8002358:	801a      	strh	r2, [r3, #0]
	cnt_last_R = cnt_now_R;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <Encoder_GetDist_Right+0xa8>)
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <Encoder_GetDist_Right+0xac>)
 8002360:	801a      	strh	r2, [r3, #0]
	angle_R += (2 * PI * (float)(diff_cnt_R) / (float)ENC_RESOLUTION);
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <Encoder_GetDist_Right+0xb0>)
 8002364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002370:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80023ec <Encoder_GetDist_Right+0xb4>
 8002374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002378:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80023f0 <Encoder_GetDist_Right+0xb8>
 800237c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <Encoder_GetDist_Right+0xbc>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <Encoder_GetDist_Right+0xbc>)
 800238c:	edc3 7a00 	vstr	s15, [r3]

	return(TIRE_DIAMETER * PI* ( RAD2DEG(angle_R) / 360.0f));
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <Encoder_GetDist_Right+0xbc>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	eddf 6a18 	vldr	s13, [pc, #96]	; 80023f8 <Encoder_GetDist_Right+0xc0>
 800239a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800239e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80023fc <Encoder_GetDist_Right+0xc4>
 80023a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002400 <Encoder_GetDist_Right+0xc8>
 80023aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023ae:	ee16 0a90 	vmov	r0, s13
 80023b2:	f7fe f8c9 	bl	8000548 <__aeabi_f2d>
 80023b6:	a308      	add	r3, pc, #32	; (adr r3, 80023d8 <Encoder_GetDist_Right+0xa0>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe f91c 	bl	80005f8 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fc0e 	bl	8000be8 <__aeabi_d2f>
 80023cc:	4603      	mov	r3, r0
 80023ce:	ee07 3a90 	vmov	s15, r3
}
 80023d2:	eeb0 0a67 	vmov.f32	s0, s15
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	42c3c9ef 	.word	0x42c3c9ef
 80023dc:	3fb0ba75 	.word	0x3fb0ba75
 80023e0:	200002ac 	.word	0x200002ac
 80023e4:	200002ae 	.word	0x200002ae
 80023e8:	200002b0 	.word	0x200002b0
 80023ec:	40c90fda 	.word	0x40c90fda
 80023f0:	440c0000 	.word	0x440c0000
 80023f4:	200002b8 	.word	0x200002b8
 80023f8:	40490fda 	.word	0x40490fda
 80023fc:	43340000 	.word	0x43340000
 8002400:	43b40000 	.word	0x43b40000

08002404 <Encoder_Reset_Left>:

/* ---------------------------------------------------------------
	左エンコーダをリセットするする関数
--------------------------------------------------------------- */
void Encoder_Reset_Left( void )
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <Encoder_Reset_Left+0x30>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
	cnt_now_L = 0;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <Encoder_Reset_Left+0x34>)
 8002412:	2200      	movs	r2, #0
 8002414:	801a      	strh	r2, [r3, #0]
	cnt_last_L = 0;
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <Encoder_Reset_Left+0x38>)
 8002418:	2200      	movs	r2, #0
 800241a:	801a      	strh	r2, [r3, #0]
	diff_cnt_L = 0;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <Encoder_Reset_Left+0x3c>)
 800241e:	2200      	movs	r2, #0
 8002420:	801a      	strh	r2, [r3, #0]
	angle_L = 0.0f;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <Encoder_Reset_Left+0x40>)
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	200015dc 	.word	0x200015dc
 8002438:	200002a6 	.word	0x200002a6
 800243c:	200002a8 	.word	0x200002a8
 8002440:	200002aa 	.word	0x200002aa
 8002444:	200002b4 	.word	0x200002b4

08002448 <Encoder_Reset_Right>:

/* ---------------------------------------------------------------
	右エンコーダをリセットするする関数
--------------------------------------------------------------- */
void Encoder_Reset_Right( void )
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <Encoder_Reset_Right+0x30>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
	cnt_now_R = 0;
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <Encoder_Reset_Right+0x34>)
 8002456:	2200      	movs	r2, #0
 8002458:	801a      	strh	r2, [r3, #0]
	cnt_last_R = 0;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <Encoder_Reset_Right+0x38>)
 800245c:	2200      	movs	r2, #0
 800245e:	801a      	strh	r2, [r3, #0]
	diff_cnt_R = 0;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <Encoder_Reset_Right+0x3c>)
 8002462:	2200      	movs	r2, #0
 8002464:	801a      	strh	r2, [r3, #0]
	angle_R = 0.0f;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <Encoder_Reset_Right+0x40>)
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	2000161c 	.word	0x2000161c
 800247c:	200002ac 	.word	0x200002ac
 8002480:	200002ae 	.word	0x200002ae
 8002484:	200002b0 	.word	0x200002b0
 8002488:	200002b8 	.word	0x200002b8

0800248c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ac:	6153      	str	r3, [r2, #20]
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	4a28      	ldr	r2, [pc, #160]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	6153      	str	r3, [r2, #20]
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6153      	str	r3, [r2, #20]
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <MX_GPIO_Init+0xd4>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MT_L_DIR_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f4:	f003 ff42 	bl	800637c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|MT_R_DIR_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2118      	movs	r1, #24
 80024fc:	4819      	ldr	r0, [pc, #100]	; (8002564 <MX_GPIO_Init+0xd8>)
 80024fe:	f003 ff3d 	bl	800637c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002502:	2303      	movs	r3, #3
 8002504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4619      	mov	r1, r3
 8002514:	4814      	ldr	r0, [pc, #80]	; (8002568 <MX_GPIO_Init+0xdc>)
 8002516:	f003 fda7 	bl	8006068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MT_L_DIR_Pin|BUZZ_Pin;
 800251a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800251e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	4619      	mov	r1, r3
 8002532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002536:	f003 fd97 	bl	8006068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|MT_R_DIR_Pin;
 800253a:	2318      	movs	r3, #24
 800253c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	4619      	mov	r1, r3
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <MX_GPIO_Init+0xd8>)
 8002552:	f003 fd89 	bl	8006068 <HAL_GPIO_Init>

}
 8002556:	bf00      	nop
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	48000400 	.word	0x48000400
 8002568:	48001400 	.word	0x48001400

0800256c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <MX_I2C1_Init+0x78>)
 8002574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002578:	f240 220b 	movw	r2, #523	; 0x20b
 800257c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002586:	2201      	movs	r2, #1
 8002588:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <MX_I2C1_Init+0x74>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <MX_I2C1_Init+0x74>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025aa:	f003 ff19 	bl	80063e0 <HAL_I2C_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025b4:	f000 faf9 	bl	8002baa <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025b8:	2100      	movs	r1, #0
 80025ba:	4809      	ldr	r0, [pc, #36]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025bc:	f003 ffb9 	bl	8006532 <HAL_I2CEx_ConfigAnalogFilter>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80025c6:	f000 faf0 	bl	8002baa <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025ca:	2100      	movs	r1, #0
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025ce:	f003 fffb 	bl	80065c8 <HAL_I2CEx_ConfigDigitalFilter>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80025d8:	f000 fae7 	bl	8002baa <Error_Handler>
  }

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000056c 	.word	0x2000056c
 80025e4:	40005400 	.word	0x40005400

080025e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a47      	ldr	r2, [pc, #284]	; (8002724 <HAL_I2C_MspInit+0x13c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	f040 8088 	bne.w	800271c <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260c:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_I2C_MspInit+0x140>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4a45      	ldr	r2, [pc, #276]	; (8002728 <HAL_I2C_MspInit+0x140>)
 8002612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002616:	6153      	str	r3, [r2, #20]
 8002618:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_I2C_MspInit+0x140>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002624:	23c0      	movs	r3, #192	; 0xc0
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002628:	2312      	movs	r3, #18
 800262a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262c:	2301      	movs	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002634:	2304      	movs	r3, #4
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	483b      	ldr	r0, [pc, #236]	; (800272c <HAL_I2C_MspInit+0x144>)
 8002640:	f003 fd12 	bl	8006068 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002644:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_I2C_MspInit+0x140>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4a37      	ldr	r2, [pc, #220]	; (8002728 <HAL_I2C_MspInit+0x140>)
 800264a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264e:	61d3      	str	r3, [r2, #28]
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <HAL_I2C_MspInit+0x140>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800265c:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_I2C_MspInit+0x148>)
 800265e:	4a35      	ldr	r2, [pc, #212]	; (8002734 <HAL_I2C_MspInit+0x14c>)
 8002660:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_I2C_MspInit+0x148>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_I2C_MspInit+0x148>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_I2C_MspInit+0x148>)
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_I2C_MspInit+0x148>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_I2C_MspInit+0x148>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002680:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <HAL_I2C_MspInit+0x148>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_I2C_MspInit+0x148>)
 8002688:	2200      	movs	r2, #0
 800268a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800268c:	4828      	ldr	r0, [pc, #160]	; (8002730 <HAL_I2C_MspInit+0x148>)
 800268e:	f003 fad0 	bl	8005c32 <HAL_DMA_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 8002698:	f000 fa87 	bl	8002baa <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_RX_DMA1_CH3);
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_I2C_MspInit+0x150>)
 800269e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <HAL_I2C_MspInit+0x150>)
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_I2C_MspInit+0x148>)
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_I2C_MspInit+0x148>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_I2C_MspInit+0x158>)
 80026b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026bc:	2210      	movs	r2, #16
 80026be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80026e4:	4815      	ldr	r0, [pc, #84]	; (800273c <HAL_I2C_MspInit+0x154>)
 80026e6:	f003 faa4 	bl	8005c32 <HAL_DMA_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80026f0:	f000 fa5b 	bl	8002baa <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH4);
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_I2C_MspInit+0x150>)
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_I2C_MspInit+0x150>)
 80026fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fe:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_I2C_MspInit+0x154>)
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
 8002706:	4a0d      	ldr	r2, [pc, #52]	; (800273c <HAL_I2C_MspInit+0x154>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	201f      	movs	r0, #31
 8002712:	f003 fa58 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002716:	201f      	movs	r0, #31
 8002718:	f003 fa71 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40005400 	.word	0x40005400
 8002728:	40021000 	.word	0x40021000
 800272c:	48000400 	.word	0x48000400
 8002730:	200005b8 	.word	0x200005b8
 8002734:	40020030 	.word	0x40020030
 8002738:	40010000 	.word	0x40010000
 800273c:	20000528 	.word	0x20000528
 8002740:	40020044 	.word	0x40020044

08002744 <Line_Tracer>:

/* ---------------------------------------------------------------
	ライントレースロボットとしての関数軍
--------------------------------------------------------------- */
void Line_Tracer( void )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0

	uint8_t vel_sellct = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	71fb      	strb	r3, [r7, #7]

	while (1) {

		//モードインクリメント処理
		if(SW1_ONOFF() == SW_ON){
 800274e:	2101      	movs	r1, #1
 8002750:	4867      	ldr	r0, [pc, #412]	; (80028f0 <Line_Tracer+0x1ac>)
 8002752:	f003 fdfb 	bl	800634c <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d114      	bne.n	8002786 <Line_Tracer+0x42>
			HAL_Delay(50);					//チャタリング回避
 800275c:	2032      	movs	r0, #50	; 0x32
 800275e:	f002 f9fd 	bl	8004b5c <HAL_Delay>
			while(SW1_ONOFF() == SW_ON);	//スイッチが離されるまで待つ
 8002762:	bf00      	nop
 8002764:	2101      	movs	r1, #1
 8002766:	4862      	ldr	r0, [pc, #392]	; (80028f0 <Line_Tracer+0x1ac>)
 8002768:	f003 fdf0 	bl	800634c <HAL_GPIO_ReadPin>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f8      	beq.n	8002764 <Line_Tracer+0x20>
			Buzz_Set(1,50);
 8002772:	2132      	movs	r1, #50	; 0x32
 8002774:	2001      	movs	r0, #1
 8002776:	f7ff fd19 	bl	80021ac <Buzz_Set>
			HAL_Delay(50);					//チャタリング回避
 800277a:	2032      	movs	r0, #50	; 0x32
 800277c:	f002 f9ee 	bl	8004b5c <HAL_Delay>
			++vel_sellct;
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	3301      	adds	r3, #1
 8002784:	71fb      	strb	r3, [r7, #7]
		}
		if(SW2_ONOFF() == SW_ON ){
 8002786:	2102      	movs	r1, #2
 8002788:	4859      	ldr	r0, [pc, #356]	; (80028f0 <Line_Tracer+0x1ac>)
 800278a:	f003 fddf 	bl	800634c <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d12f      	bne.n	80027f4 <Line_Tracer+0xb0>
			HAL_Delay(50);					//チャタリング回避
 8002794:	2032      	movs	r0, #50	; 0x32
 8002796:	f002 f9e1 	bl	8004b5c <HAL_Delay>
			while(SW2_ONOFF() == SW_ON);	//スイッチが離されるまで待つ
 800279a:	bf00      	nop
 800279c:	2102      	movs	r1, #2
 800279e:	4854      	ldr	r0, [pc, #336]	; (80028f0 <Line_Tracer+0x1ac>)
 80027a0:	f003 fdd4 	bl	800634c <HAL_GPIO_ReadPin>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f8      	beq.n	800279c <Line_Tracer+0x58>
			Buzz_Set(2,50);
 80027aa:	2132      	movs	r1, #50	; 0x32
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7ff fcfd 	bl	80021ac <Buzz_Set>
			HAL_Delay(50);					//チャタリング回避
 80027b2:	2032      	movs	r0, #50	; 0x32
 80027b4:	f002 f9d2 	bl	8004b5c <HAL_Delay>
			break;
 80027b8:	bf00      	nop
		printf("%c[%dA", 0x1b, 1);

	}

	//加速度・速度設定
	switch( vel_sellct ) {
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b0a      	cmp	r3, #10
 80027be:	f200 8090 	bhi.w	80028e2 <Line_Tracer+0x19e>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <Line_Tracer+0x84>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	0800281d 	.word	0x0800281d
 80027cc:	0800282f 	.word	0x0800282f
 80027d0:	08002841 	.word	0x08002841
 80027d4:	08002853 	.word	0x08002853
 80027d8:	08002865 	.word	0x08002865
 80027dc:	08002877 	.word	0x08002877
 80027e0:	08002889 	.word	0x08002889
 80027e4:	0800289b 	.word	0x0800289b
 80027e8:	080028ad 	.word	0x080028ad
 80027ec:	080028bf 	.word	0x080028bf
 80027f0:	080028d1 	.word	0x080028d1
		if(vel_sellct > 10){vel_sellct = 0;}
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b0a      	cmp	r3, #10
 80027f8:	d901      	bls.n	80027fe <Line_Tracer+0xba>
 80027fa:	2300      	movs	r3, #0
 80027fc:	71fb      	strb	r3, [r7, #7]
		printf("<vel_sellct> vel_sellct: 0.%d[m/s] \r\n", vel_sellct);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4619      	mov	r1, r3
 8002802:	483c      	ldr	r0, [pc, #240]	; (80028f4 <Line_Tracer+0x1b0>)
 8002804:	f008 f95e 	bl	800aac4 <iprintf>
		printf("%c[0J", 0x1b);
 8002808:	211b      	movs	r1, #27
 800280a:	483b      	ldr	r0, [pc, #236]	; (80028f8 <Line_Tracer+0x1b4>)
 800280c:	f008 f95a 	bl	800aac4 <iprintf>
		printf("%c[%dA", 0x1b, 1);
 8002810:	2201      	movs	r2, #1
 8002812:	211b      	movs	r1, #27
 8002814:	4839      	ldr	r0, [pc, #228]	; (80028fc <Line_Tracer+0x1b8>)
 8002816:	f008 f955 	bl	800aac4 <iprintf>
		if(SW1_ONOFF() == SW_ON){
 800281a:	e798      	b.n	800274e <Line_Tracer+0xa>
		case 0: Vel_Set(0.0f);	Acc_Set( ACCEL );	break;
 800281c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002900 <Line_Tracer+0x1bc>
 8002820:	f7ff fc74 	bl	800210c <Vel_Set>
 8002824:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002828:	f7ff fc60 	bl	80020ec <Acc_Set>
 800282c:	e059      	b.n	80028e2 <Line_Tracer+0x19e>
		case 1: Vel_Set(0.1f);	Acc_Set( ACCEL );	break;
 800282e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002904 <Line_Tracer+0x1c0>
 8002832:	f7ff fc6b 	bl	800210c <Vel_Set>
 8002836:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800283a:	f7ff fc57 	bl	80020ec <Acc_Set>
 800283e:	e050      	b.n	80028e2 <Line_Tracer+0x19e>
		case 2: Vel_Set(0.2f);	Acc_Set( ACCEL );	break;
 8002840:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8002908 <Line_Tracer+0x1c4>
 8002844:	f7ff fc62 	bl	800210c <Vel_Set>
 8002848:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800284c:	f7ff fc4e 	bl	80020ec <Acc_Set>
 8002850:	e047      	b.n	80028e2 <Line_Tracer+0x19e>
		case 3: Vel_Set(0.3f);	Acc_Set( ACCEL );	break;
 8002852:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800290c <Line_Tracer+0x1c8>
 8002856:	f7ff fc59 	bl	800210c <Vel_Set>
 800285a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800285e:	f7ff fc45 	bl	80020ec <Acc_Set>
 8002862:	e03e      	b.n	80028e2 <Line_Tracer+0x19e>
		case 4: Vel_Set(0.4f);	Acc_Set( ACCEL );	break;
 8002864:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8002910 <Line_Tracer+0x1cc>
 8002868:	f7ff fc50 	bl	800210c <Vel_Set>
 800286c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002870:	f7ff fc3c 	bl	80020ec <Acc_Set>
 8002874:	e035      	b.n	80028e2 <Line_Tracer+0x19e>
		case 5: Vel_Set(0.5f);	Acc_Set( ACCEL );	break;
 8002876:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800287a:	f7ff fc47 	bl	800210c <Vel_Set>
 800287e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002882:	f7ff fc33 	bl	80020ec <Acc_Set>
 8002886:	e02c      	b.n	80028e2 <Line_Tracer+0x19e>
		case 6: Vel_Set(0.6f);	Acc_Set( ACCEL );	break;
 8002888:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002914 <Line_Tracer+0x1d0>
 800288c:	f7ff fc3e 	bl	800210c <Vel_Set>
 8002890:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002894:	f7ff fc2a 	bl	80020ec <Acc_Set>
 8002898:	e023      	b.n	80028e2 <Line_Tracer+0x19e>
		case 7: Vel_Set(0.7f);	Acc_Set( ACCEL );	break;
 800289a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002918 <Line_Tracer+0x1d4>
 800289e:	f7ff fc35 	bl	800210c <Vel_Set>
 80028a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80028a6:	f7ff fc21 	bl	80020ec <Acc_Set>
 80028aa:	e01a      	b.n	80028e2 <Line_Tracer+0x19e>
		case 8: Vel_Set(0.8f);	Acc_Set( ACCEL );	break;
 80028ac:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800291c <Line_Tracer+0x1d8>
 80028b0:	f7ff fc2c 	bl	800210c <Vel_Set>
 80028b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80028b8:	f7ff fc18 	bl	80020ec <Acc_Set>
 80028bc:	e011      	b.n	80028e2 <Line_Tracer+0x19e>
		case 9: Vel_Set(0.9f);	Acc_Set( ACCEL );	break;
 80028be:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002920 <Line_Tracer+0x1dc>
 80028c2:	f7ff fc23 	bl	800210c <Vel_Set>
 80028c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80028ca:	f7ff fc0f 	bl	80020ec <Acc_Set>
 80028ce:	e008      	b.n	80028e2 <Line_Tracer+0x19e>
		case 10: Vel_Set(1.0f);	Acc_Set( ACCEL );	break;
 80028d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80028d4:	f7ff fc1a 	bl	800210c <Vel_Set>
 80028d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80028dc:	f7ff fc06 	bl	80020ec <Acc_Set>
 80028e0:	bf00      	nop
		case 8: Vel_Set(1.6f);	Acc_Set( ACCEL );	break;
	}
*/

	//ライントレース開始
	Servo_Enable();
 80028e2:	f7ff fbdb 	bl	800209c <Servo_Enable>
	while(1){

		//電源監視
		Battery_LimiterVoltage();
 80028e6:	f7fe fc29 	bl	800113c <Battery_LimiterVoltage>

		//ラインアウト監視
		LineOut_Cheker();
 80028ea:	f000 f81b 	bl	8002924 <LineOut_Cheker>
		Battery_LimiterVoltage();
 80028ee:	e7fa      	b.n	80028e6 <Line_Tracer+0x1a2>
 80028f0:	48001400 	.word	0x48001400
 80028f4:	0800e338 	.word	0x0800e338
 80028f8:	0800e360 	.word	0x0800e360
 80028fc:	0800e368 	.word	0x0800e368
 8002900:	00000000 	.word	0x00000000
 8002904:	3dcccccd 	.word	0x3dcccccd
 8002908:	3e4ccccd 	.word	0x3e4ccccd
 800290c:	3e99999a 	.word	0x3e99999a
 8002910:	3ecccccd 	.word	0x3ecccccd
 8002914:	3f19999a 	.word	0x3f19999a
 8002918:	3f333333 	.word	0x3f333333
 800291c:	3f4ccccd 	.word	0x3f4ccccd
 8002920:	3f666666 	.word	0x3f666666

08002924 <LineOut_Cheker>:

/* ---------------------------------------------------------------
	ラインアウトの監視関数
--------------------------------------------------------------- */
void LineOut_Cheker( void )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
	volatile uint8_t 	i;
	volatile uint8_t	line_out_cnt = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	71bb      	strb	r3, [r7, #6]

	for( i = 0; i < 10; i++) {
 800292e:	2300      	movs	r3, #0
 8002930:	71fb      	strb	r3, [r7, #7]
 8002932:	e010      	b.n	8002956 <LineOut_Cheker+0x32>
		HAL_Delay(10);
 8002934:	200a      	movs	r0, #10
 8002936:	f002 f911 	bl	8004b5c <HAL_Delay>
		line_out_cnt += Get_LineOut_Flag();
 800293a:	f7ff fc13 	bl	8002164 <Get_LineOut_Flag>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4413      	add	r3, r2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	71bb      	strb	r3, [r7, #6]
	for( i = 0; i < 10; i++) {
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	71fb      	strb	r3, [r7, #7]
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b09      	cmp	r3, #9
 800295c:	d9ea      	bls.n	8002934 <LineOut_Cheker+0x10>
	}

	if( line_out_cnt >= 10 ) {
 800295e:	79bb      	ldrb	r3, [r7, #6]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b09      	cmp	r3, #9
 8002964:	d912      	bls.n	800298c <LineOut_Cheker+0x68>
		Vel_Set(0.0f);
 8002966:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002998 <LineOut_Cheker+0x74>
 800296a:	f7ff fbcf 	bl	800210c <Vel_Set>
		HAL_Delay(1000);
 800296e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002972:	f002 f8f3 	bl	8004b5c <HAL_Delay>
		Servo_Disable();
 8002976:	f7ff fba1 	bl	80020bc <Servo_Disable>
		while( 1 ) {
			LED_TOGGLE();
 800297a:	2108      	movs	r1, #8
 800297c:	4807      	ldr	r0, [pc, #28]	; (800299c <LineOut_Cheker+0x78>)
 800297e:	f003 fd15 	bl	80063ac <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8002982:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002986:	f002 f8e9 	bl	8004b5c <HAL_Delay>
			LED_TOGGLE();
 800298a:	e7f6      	b.n	800297a <LineOut_Cheker+0x56>
		}
	}
	else{ line_out_cnt = 0; }
 800298c:	2300      	movs	r3, #0
 800298e:	71bb      	strb	r3, [r7, #6]
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	00000000 	.word	0x00000000
 800299c:	48000400 	.word	0x48000400

080029a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029a6:	f002 f873 	bl	8004a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029aa:	f000 f8a3 	bl	8002af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029ae:	f7ff fd6d 	bl	800248c <MX_GPIO_Init>
  MX_DMA_Init();
 80029b2:	f7ff fc13 	bl	80021dc <MX_DMA_Init>
  MX_ADC1_Init();
 80029b6:	f7fe f99d 	bl	8000cf4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80029ba:	f7fe fa27 	bl	8000e0c <MX_ADC2_Init>
  MX_TIM1_Init();
 80029be:	f001 fcbf 	bl	8004340 <MX_TIM1_Init>
  MX_TIM2_Init();
 80029c2:	f001 fd17 	bl	80043f4 <MX_TIM2_Init>
  MX_TIM17_Init();
 80029c6:	f001 fde3 	bl	8004590 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80029ca:	f001 ff5f 	bl	800488c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80029ce:	f7ff fdcd 	bl	800256c <MX_I2C1_Init>
  MX_TIM16_Init();
 80029d2:	f001 fd63 	bl	800449c <MX_TIM16_Init>

  /* USER CODE BEGIN 2 */
  LED_ON();							// LED点灯
 80029d6:	2201      	movs	r2, #1
 80029d8:	2108      	movs	r1, #8
 80029da:	483d      	ldr	r0, [pc, #244]	; (8002ad0 <main+0x130>)
 80029dc:	f003 fcce 	bl	800637c <HAL_GPIO_WritePin>
  MOT_INIT();						// モータ用タイマ�?�初期設定関数
 80029e0:	2100      	movs	r1, #0
 80029e2:	483c      	ldr	r0, [pc, #240]	; (8002ad4 <main+0x134>)
 80029e4:	f005 f900 	bl	8007be8 <HAL_TIM_PWM_Start>
 80029e8:	2100      	movs	r1, #0
 80029ea:	483b      	ldr	r0, [pc, #236]	; (8002ad8 <main+0x138>)
 80029ec:	f005 f8fc 	bl	8007be8 <HAL_TIM_PWM_Start>
  ENC_INIT();						// エンコー�?ー用タイマ�?�初期設定関数
 80029f0:	213c      	movs	r1, #60	; 0x3c
 80029f2:	483a      	ldr	r0, [pc, #232]	; (8002adc <main+0x13c>)
 80029f4:	f005 f9dc 	bl	8007db0 <HAL_TIM_Encoder_Start>
 80029f8:	213c      	movs	r1, #60	; 0x3c
 80029fa:	4839      	ldr	r0, [pc, #228]	; (8002ae0 <main+0x140>)
 80029fc:	f005 f9d8 	bl	8007db0 <HAL_TIM_Encoder_Start>

  Communicate_Initialize();			// ターミナルとの通信初期設定関数
 8002a00:	f7fe fd02 	bl	8001408 <Communicate_Initialize>
  Sensor_Initialize();				// ラインセンサ用AD変換の初期設定関数
 8002a04:	f001 faca 	bl	8003f9c <Sensor_Initialize>
  Battery_LimiterVoltage();			// 起動時のバッ�?リの電圧監�?
 8002a08:	f7fe fb98 	bl	800113c <Battery_LimiterVoltage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t mode_sellct = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  while (1) {

	  //モードインクリメント�?��?
	  if(SW1_ONOFF() == SW_ON){
 8002a10:	2101      	movs	r1, #1
 8002a12:	4834      	ldr	r0, [pc, #208]	; (8002ae4 <main+0x144>)
 8002a14:	f003 fc9a 	bl	800634c <HAL_GPIO_ReadPin>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d114      	bne.n	8002a48 <main+0xa8>
		HAL_Delay(50);					//チャタリング回避
 8002a1e:	2032      	movs	r0, #50	; 0x32
 8002a20:	f002 f89c 	bl	8004b5c <HAL_Delay>
		while(SW1_ONOFF() == SW_ON);	//スイ�?チが離されるまで�?つ
 8002a24:	bf00      	nop
 8002a26:	2101      	movs	r1, #1
 8002a28:	482e      	ldr	r0, [pc, #184]	; (8002ae4 <main+0x144>)
 8002a2a:	f003 fc8f 	bl	800634c <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f8      	beq.n	8002a26 <main+0x86>
		Buzz_Set(1,50);
 8002a34:	2132      	movs	r1, #50	; 0x32
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff fbb8 	bl	80021ac <Buzz_Set>
		HAL_Delay(50);					//チャタリング回避
 8002a3c:	2032      	movs	r0, #50	; 0x32
 8002a3e:	f002 f88d 	bl	8004b5c <HAL_Delay>
		++mode_sellct;
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	3301      	adds	r3, #1
 8002a46:	71fb      	strb	r3, [r7, #7]
	  }
	  if(SW2_ONOFF() == SW_ON ){
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4826      	ldr	r0, [pc, #152]	; (8002ae4 <main+0x144>)
 8002a4c:	f003 fc7e 	bl	800634c <HAL_GPIO_ReadPin>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <main+0xe4>
		HAL_Delay(50);					//チャタリング回避
 8002a56:	2032      	movs	r0, #50	; 0x32
 8002a58:	f002 f880 	bl	8004b5c <HAL_Delay>
		while(SW2_ONOFF() == SW_ON);	//スイ�?チが離されるまで�?つ
 8002a5c:	bf00      	nop
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4820      	ldr	r0, [pc, #128]	; (8002ae4 <main+0x144>)
 8002a62:	f003 fc73 	bl	800634c <HAL_GPIO_ReadPin>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f8      	beq.n	8002a5e <main+0xbe>
		Buzz_Set(2,50);
 8002a6c:	2132      	movs	r1, #50	; 0x32
 8002a6e:	2002      	movs	r0, #2
 8002a70:	f7ff fb9c 	bl	80021ac <Buzz_Set>
		HAL_Delay(50);					//チャタリング回避
 8002a74:	2032      	movs	r0, #50	; 0x32
 8002a76:	f002 f871 	bl	8004b5c <HAL_Delay>
		break;
 8002a7a:	bf00      	nop
	  printf("%c[0J", 0x1b);
	  printf("%c[%dA", 0x1b, 1);

  }

  switch( mode_sellct ) {
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d021      	beq.n	8002ac6 <main+0x126>
 8002a82:	e013      	b.n	8002aac <main+0x10c>
	  if(mode_sellct > 2){mode_sellct = 0;}
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <main+0xee>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	71fb      	strb	r3, [r7, #7]
	  printf("<Mode_sellect> Mode: %d \r\n", mode_sellct);
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	4619      	mov	r1, r3
 8002a92:	4815      	ldr	r0, [pc, #84]	; (8002ae8 <main+0x148>)
 8002a94:	f008 f816 	bl	800aac4 <iprintf>
	  printf("%c[0J", 0x1b);
 8002a98:	211b      	movs	r1, #27
 8002a9a:	4814      	ldr	r0, [pc, #80]	; (8002aec <main+0x14c>)
 8002a9c:	f008 f812 	bl	800aac4 <iprintf>
	  printf("%c[%dA", 0x1b, 1);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	211b      	movs	r1, #27
 8002aa4:	4812      	ldr	r0, [pc, #72]	; (8002af0 <main+0x150>)
 8002aa6:	f008 f80d 	bl	800aac4 <iprintf>
	  if(SW1_ONOFF() == SW_ON){
 8002aaa:	e7b1      	b.n	8002a10 <main+0x70>
  switch( mode_sellct ) {
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	dc0d      	bgt.n	8002acc <main+0x12c>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <main+0x11a>
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d003      	beq.n	8002ac0 <main+0x120>
 8002ab8:	e008      	b.n	8002acc <main+0x12c>
  	  case 0: Robo_Tracer();	break;
 8002aba:	f000 fb5f 	bl	800317c <Robo_Tracer>
 8002abe:	e005      	b.n	8002acc <main+0x12c>
  	  case 1: Line_Tracer();	break;
 8002ac0:	f7ff fe40 	bl	8002744 <Line_Tracer>
 8002ac4:	e002      	b.n	8002acc <main+0x12c>
  	  case 2: Module_Test();	break;
 8002ac6:	f000 f877 	bl	8002bb8 <Module_Test>
 8002aca:	bf00      	nop

  }

  while (1)
 8002acc:	e7fe      	b.n	8002acc <main+0x12c>
 8002ace:	bf00      	nop
 8002ad0:	48000400 	.word	0x48000400
 8002ad4:	2000165c 	.word	0x2000165c
 8002ad8:	2000159c 	.word	0x2000159c
 8002adc:	200015dc 	.word	0x200015dc
 8002ae0:	2000161c 	.word	0x2000161c
 8002ae4:	48001400 	.word	0x48001400
 8002ae8:	0800e370 	.word	0x0800e370
 8002aec:	0800e38c 	.word	0x0800e38c
 8002af0:	0800e394 	.word	0x0800e394

08002af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b096      	sub	sp, #88	; 0x58
 8002af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002afe:	2228      	movs	r2, #40	; 0x28
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f007 f8b1 	bl	8009c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b30:	2310      	movs	r3, #16
 8002b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b34:	2302      	movs	r3, #2
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002b3c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002b40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fd8a 	bl	8006660 <HAL_RCC_OscConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002b52:	f000 f82a 	bl	8002baa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b56:	230f      	movs	r3, #15
 8002b58:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	2102      	movs	r1, #2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fc7c 	bl	8007470 <HAL_RCC_ClockConfig>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002b7e:	f000 f814 	bl	8002baa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8002b82:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002b86:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 fea2 	bl	80078dc <HAL_RCCEx_PeriphCLKConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002b9e:	f000 f804 	bl	8002baa <Error_Handler>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3758      	adds	r7, #88	; 0x58
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <Module_Test>:

/* ---------------------------------------------------------------
	各機能の動作確認用関数
--------------------------------------------------------------- */
void Module_Test( void )
{
 8002bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af04      	add	r7, sp, #16
	uint16_t	line 	  = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	80fb      	strh	r3, [r7, #6]
	uint8_t		key;
	int16_t		duty_l	  = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	80bb      	strh	r3, [r7, #4]
	int16_t		duty_r	  = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	807b      	strh	r3, [r7, #2]

	// DMAを一時的に停止
	HAL_DMA_Abort(huart2.hdmarx);
 8002bcc:	4bce      	ldr	r3, [pc, #824]	; (8002f08 <Module_Test+0x350>)
 8002bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 f8d4 	bl	8005d7e <HAL_DMA_Abort>

	// エンコーダのカウントをリセット
	Encoder_Reset_Left();
 8002bd6:	f7ff fc15 	bl	8002404 <Encoder_Reset_Left>
	Encoder_Reset_Right();
 8002bda:	f7ff fc35 	bl	8002448 <Encoder_Reset_Right>

	while(1) {

		// ブートからの時間を表示
		printf("<Boot Time> %8.3f[s]\r\n", Interrupt_GetBootTime()); line++;
 8002bde:	f7ff f9ab 	bl	8001f38 <Interrupt_GetBootTime>
 8002be2:	ee10 3a10 	vmov	r3, s0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcae 	bl	8000548 <__aeabi_f2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	48c6      	ldr	r0, [pc, #792]	; (8002f0c <Module_Test+0x354>)
 8002bf2:	f007 ff67 	bl	800aac4 <iprintf>
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	80fb      	strh	r3, [r7, #6]

		// モータを指定のDutyを表示
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 8002bfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
 8002c10:	ee16 0a90 	vmov	r0, s13
 8002c14:	f7fd fc98 	bl	8000548 <__aeabi_f2d>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	460d      	mov	r5, r1
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 8002c1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
 8002c30:	ee16 0a90 	vmov	r0, s13
 8002c34:	f7fd fc88 	bl	8000548 <__aeabi_f2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8002c40:	4622      	mov	r2, r4
 8002c42:	462b      	mov	r3, r5
 8002c44:	48b2      	ldr	r0, [pc, #712]	; (8002f10 <Module_Test+0x358>)
 8002c46:	f007 ff3d 	bl	800aac4 <iprintf>
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	80fb      	strh	r3, [r7, #6]

		// エンコーダの角度表示
		printf("<Encoder> L: %6.3f[m],  R: %6.3f[m]\r\n", Encoder_GetDist_Left(), Encoder_GetDist_Right()); line++;
 8002c50:	f7ff fb0a 	bl	8002268 <Encoder_GetDist_Left>
 8002c54:	ee10 3a10 	vmov	r3, s0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc75 	bl	8000548 <__aeabi_f2d>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	460d      	mov	r5, r1
 8002c62:	f7ff fb69 	bl	8002338 <Encoder_GetDist_Right>
 8002c66:	ee10 3a10 	vmov	r3, s0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	e9cd 2300 	strd	r2, r3, [sp]
 8002c78:	4622      	mov	r2, r4
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	48a5      	ldr	r0, [pc, #660]	; (8002f14 <Module_Test+0x35c>)
 8002c7e:	f007 ff21 	bl	800aac4 <iprintf>
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	3301      	adds	r3, #1
 8002c86:	80fb      	strh	r3, [r7, #6]

		// バッテリー電圧の表示
		printf("<Battery> %3.2f[V]\r\n", Battery_GetVoltage()); line++;
 8002c88:	f7fe fa3a 	bl	8001100 <Battery_GetVoltage>
 8002c8c:	ee10 3a10 	vmov	r3, s0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fc59 	bl	8000548 <__aeabi_f2d>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	489f      	ldr	r0, [pc, #636]	; (8002f18 <Module_Test+0x360>)
 8002c9c:	f007 ff12 	bl	800aac4 <iprintf>
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	80fb      	strh	r3, [r7, #6]

		// ラインセンサのAD値表示
		printf("<Line Sensor> ML: %4d, L2: %4d L1: %4d, R1: %4d R2: %4d MR: %4d\r\n",
				Sensor_GetValue_ML(),
 8002ca6:	f001 f9bf 	bl	8004028 <Sensor_GetValue_ML>
 8002caa:	4603      	mov	r3, r0
		printf("<Line Sensor> ML: %4d, L2: %4d L1: %4d, R1: %4d R2: %4d MR: %4d\r\n",
 8002cac:	461e      	mov	r6, r3
				Sensor_GetValue_L2(),
 8002cae:	f001 f9a3 	bl	8003ff8 <Sensor_GetValue_L2>
 8002cb2:	4603      	mov	r3, r0
		printf("<Line Sensor> ML: %4d, L2: %4d L1: %4d, R1: %4d R2: %4d MR: %4d\r\n",
 8002cb4:	4698      	mov	r8, r3
				Sensor_GetValue_L1(),
 8002cb6:	f001 f9ab 	bl	8004010 <Sensor_GetValue_L1>
 8002cba:	4603      	mov	r3, r0
		printf("<Line Sensor> ML: %4d, L2: %4d L1: %4d, R1: %4d R2: %4d MR: %4d\r\n",
 8002cbc:	4699      	mov	r9, r3
				Sensor_GetValue_R1(),
 8002cbe:	f001 f98f 	bl	8003fe0 <Sensor_GetValue_R1>
 8002cc2:	4603      	mov	r3, r0
		printf("<Line Sensor> ML: %4d, L2: %4d L1: %4d, R1: %4d R2: %4d MR: %4d\r\n",
 8002cc4:	461c      	mov	r4, r3
				Sensor_GetValue_R2(),
 8002cc6:	f001 f97f 	bl	8003fc8 <Sensor_GetValue_R2>
 8002cca:	4603      	mov	r3, r0
		printf("<Line Sensor> ML: %4d, L2: %4d L1: %4d, R1: %4d R2: %4d MR: %4d\r\n",
 8002ccc:	461d      	mov	r5, r3
				Sensor_GetValue_MR()
 8002cce:	f001 f9b7 	bl	8004040 <Sensor_GetValue_MR>
 8002cd2:	4603      	mov	r3, r0
		printf("<Line Sensor> ML: %4d, L2: %4d L1: %4d, R1: %4d R2: %4d MR: %4d\r\n",
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	9501      	str	r5, [sp, #4]
 8002cd8:	9400      	str	r4, [sp, #0]
 8002cda:	464b      	mov	r3, r9
 8002cdc:	4642      	mov	r2, r8
 8002cde:	4631      	mov	r1, r6
 8002ce0:	488e      	ldr	r0, [pc, #568]	; (8002f1c <Module_Test+0x364>)
 8002ce2:	f007 feef 	bl	800aac4 <iprintf>
				);
		line++;
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	80fb      	strh	r3, [r7, #6]
		HAL_Delay(10);
		printf("<IMU> Gyro_Z: %d [rad/s]\r\n", I2C1_BMX055_GetGyro16()); line++;
*/

		//モータのDuty入力
		key = Communicate_TerminalRecv();
 8002cec:	f7fe fa6a 	bl	80011c4 <Communicate_TerminalRecv>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	707b      	strb	r3, [r7, #1]
		switch( key ) {
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	3b1b      	subs	r3, #27
 8002cf8:	2b5c      	cmp	r3, #92	; 0x5c
 8002cfa:	f200 80fe 	bhi.w	8002efa <Module_Test+0x342>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <Module_Test+0x14c>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002faf 	.word	0x08002faf
 8002d08:	08002efb 	.word	0x08002efb
 8002d0c:	08002efb 	.word	0x08002efb
 8002d10:	08002efb 	.word	0x08002efb
 8002d14:	08002efb 	.word	0x08002efb
 8002d18:	08002efb 	.word	0x08002efb
 8002d1c:	08002efb 	.word	0x08002efb
 8002d20:	08002efb 	.word	0x08002efb
 8002d24:	08002efb 	.word	0x08002efb
 8002d28:	08002efb 	.word	0x08002efb
 8002d2c:	08002efb 	.word	0x08002efb
 8002d30:	08002efb 	.word	0x08002efb
 8002d34:	08002efb 	.word	0x08002efb
 8002d38:	08002efb 	.word	0x08002efb
 8002d3c:	08002efb 	.word	0x08002efb
 8002d40:	08002efb 	.word	0x08002efb
 8002d44:	08002efb 	.word	0x08002efb
 8002d48:	08002efb 	.word	0x08002efb
 8002d4c:	08002efb 	.word	0x08002efb
 8002d50:	08002efb 	.word	0x08002efb
 8002d54:	08002efb 	.word	0x08002efb
 8002d58:	08002efb 	.word	0x08002efb
 8002d5c:	08002e79 	.word	0x08002e79
 8002d60:	08002e8d 	.word	0x08002e8d
 8002d64:	08002ea1 	.word	0x08002ea1
 8002d68:	08002efb 	.word	0x08002efb
 8002d6c:	08002efb 	.word	0x08002efb
 8002d70:	08002efb 	.word	0x08002efb
 8002d74:	08002eb5 	.word	0x08002eb5
 8002d78:	08002ec9 	.word	0x08002ec9
 8002d7c:	08002edd 	.word	0x08002edd
 8002d80:	08002efb 	.word	0x08002efb
 8002d84:	08002efb 	.word	0x08002efb
 8002d88:	08002efb 	.word	0x08002efb
 8002d8c:	08002efb 	.word	0x08002efb
 8002d90:	08002efb 	.word	0x08002efb
 8002d94:	08002efb 	.word	0x08002efb
 8002d98:	08002efb 	.word	0x08002efb
 8002d9c:	08002efb 	.word	0x08002efb
 8002da0:	08002efb 	.word	0x08002efb
 8002da4:	08002efb 	.word	0x08002efb
 8002da8:	08002efb 	.word	0x08002efb
 8002dac:	08002efb 	.word	0x08002efb
 8002db0:	08002efb 	.word	0x08002efb
 8002db4:	08002efb 	.word	0x08002efb
 8002db8:	08002efb 	.word	0x08002efb
 8002dbc:	08002efb 	.word	0x08002efb
 8002dc0:	08002efb 	.word	0x08002efb
 8002dc4:	08002efb 	.word	0x08002efb
 8002dc8:	08002efb 	.word	0x08002efb
 8002dcc:	08002efb 	.word	0x08002efb
 8002dd0:	08002efb 	.word	0x08002efb
 8002dd4:	08002efb 	.word	0x08002efb
 8002dd8:	08002efb 	.word	0x08002efb
 8002ddc:	08002efb 	.word	0x08002efb
 8002de0:	08002efb 	.word	0x08002efb
 8002de4:	08002efb 	.word	0x08002efb
 8002de8:	08002efb 	.word	0x08002efb
 8002dec:	08002efb 	.word	0x08002efb
 8002df0:	08002efb 	.word	0x08002efb
 8002df4:	08002efb 	.word	0x08002efb
 8002df8:	08002efb 	.word	0x08002efb
 8002dfc:	08002efb 	.word	0x08002efb
 8002e00:	08002efb 	.word	0x08002efb
 8002e04:	08002efb 	.word	0x08002efb
 8002e08:	08002efb 	.word	0x08002efb
 8002e0c:	08002efb 	.word	0x08002efb
 8002e10:	08002efb 	.word	0x08002efb
 8002e14:	08002efb 	.word	0x08002efb
 8002e18:	08002efb 	.word	0x08002efb
 8002e1c:	08002efb 	.word	0x08002efb
 8002e20:	08002efb 	.word	0x08002efb
 8002e24:	08002efb 	.word	0x08002efb
 8002e28:	08002efb 	.word	0x08002efb
 8002e2c:	08002eab 	.word	0x08002eab
 8002e30:	08002efb 	.word	0x08002efb
 8002e34:	08002efb 	.word	0x08002efb
 8002e38:	08002efb 	.word	0x08002efb
 8002e3c:	08002ed3 	.word	0x08002ed3
 8002e40:	08002efb 	.word	0x08002efb
 8002e44:	08002efb 	.word	0x08002efb
 8002e48:	08002efb 	.word	0x08002efb
 8002e4c:	08002efb 	.word	0x08002efb
 8002e50:	08002efb 	.word	0x08002efb
 8002e54:	08002ee7 	.word	0x08002ee7
 8002e58:	08002efb 	.word	0x08002efb
 8002e5c:	08002e83 	.word	0x08002e83
 8002e60:	08002ef1 	.word	0x08002ef1
 8002e64:	08002efb 	.word	0x08002efb
 8002e68:	08002efb 	.word	0x08002efb
 8002e6c:	08002ebf 	.word	0x08002ebf
 8002e70:	08002efb 	.word	0x08002efb
 8002e74:	08002e97 	.word	0x08002e97
			case '1': duty_l += 1;		break;
 8002e78:	88bb      	ldrh	r3, [r7, #4]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	80bb      	strh	r3, [r7, #4]
 8002e80:	e03b      	b.n	8002efa <Module_Test+0x342>
			case 'q': duty_l -= 1;		break;
 8002e82:	88bb      	ldrh	r3, [r7, #4]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	80bb      	strh	r3, [r7, #4]
 8002e8a:	e036      	b.n	8002efa <Module_Test+0x342>
			case '2': duty_l += 10;		break;
 8002e8c:	88bb      	ldrh	r3, [r7, #4]
 8002e8e:	330a      	adds	r3, #10
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	80bb      	strh	r3, [r7, #4]
 8002e94:	e031      	b.n	8002efa <Module_Test+0x342>
			case 'w': duty_l -= 10;		break;
 8002e96:	88bb      	ldrh	r3, [r7, #4]
 8002e98:	3b0a      	subs	r3, #10
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	80bb      	strh	r3, [r7, #4]
 8002e9e:	e02c      	b.n	8002efa <Module_Test+0x342>
			case '3': duty_l += 100;	break;
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	3364      	adds	r3, #100	; 0x64
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	80bb      	strh	r3, [r7, #4]
 8002ea8:	e027      	b.n	8002efa <Module_Test+0x342>
			case 'e': duty_l -= 100;	break;
 8002eaa:	88bb      	ldrh	r3, [r7, #4]
 8002eac:	3b64      	subs	r3, #100	; 0x64
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	80bb      	strh	r3, [r7, #4]
 8002eb2:	e022      	b.n	8002efa <Module_Test+0x342>
			case '7': duty_r += 1;		break;
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	e01d      	b.n	8002efa <Module_Test+0x342>
			case 'u': duty_r -= 1;		break;
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	807b      	strh	r3, [r7, #2]
 8002ec6:	e018      	b.n	8002efa <Module_Test+0x342>
			case '8': duty_r += 10;		break;
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	330a      	adds	r3, #10
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	807b      	strh	r3, [r7, #2]
 8002ed0:	e013      	b.n	8002efa <Module_Test+0x342>
			case 'i': duty_r -= 10;		break;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	3b0a      	subs	r3, #10
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	807b      	strh	r3, [r7, #2]
 8002eda:	e00e      	b.n	8002efa <Module_Test+0x342>
			case '9': duty_r += 100;	break;
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	3364      	adds	r3, #100	; 0x64
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	e009      	b.n	8002efa <Module_Test+0x342>
			case 'o': duty_r -= 100;	break;
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	3b64      	subs	r3, #100	; 0x64
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	807b      	strh	r3, [r7, #2]
 8002eee:	e004      	b.n	8002efa <Module_Test+0x342>
			case 'r': // reset
				duty_l = duty_r = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	887b      	ldrh	r3, [r7, #2]
 8002ef6:	80bb      	strh	r3, [r7, #4]
				break;
 8002ef8:	bf00      	nop
			case 0x1b: goto END; // [esc] exit
		}
		duty_l = SIGN(duty_l) * MIN( 950, ABS(duty_l) );
 8002efa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da0e      	bge.n	8002f20 <Module_Test+0x368>
 8002f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f06:	e00c      	b.n	8002f22 <Module_Test+0x36a>
 8002f08:	20001724 	.word	0x20001724
 8002f0c:	0800e39c 	.word	0x0800e39c
 8002f10:	0800e3b4 	.word	0x0800e3b4
 8002f14:	0800e3e0 	.word	0x0800e3e0
 8002f18:	0800e408 	.word	0x0800e408
 8002f1c:	0800e420 	.word	0x0800e420
 8002f20:	2201      	movs	r2, #1
 8002f22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bfb8      	it	lt
 8002f2a:	425b      	neglt	r3, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f240 31b6 	movw	r1, #950	; 0x3b6
 8002f32:	428b      	cmp	r3, r1
 8002f34:	bf28      	it	cs
 8002f36:	460b      	movcs	r3, r1
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	fb12 f303 	smulbb	r3, r2, r3
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	80bb      	strh	r3, [r7, #4]
		duty_r = SIGN(duty_r) * MIN( 950, ABS(duty_r) );
 8002f42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	da02      	bge.n	8002f50 <Module_Test+0x398>
 8002f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4e:	e000      	b.n	8002f52 <Module_Test+0x39a>
 8002f50:	2201      	movs	r2, #1
 8002f52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bfb8      	it	lt
 8002f5a:	425b      	neglt	r3, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f240 31b6 	movw	r1, #950	; 0x3b6
 8002f62:	428b      	cmp	r3, r1
 8002f64:	bf28      	it	cs
 8002f66:	460b      	movcs	r3, r1
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	fb12 f303 	smulbb	r3, r2, r3
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	807b      	strh	r3, [r7, #2]

		// モータを回転
		Motor_SetDuty_Left(duty_l);
 8002f72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f832 	bl	8002fe0 <Motor_SetDuty_Left>
		Motor_SetDuty_Right(duty_r);
 8002f7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f895 	bl	80030b0 <Motor_SetDuty_Right>

		fflush(stdout);
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <Module_Test+0x414>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f006 fd3d 	bl	8009a0c <fflush>
		HAL_Delay(200);
 8002f92:	20c8      	movs	r0, #200	; 0xc8
 8002f94:	f001 fde2 	bl	8004b5c <HAL_Delay>
		// 画面のクリア
		printf("%c[0J", 0x1b);
 8002f98:	211b      	movs	r1, #27
 8002f9a:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <Module_Test+0x418>)
 8002f9c:	f007 fd92 	bl	800aac4 <iprintf>
		printf("%c[%dA", 0x1b, line);
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	211b      	movs	r1, #27
 8002fa6:	480b      	ldr	r0, [pc, #44]	; (8002fd4 <Module_Test+0x41c>)
 8002fa8:	f007 fd8c 	bl	800aac4 <iprintf>
		printf("<Boot Time> %8.3f[s]\r\n", Interrupt_GetBootTime()); line++;
 8002fac:	e617      	b.n	8002bde <Module_Test+0x26>
			case 0x1b: goto END; // [esc] exit
 8002fae:	bf00      	nop
	}
	END:;
	MOT_STOP_PWM();
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <Module_Test+0x420>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <Module_Test+0x424>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000001c 	.word	0x2000001c
 8002fd0:	0800e464 	.word	0x0800e464
 8002fd4:	0800e46c 	.word	0x0800e46c
 8002fd8:	2000165c 	.word	0x2000165c
 8002fdc:	2000159c 	.word	0x2000159c

08002fe0 <Motor_SetDuty_Left>:

/* ---------------------------------------------------------------
	左モータを指定のDuty（-1000～1000）で回転させる関数
--------------------------------------------------------------- */
void Motor_SetDuty_Left( int16_t duty_l )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_l;

	if( ABS(duty_l) > MOT_DUTY_MAX ) {
 8002fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bfb8      	it	lt
 8002ff2:	425b      	neglt	r3, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d912      	bls.n	8003024 <Motor_SetDuty_Left+0x44>
		pulse_l = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 8002ffe:	f004 fc29 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 8003002:	4603      	mov	r3, r0
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <Motor_SetDuty_Left+0xc8>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <Motor_SetDuty_Left+0xc8>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	3b01      	subs	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e019      	b.n	8003058 <Motor_SetDuty_Left+0x78>
	}
	else if( ABS(duty_l) < MOT_DUTY_MIN ) {
		pulse_l = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
	}
	else {
		pulse_l = (uint32_t)(PCLK / PWMFREQ * ABS(duty_l) / 1000) - 1;
 8003024:	f004 fc16 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 8003028:	4603      	mov	r3, r0
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <Motor_SetDuty_Left+0xc8>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	099a      	lsrs	r2, r3, #6
 8003034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da03      	bge.n	8003044 <Motor_SetDuty_Left+0x64>
 800303c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003040:	425b      	negs	r3, r3
 8003042:	e001      	b.n	8003048 <Motor_SetDuty_Left+0x68>
 8003044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <Motor_SetDuty_Left+0xc8>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	3b01      	subs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
	}

	if( duty_l > 0 ) {
 8003058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	dd0b      	ble.n	8003078 <Motor_SetDuty_Left+0x98>
		MOT_SET_FORWARD_L();
 8003060:	2201      	movs	r2, #1
 8003062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800306a:	f003 f987 	bl	800637c <HAL_GPIO_WritePin>
		MOT_SET_COMPARE_L( pulse_l );
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <Motor_SetDuty_Left+0xcc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_REVERSE_L()	;
		MOT_SET_COMPARE_L( pulse_l );
	} else {
		MOT_SET_COMPARE_L( 0x0000 );
	}
}
 8003076:	e013      	b.n	80030a0 <Motor_SetDuty_Left+0xc0>
	else if( duty_l < 0 ) {
 8003078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0b      	bge.n	8003098 <Motor_SetDuty_Left+0xb8>
		MOT_SET_REVERSE_L()	;
 8003080:	2200      	movs	r2, #0
 8003082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800308a:	f003 f977 	bl	800637c <HAL_GPIO_WritePin>
		MOT_SET_COMPARE_L( pulse_l );
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <Motor_SetDuty_Left+0xcc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003096:	e003      	b.n	80030a0 <Motor_SetDuty_Left+0xc0>
		MOT_SET_COMPARE_L( 0x0000 );
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <Motor_SetDuty_Left+0xcc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	10624dd3 	.word	0x10624dd3
 80030ac:	2000165c 	.word	0x2000165c

080030b0 <Motor_SetDuty_Right>:

/* ---------------------------------------------------------------
	右モータを指定のDuty（-1000～1000）で回転させる関数
--------------------------------------------------------------- */
void Motor_SetDuty_Right( int16_t duty_r )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_r;

	if( ABS(duty_r) > MOT_DUTY_MAX ) {
 80030ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bfb8      	it	lt
 80030c2:	425b      	neglt	r3, r3
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d912      	bls.n	80030f4 <Motor_SetDuty_Right+0x44>
		pulse_r = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 80030ce:	f004 fbc1 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 80030d2:	4603      	mov	r3, r0
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4a26      	ldr	r2, [pc, #152]	; (8003170 <Motor_SetDuty_Right+0xc0>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	f240 32b6 	movw	r2, #950	; 0x3b6
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	4a22      	ldr	r2, [pc, #136]	; (8003170 <Motor_SetDuty_Right+0xc0>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3b01      	subs	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	e019      	b.n	8003128 <Motor_SetDuty_Right+0x78>
	}
	else if( ABS(duty_r) < MOT_DUTY_MIN ) {
		pulse_r = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
	}
	else {
		pulse_r = (uint32_t)(PCLK / PWMFREQ * ABS(duty_r) / 1000) - 1;
 80030f4:	f004 fbae 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 80030f8:	4603      	mov	r3, r0
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <Motor_SetDuty_Right+0xc0>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	099a      	lsrs	r2, r3, #6
 8003104:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	da03      	bge.n	8003114 <Motor_SetDuty_Right+0x64>
 800310c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003110:	425b      	negs	r3, r3
 8003112:	e001      	b.n	8003118 <Motor_SetDuty_Right+0x68>
 8003114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <Motor_SetDuty_Right+0xc0>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	3b01      	subs	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
	}

	if( duty_r > 0 ) {
 8003128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312c:	2b00      	cmp	r3, #0
 800312e:	dd09      	ble.n	8003144 <Motor_SetDuty_Right+0x94>
			MOT_SET_FORWARD_R();
 8003130:	2200      	movs	r2, #0
 8003132:	2110      	movs	r1, #16
 8003134:	480f      	ldr	r0, [pc, #60]	; (8003174 <Motor_SetDuty_Right+0xc4>)
 8003136:	f003 f921 	bl	800637c <HAL_GPIO_WritePin>
			MOT_SET_COMPARE_R( pulse_r );
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <Motor_SetDuty_Right+0xc8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	635a      	str	r2, [r3, #52]	; 0x34
			MOT_SET_REVERSE_R();
			MOT_SET_COMPARE_R( pulse_r );
		} else {
			MOT_SET_COMPARE_R( 0x0000 );
		}
}
 8003142:	e011      	b.n	8003168 <Motor_SetDuty_Right+0xb8>
		else if( duty_r < 0 ) {
 8003144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da09      	bge.n	8003160 <Motor_SetDuty_Right+0xb0>
			MOT_SET_REVERSE_R();
 800314c:	2201      	movs	r2, #1
 800314e:	2110      	movs	r1, #16
 8003150:	4808      	ldr	r0, [pc, #32]	; (8003174 <Motor_SetDuty_Right+0xc4>)
 8003152:	f003 f913 	bl	800637c <HAL_GPIO_WritePin>
			MOT_SET_COMPARE_R( pulse_r );
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <Motor_SetDuty_Right+0xc8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800315e:	e003      	b.n	8003168 <Motor_SetDuty_Right+0xb8>
			MOT_SET_COMPARE_R( 0x0000 );
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <Motor_SetDuty_Right+0xc8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	10624dd3 	.word	0x10624dd3
 8003174:	48000400 	.word	0x48000400
 8003178:	2000159c 	.word	0x2000159c

0800317c <Robo_Tracer>:

/* ---------------------------------------------------------------
	ロボトレーサとしての関数
--------------------------------------------------------------- */
void Robo_Tracer( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
	uint8_t run_sellct = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
	uint8_t goal_cnt = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	71bb      	strb	r3, [r7, #6]

		//機能選択のループ
		while (1) {

			//モードインクリメント処理
			if(SW1_ONOFF() == SW_ON){
 800318a:	2101      	movs	r1, #1
 800318c:	484c      	ldr	r0, [pc, #304]	; (80032c0 <Robo_Tracer+0x144>)
 800318e:	f003 f8dd 	bl	800634c <HAL_GPIO_ReadPin>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d114      	bne.n	80031c2 <Robo_Tracer+0x46>
				HAL_Delay(50);					//チャタリング回避
 8003198:	2032      	movs	r0, #50	; 0x32
 800319a:	f001 fcdf 	bl	8004b5c <HAL_Delay>
				while(SW1_ONOFF() == SW_ON);	//スイッチが離されるまで待つ
 800319e:	bf00      	nop
 80031a0:	2101      	movs	r1, #1
 80031a2:	4847      	ldr	r0, [pc, #284]	; (80032c0 <Robo_Tracer+0x144>)
 80031a4:	f003 f8d2 	bl	800634c <HAL_GPIO_ReadPin>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f8      	beq.n	80031a0 <Robo_Tracer+0x24>
				Buzz_Set(1,50);
 80031ae:	2132      	movs	r1, #50	; 0x32
 80031b0:	2001      	movs	r0, #1
 80031b2:	f7fe fffb 	bl	80021ac <Buzz_Set>
				HAL_Delay(50);					//チャタリング回避
 80031b6:	2032      	movs	r0, #50	; 0x32
 80031b8:	f001 fcd0 	bl	8004b5c <HAL_Delay>
				++run_sellct;
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	3301      	adds	r3, #1
 80031c0:	71fb      	strb	r3, [r7, #7]
			}
			if(SW2_ONOFF() == SW_ON ){
 80031c2:	2102      	movs	r1, #2
 80031c4:	483e      	ldr	r0, [pc, #248]	; (80032c0 <Robo_Tracer+0x144>)
 80031c6:	f003 f8c1 	bl	800634c <HAL_GPIO_ReadPin>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d125      	bne.n	800321c <Robo_Tracer+0xa0>
				HAL_Delay(50);					//チャタリング回避
 80031d0:	2032      	movs	r0, #50	; 0x32
 80031d2:	f001 fcc3 	bl	8004b5c <HAL_Delay>
				while(SW2_ONOFF() == SW_ON);	//スイッチが離されるまで待つ
 80031d6:	bf00      	nop
 80031d8:	2102      	movs	r1, #2
 80031da:	4839      	ldr	r0, [pc, #228]	; (80032c0 <Robo_Tracer+0x144>)
 80031dc:	f003 f8b6 	bl	800634c <HAL_GPIO_ReadPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f8      	beq.n	80031d8 <Robo_Tracer+0x5c>
				Buzz_Set(2,50);
 80031e6:	2132      	movs	r1, #50	; 0x32
 80031e8:	2002      	movs	r0, #2
 80031ea:	f7fe ffdf 	bl	80021ac <Buzz_Set>
				HAL_Delay(50);					//チャタリング回避
 80031ee:	2032      	movs	r0, #50	; 0x32
 80031f0:	f001 fcb4 	bl	8004b5c <HAL_Delay>
				break;
 80031f4:	bf00      	nop
			printf("%c[%dA", 0x1b, 1);

		}

		//加速度・速度設定
		switch( run_sellct ) {
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d8c6      	bhi.n	800318a <Robo_Tracer+0xe>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <Robo_Tracer+0x88>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003245 	.word	0x08003245
 8003208:	08003257 	.word	0x08003257
 800320c:	0800327d 	.word	0x0800327d
 8003210:	0800329f 	.word	0x0800329f
 8003214:	0800318b 	.word	0x0800318b
 8003218:	0800318b 	.word	0x0800318b
			if(run_sellct > 5){run_sellct = 0;}
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	2b05      	cmp	r3, #5
 8003220:	d901      	bls.n	8003226 <Robo_Tracer+0xaa>
 8003222:	2300      	movs	r3, #0
 8003224:	71fb      	strb	r3, [r7, #7]
			printf("<run_sellct> run_sellct: %d \r\n", run_sellct);
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	4619      	mov	r1, r3
 800322a:	4826      	ldr	r0, [pc, #152]	; (80032c4 <Robo_Tracer+0x148>)
 800322c:	f007 fc4a 	bl	800aac4 <iprintf>
			printf("%c[0J", 0x1b);
 8003230:	211b      	movs	r1, #27
 8003232:	4825      	ldr	r0, [pc, #148]	; (80032c8 <Robo_Tracer+0x14c>)
 8003234:	f007 fc46 	bl	800aac4 <iprintf>
			printf("%c[%dA", 0x1b, 1);
 8003238:	2201      	movs	r2, #1
 800323a:	211b      	movs	r1, #27
 800323c:	4823      	ldr	r0, [pc, #140]	; (80032cc <Robo_Tracer+0x150>)
 800323e:	f007 fc41 	bl	800aac4 <iprintf>
			if(SW1_ONOFF() == SW_ON){
 8003242:	e7a2      	b.n	800318a <Robo_Tracer+0xe>
			case 0: //探索走行
				Search_Run();
 8003244:	f000 facc 	bl	80037e0 <Search_Run>
				goal_cnt = marker_cnt;
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <Robo_Tracer+0x154>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	71bb      	strb	r3, [r7, #6]
				++run_sellct;
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	3301      	adds	r3, #1
 8003252:	71fb      	strb	r3, [r7, #7]
				break;
 8003254:	e033      	b.n	80032be <Robo_Tracer+0x142>

			case 1: //二次走行	パラメータ１
				accel = 2.0f;
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <Robo_Tracer+0x158>)
 8003258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800325c:	601a      	str	r2, [r3, #0]
				drive_vel_min = 0.5f;
 800325e:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <Robo_Tracer+0x15c>)
 8003260:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003264:	601a      	str	r2, [r3, #0]
				drive_vel_max = 0.6f;
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <Robo_Tracer+0x160>)
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <Robo_Tracer+0x164>)
 800326a:	601a      	str	r2, [r3, #0]
				Command_Run(goal_cnt);
 800326c:	79bb      	ldrb	r3, [r7, #6]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fcfc 	bl	8003c6c <Command_Run>
				++run_sellct;
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	3301      	adds	r3, #1
 8003278:	71fb      	strb	r3, [r7, #7]
				break;
 800327a:	e020      	b.n	80032be <Robo_Tracer+0x142>

			case 2: //二次走行	パラメータ２
				accel = 3.0f;
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <Robo_Tracer+0x158>)
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <Robo_Tracer+0x168>)
 8003280:	601a      	str	r2, [r3, #0]
				drive_vel_min = 0.6f;
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <Robo_Tracer+0x15c>)
 8003284:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <Robo_Tracer+0x164>)
 8003286:	601a      	str	r2, [r3, #0]
				drive_vel_max = 0.7f;
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <Robo_Tracer+0x160>)
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <Robo_Tracer+0x16c>)
 800328c:	601a      	str	r2, [r3, #0]
				Command_Run(goal_cnt);
 800328e:	79bb      	ldrb	r3, [r7, #6]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fceb 	bl	8003c6c <Command_Run>
				++run_sellct;
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	3301      	adds	r3, #1
 800329a:	71fb      	strb	r3, [r7, #7]
				break;
 800329c:	e00f      	b.n	80032be <Robo_Tracer+0x142>

			case 3: //二次走行	パラメータ３
				accel = 4.0f;
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <Robo_Tracer+0x158>)
 80032a0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80032a4:	601a      	str	r2, [r3, #0]
				drive_vel_min = 0.6f;
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <Robo_Tracer+0x15c>)
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <Robo_Tracer+0x164>)
 80032aa:	601a      	str	r2, [r3, #0]
				drive_vel_max = 0.75f;
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <Robo_Tracer+0x160>)
 80032ae:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80032b2:	601a      	str	r2, [r3, #0]
				Command_Run(goal_cnt);
 80032b4:	79bb      	ldrb	r3, [r7, #6]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fcd8 	bl	8003c6c <Command_Run>
				break;
 80032bc:	bf00      	nop
	while(1) {
 80032be:	e764      	b.n	800318a <Robo_Tracer+0xe>
 80032c0:	48001400 	.word	0x48001400
 80032c4:	0800e474 	.word	0x0800e474
 80032c8:	0800e494 	.word	0x0800e494
 80032cc:	0800e49c 	.word	0x0800e49c
 80032d0:	200002bc 	.word	0x200002bc
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000008 	.word	0x20000008
 80032dc:	2000000c 	.word	0x2000000c
 80032e0:	3f19999a 	.word	0x3f19999a
 80032e4:	40400000 	.word	0x40400000
 80032e8:	3f333333 	.word	0x3f333333
 80032ec:	00000000 	.word	0x00000000

080032f0 <Read_Marker>:
}

/* ---------------------------------------------------------------
	マーカーセンシング関数
--------------------------------------------------------------- */
uint8_t Read_Marker( uint8_t read_mode){
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]

	static float dist_C = 0.0f;			//現在距離バッファ
	static float dist_L = 0.0f;			//左輪距離バッファ
	static float dist_R = 0.0f;			//右輪距離バッファ
	uint8_t cross_flag = 0;				//両マーカー判定フラグ
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
	uint8_t marker_state = 0;			//マーカー状態リターン変数
 80032fe:	2300      	movs	r3, #0
 8003300:	73bb      	strb	r3, [r7, #14]

	// 左マーカー処理　左から入って右を見る
	if( (Get_MarkerState_L() == MK_LEFT) && (Get_MarkerState_R() != MK_RIGHT) ){
 8003302:	f7fe ff3b 	bl	800217c <Get_MarkerState_L>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 80c8 	bne.w	800349e <Read_Marker+0x1ae>
 800330e:	f7fe ff41 	bl	8002194 <Get_MarkerState_R>
 8003312:	4603      	mov	r3, r0
 8003314:	2b02      	cmp	r3, #2
 8003316:	f000 80c2 	beq.w	800349e <Read_Marker+0x1ae>
		dist_C = Get_Dist();      										// 現在距離代入
 800331a:	f7fe ff07 	bl	800212c <Get_Dist>
 800331e:	eef0 7a40 	vmov.f32	s15, s0
 8003322:	4bcb      	ldr	r3, [pc, #812]	; (8003650 <Read_Marker+0x360>)
 8003324:	edc3 7a00 	vstr	s15, [r3]
		while(Get_Dist() <= dist_C + 0.01){								// ＋1cm走行
 8003328:	e002      	b.n	8003330 <Read_Marker+0x40>
			HAL_Delay(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f001 fc16 	bl	8004b5c <HAL_Delay>
		while(Get_Dist() <= dist_C + 0.01){								// ＋1cm走行
 8003330:	f7fe fefc 	bl	800212c <Get_Dist>
 8003334:	ee10 3a10 	vmov	r3, s0
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f905 	bl	8000548 <__aeabi_f2d>
 800333e:	4604      	mov	r4, r0
 8003340:	460d      	mov	r5, r1
 8003342:	4bc3      	ldr	r3, [pc, #780]	; (8003650 <Read_Marker+0x360>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8fe 	bl	8000548 <__aeabi_f2d>
 800334c:	a3bc      	add	r3, pc, #752	; (adr r3, 8003640 <Read_Marker+0x350>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ff9b 	bl	800028c <__adddf3>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4620      	mov	r0, r4
 800335c:	4629      	mov	r1, r5
 800335e:	f7fd fbc7 	bl	8000af0 <__aeabi_dcmple>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e0      	bne.n	800332a <Read_Marker+0x3a>
		}
		if(Get_MarkerState_L() == MK_LEFT ){ cross_flag = 0; }		// 左マーカー有り！
 8003368:	f7fe ff08 	bl	800217c <Get_MarkerState_L>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <Read_Marker+0x86>
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
		if(Get_MarkerState_R() == MK_RIGHT){ cross_flag = 1; }		// 両マーカー判定！
 8003376:	f7fe ff0d 	bl	8002194 <Get_MarkerState_R>
 800337a:	4603      	mov	r3, r0
 800337c:	2b02      	cmp	r3, #2
 800337e:	d101      	bne.n	8003384 <Read_Marker+0x94>
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]

		//左マーカー確定 現在マーカー距離を保持
		if( cross_flag == 0 ){
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d114      	bne.n	80033b4 <Read_Marker+0xc4>
			dist_C = Get_Dist();
 800338a:	f7fe fecf 	bl	800212c <Get_Dist>
 800338e:	eef0 7a40 	vmov.f32	s15, s0
 8003392:	4baf      	ldr	r3, [pc, #700]	; (8003650 <Read_Marker+0x360>)
 8003394:	edc3 7a00 	vstr	s15, [r3]
			dist_L = Encoder_GetDist_Left();
 8003398:	f7fe ff66 	bl	8002268 <Encoder_GetDist_Left>
 800339c:	eef0 7a40 	vmov.f32	s15, s0
 80033a0:	4bac      	ldr	r3, [pc, #688]	; (8003654 <Read_Marker+0x364>)
 80033a2:	edc3 7a00 	vstr	s15, [r3]
			dist_R = Encoder_GetDist_Right();
 80033a6:	f7fe ffc7 	bl	8002338 <Encoder_GetDist_Right>
 80033aa:	eef0 7a40 	vmov.f32	s15, s0
 80033ae:	4baa      	ldr	r3, [pc, #680]	; (8003658 <Read_Marker+0x368>)
 80033b0:	edc3 7a00 	vstr	s15, [r3]
		}

		if( read_mode == SEARCH ){
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d124      	bne.n	8003404 <Read_Marker+0x114>
			//右マーカーがこないか最大4㎝待つ
			while(Get_Dist() <= dist_C + 0.04){
 80033ba:	e006      	b.n	80033ca <Read_Marker+0xda>
				if(Get_MarkerState_R() == MK_RIGHT){ cross_flag = 1; }		// 両マーカー判定！
 80033bc:	f7fe feea 	bl	8002194 <Get_MarkerState_R>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d101      	bne.n	80033ca <Read_Marker+0xda>
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
			while(Get_Dist() <= dist_C + 0.04){
 80033ca:	f7fe feaf 	bl	800212c <Get_Dist>
 80033ce:	ee10 3a10 	vmov	r3, s0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f8b8 	bl	8000548 <__aeabi_f2d>
 80033d8:	4604      	mov	r4, r0
 80033da:	460d      	mov	r5, r1
 80033dc:	4b9c      	ldr	r3, [pc, #624]	; (8003650 <Read_Marker+0x360>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd f8b1 	bl	8000548 <__aeabi_f2d>
 80033e6:	a398      	add	r3, pc, #608	; (adr r3, 8003648 <Read_Marker+0x358>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fc ff4e 	bl	800028c <__adddf3>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4620      	mov	r0, r4
 80033f6:	4629      	mov	r1, r5
 80033f8:	f7fd fb7a 	bl	8000af0 <__aeabi_dcmple>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1dc      	bne.n	80033bc <Read_Marker+0xcc>
 8003402:	e026      	b.n	8003452 <Read_Marker+0x162>
			}
		}
		else if(read_mode == READ){
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d123      	bne.n	8003452 <Read_Marker+0x162>
			//右マーカーがこないか最大1㎝待つ
			while(Get_Dist() <= dist_C + 0.01){
 800340a:	e006      	b.n	800341a <Read_Marker+0x12a>
				if(Get_MarkerState_R() == MK_RIGHT){ cross_flag = 1; }		// 両マーカー判定！
 800340c:	f7fe fec2 	bl	8002194 <Get_MarkerState_R>
 8003410:	4603      	mov	r3, r0
 8003412:	2b02      	cmp	r3, #2
 8003414:	d101      	bne.n	800341a <Read_Marker+0x12a>
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
			while(Get_Dist() <= dist_C + 0.01){
 800341a:	f7fe fe87 	bl	800212c <Get_Dist>
 800341e:	ee10 3a10 	vmov	r3, s0
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd f890 	bl	8000548 <__aeabi_f2d>
 8003428:	4604      	mov	r4, r0
 800342a:	460d      	mov	r5, r1
 800342c:	4b88      	ldr	r3, [pc, #544]	; (8003650 <Read_Marker+0x360>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd f889 	bl	8000548 <__aeabi_f2d>
 8003436:	a382      	add	r3, pc, #520	; (adr r3, 8003640 <Read_Marker+0x350>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f7fc ff26 	bl	800028c <__adddf3>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4620      	mov	r0, r4
 8003446:	4629      	mov	r1, r5
 8003448:	f7fd fb52 	bl	8000af0 <__aeabi_dcmple>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1dc      	bne.n	800340c <Read_Marker+0x11c>
			}
		}

		//左マーカー判定
		if(cross_flag == 0){
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11a      	bne.n	800348e <Read_Marker+0x19e>
			if( read_mode == SEARCH ){
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d110      	bne.n	8003480 <Read_Marker+0x190>
				Marker_Write(dist_C,dist_L,dist_R);		//マーカー距離を記録
 800345e:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <Read_Marker+0x360>)
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	4b7b      	ldr	r3, [pc, #492]	; (8003654 <Read_Marker+0x364>)
 8003466:	ed93 7a00 	vldr	s14, [r3]
 800346a:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <Read_Marker+0x368>)
 800346c:	edd3 6a00 	vldr	s13, [r3]
 8003470:	eeb0 1a66 	vmov.f32	s2, s13
 8003474:	eef0 0a47 	vmov.f32	s1, s14
 8003478:	eeb0 0a67 	vmov.f32	s0, s15
 800347c:	f000 f944 	bl	8003708 <Marker_Write>
			}
			Buzz_Set(1,50);
 8003480:	2132      	movs	r1, #50	; 0x32
 8003482:	2001      	movs	r0, #1
 8003484:	f7fe fe92 	bl	80021ac <Buzz_Set>
			marker_state = MK_LEFT;					//結果は左マーカー
 8003488:	2301      	movs	r3, #1
 800348a:	73bb      	strb	r3, [r7, #14]
 800348c:	e004      	b.n	8003498 <Read_Marker+0x1a8>
		}
		//両マーカー判定
		else if(cross_flag == 1){
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <Read_Marker+0x1a8>
			marker_state = MK_CROSS;				//結果は十字交差
 8003494:	2303      	movs	r3, #3
 8003496:	73bb      	strb	r3, [r7, #14]
		}

		cross_flag = 0;								//両マーカーフラグクリア
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e124      	b.n	80036e8 <Read_Marker+0x3f8>
	}

	// 右マーカー処理 右から入って，左を見る
	else if( (Get_MarkerState_L() != MK_LEFT) && (Get_MarkerState_R() == MK_RIGHT) ){
 800349e:	f7fe fe6d 	bl	800217c <Get_MarkerState_L>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f000 80d9 	beq.w	800365c <Read_Marker+0x36c>
 80034aa:	f7fe fe73 	bl	8002194 <Get_MarkerState_R>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	f040 80d3 	bne.w	800365c <Read_Marker+0x36c>
		dist_C = Get_Dist();      										// 現在距離代入
 80034b6:	f7fe fe39 	bl	800212c <Get_Dist>
 80034ba:	eef0 7a40 	vmov.f32	s15, s0
 80034be:	4b64      	ldr	r3, [pc, #400]	; (8003650 <Read_Marker+0x360>)
 80034c0:	edc3 7a00 	vstr	s15, [r3]
		while(Get_Dist() <= dist_C + 0.01){								// ＋1cm走行
 80034c4:	e002      	b.n	80034cc <Read_Marker+0x1dc>
			HAL_Delay(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f001 fb48 	bl	8004b5c <HAL_Delay>
		while(Get_Dist() <= dist_C + 0.01){								// ＋1cm走行
 80034cc:	f7fe fe2e 	bl	800212c <Get_Dist>
 80034d0:	ee10 3a10 	vmov	r3, s0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f837 	bl	8000548 <__aeabi_f2d>
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
 80034de:	4b5c      	ldr	r3, [pc, #368]	; (8003650 <Read_Marker+0x360>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd f830 	bl	8000548 <__aeabi_f2d>
 80034e8:	a355      	add	r3, pc, #340	; (adr r3, 8003640 <Read_Marker+0x350>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fc fecd 	bl	800028c <__adddf3>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4620      	mov	r0, r4
 80034f8:	4629      	mov	r1, r5
 80034fa:	f7fd faf9 	bl	8000af0 <__aeabi_dcmple>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e0      	bne.n	80034c6 <Read_Marker+0x1d6>
		}
		if(Get_MarkerState_L() == MK_LEFT ){ cross_flag = 1; }		// 両マーカー判定！
 8003504:	f7fe fe3a 	bl	800217c <Get_MarkerState_L>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <Read_Marker+0x222>
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
		if(Get_MarkerState_R() == MK_RIGHT){ cross_flag = 0; }		// 右マーカー有り！
 8003512:	f7fe fe3f 	bl	8002194 <Get_MarkerState_R>
 8003516:	4603      	mov	r3, r0
 8003518:	2b02      	cmp	r3, #2
 800351a:	d101      	bne.n	8003520 <Read_Marker+0x230>
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]

		//右マーカー確定 現在マーカー距離を保持
		if( cross_flag == 0 ){
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d114      	bne.n	8003550 <Read_Marker+0x260>
			dist_C = Get_Dist();
 8003526:	f7fe fe01 	bl	800212c <Get_Dist>
 800352a:	eef0 7a40 	vmov.f32	s15, s0
 800352e:	4b48      	ldr	r3, [pc, #288]	; (8003650 <Read_Marker+0x360>)
 8003530:	edc3 7a00 	vstr	s15, [r3]
			dist_L = Encoder_GetDist_Left();
 8003534:	f7fe fe98 	bl	8002268 <Encoder_GetDist_Left>
 8003538:	eef0 7a40 	vmov.f32	s15, s0
 800353c:	4b45      	ldr	r3, [pc, #276]	; (8003654 <Read_Marker+0x364>)
 800353e:	edc3 7a00 	vstr	s15, [r3]
			dist_R = Encoder_GetDist_Right();
 8003542:	f7fe fef9 	bl	8002338 <Encoder_GetDist_Right>
 8003546:	eef0 7a40 	vmov.f32	s15, s0
 800354a:	4b43      	ldr	r3, [pc, #268]	; (8003658 <Read_Marker+0x368>)
 800354c:	edc3 7a00 	vstr	s15, [r3]
		}

		if( read_mode == SEARCH ){
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d124      	bne.n	80035a0 <Read_Marker+0x2b0>
			//左マーカーがこないか最大4㎝待つ
			while(Get_Dist() <= dist_C + 0.04){
 8003556:	e006      	b.n	8003566 <Read_Marker+0x276>
				if(Get_MarkerState_L() == MK_LEFT ){ cross_flag = 1; }		// 両マーカー判定！
 8003558:	f7fe fe10 	bl	800217c <Get_MarkerState_L>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <Read_Marker+0x276>
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
			while(Get_Dist() <= dist_C + 0.04){
 8003566:	f7fe fde1 	bl	800212c <Get_Dist>
 800356a:	ee10 3a10 	vmov	r3, s0
 800356e:	4618      	mov	r0, r3
 8003570:	f7fc ffea 	bl	8000548 <__aeabi_f2d>
 8003574:	4604      	mov	r4, r0
 8003576:	460d      	mov	r5, r1
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <Read_Marker+0x360>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ffe3 	bl	8000548 <__aeabi_f2d>
 8003582:	a331      	add	r3, pc, #196	; (adr r3, 8003648 <Read_Marker+0x358>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fc fe80 	bl	800028c <__adddf3>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4620      	mov	r0, r4
 8003592:	4629      	mov	r1, r5
 8003594:	f7fd faac 	bl	8000af0 <__aeabi_dcmple>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1dc      	bne.n	8003558 <Read_Marker+0x268>
 800359e:	e026      	b.n	80035ee <Read_Marker+0x2fe>
			}
		}

		else if(read_mode == READ){
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d123      	bne.n	80035ee <Read_Marker+0x2fe>
			//左マーカーがこないか最大1㎝待つ
			while(Get_Dist() <= dist_C + 0.01){
 80035a6:	e006      	b.n	80035b6 <Read_Marker+0x2c6>
				if(Get_MarkerState_R() == MK_LEFT){ cross_flag = 1; }		// 両マーカー判定！
 80035a8:	f7fe fdf4 	bl	8002194 <Get_MarkerState_R>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <Read_Marker+0x2c6>
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
			while(Get_Dist() <= dist_C + 0.01){
 80035b6:	f7fe fdb9 	bl	800212c <Get_Dist>
 80035ba:	ee10 3a10 	vmov	r3, s0
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc ffc2 	bl	8000548 <__aeabi_f2d>
 80035c4:	4604      	mov	r4, r0
 80035c6:	460d      	mov	r5, r1
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <Read_Marker+0x360>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc ffbb 	bl	8000548 <__aeabi_f2d>
 80035d2:	a31b      	add	r3, pc, #108	; (adr r3, 8003640 <Read_Marker+0x350>)
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f7fc fe58 	bl	800028c <__adddf3>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4620      	mov	r0, r4
 80035e2:	4629      	mov	r1, r5
 80035e4:	f7fd fa84 	bl	8000af0 <__aeabi_dcmple>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1dc      	bne.n	80035a8 <Read_Marker+0x2b8>
			}
		}

		//右マーカー判定
		if(cross_flag == 0){
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11a      	bne.n	800362a <Read_Marker+0x33a>
			if( read_mode == SEARCH ){
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d110      	bne.n	800361c <Read_Marker+0x32c>
				Marker_Write(dist_C,dist_L,dist_R);		//マーカー距離を記録
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <Read_Marker+0x360>)
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <Read_Marker+0x364>)
 8003602:	ed93 7a00 	vldr	s14, [r3]
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <Read_Marker+0x368>)
 8003608:	edd3 6a00 	vldr	s13, [r3]
 800360c:	eeb0 1a66 	vmov.f32	s2, s13
 8003610:	eef0 0a47 	vmov.f32	s1, s14
 8003614:	eeb0 0a67 	vmov.f32	s0, s15
 8003618:	f000 f876 	bl	8003708 <Marker_Write>
			}
			Buzz_Set(2,50);
 800361c:	2132      	movs	r1, #50	; 0x32
 800361e:	2002      	movs	r0, #2
 8003620:	f7fe fdc4 	bl	80021ac <Buzz_Set>
			marker_state = MK_RIGHT;				//結果は左マーカー
 8003624:	2302      	movs	r3, #2
 8003626:	73bb      	strb	r3, [r7, #14]
 8003628:	e004      	b.n	8003634 <Read_Marker+0x344>
		}
		//両マーカー判定
		else if(cross_flag == 1){
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <Read_Marker+0x344>
			marker_state = MK_CROSS;				//結果は十字交差
 8003630:	2303      	movs	r3, #3
 8003632:	73bb      	strb	r3, [r7, #14]
		}
		cross_flag = 0;								//両マーカーフラグクリア
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e056      	b.n	80036e8 <Read_Marker+0x3f8>
 800363a:	bf00      	nop
 800363c:	f3af 8000 	nop.w
 8003640:	47ae147b 	.word	0x47ae147b
 8003644:	3f847ae1 	.word	0x3f847ae1
 8003648:	47ae147b 	.word	0x47ae147b
 800364c:	3fa47ae1 	.word	0x3fa47ae1
 8003650:	200002c0 	.word	0x200002c0
 8003654:	200002c4 	.word	0x200002c4
 8003658:	200002c8 	.word	0x200002c8
	}

	//両マーカー処理
	else if( (Get_MarkerState_L() == MK_LEFT) && (Get_MarkerState_R() == MK_RIGHT) ){
 800365c:	f7fe fd8e 	bl	800217c <Get_MarkerState_L>
 8003660:	4603      	mov	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d140      	bne.n	80036e8 <Read_Marker+0x3f8>
 8003666:	f7fe fd95 	bl	8002194 <Get_MarkerState_R>
 800366a:	4603      	mov	r3, r0
 800366c:	2b02      	cmp	r3, #2
 800366e:	d13b      	bne.n	80036e8 <Read_Marker+0x3f8>
		dist_C = Get_Dist();      										// 現在距離代入
 8003670:	f7fe fd5c 	bl	800212c <Get_Dist>
 8003674:	eef0 7a40 	vmov.f32	s15, s0
 8003678:	4b21      	ldr	r3, [pc, #132]	; (8003700 <Read_Marker+0x410>)
 800367a:	edc3 7a00 	vstr	s15, [r3]
		while(Get_Dist() <= dist_C + 0.01){								// ＋1cm走行
 800367e:	e002      	b.n	8003686 <Read_Marker+0x396>
			HAL_Delay(1);
 8003680:	2001      	movs	r0, #1
 8003682:	f001 fa6b 	bl	8004b5c <HAL_Delay>
		while(Get_Dist() <= dist_C + 0.01){								// ＋1cm走行
 8003686:	f7fe fd51 	bl	800212c <Get_Dist>
 800368a:	ee10 3a10 	vmov	r3, s0
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc ff5a 	bl	8000548 <__aeabi_f2d>
 8003694:	4604      	mov	r4, r0
 8003696:	460d      	mov	r5, r1
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <Read_Marker+0x410>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc ff53 	bl	8000548 <__aeabi_f2d>
 80036a2:	a315      	add	r3, pc, #84	; (adr r3, 80036f8 <Read_Marker+0x408>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fc fdf0 	bl	800028c <__adddf3>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fd fa1c 	bl	8000af0 <__aeabi_dcmple>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e0      	bne.n	8003680 <Read_Marker+0x390>
		}
		if(Get_MarkerState_L() == MK_LEFT ){ cross_flag = 1; }		// 両マーカー判定！
 80036be:	f7fe fd5d 	bl	800217c <Get_MarkerState_L>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <Read_Marker+0x3dc>
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
		if(Get_MarkerState_R() == MK_RIGHT){ cross_flag = 1; }		// 両マーカー判定！
 80036cc:	f7fe fd62 	bl	8002194 <Get_MarkerState_R>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d101      	bne.n	80036da <Read_Marker+0x3ea>
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]

		//両マーカー確定
		if( cross_flag == 1){
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <Read_Marker+0x3f4>
			marker_state = MK_CROSS;				//結果は十字交差
 80036e0:	2303      	movs	r3, #3
 80036e2:	73bb      	strb	r3, [r7, #14]
		}

		cross_flag = 0;								//両マーカーフラグクリア
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
	}

	return marker_state;
 80036e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bdb0      	pop	{r4, r5, r7, pc}
 80036f2:	bf00      	nop
 80036f4:	f3af 8000 	nop.w
 80036f8:	47ae147b 	.word	0x47ae147b
 80036fc:	3f847ae1 	.word	0x3f847ae1
 8003700:	200002c0 	.word	0x200002c0
 8003704:	00000000 	.word	0x00000000

08003708 <Marker_Write>:

/* ---------------------------------------------------------------
	マーカー位置情報記録関数
--------------------------------------------------------------- */
void Marker_Write(float dist_c, float dist_l, float dist_r){
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003712:	edc7 0a02 	vstr	s1, [r7, #8]
 8003716:	ed87 1a01 	vstr	s2, [r7, #4]

	++marker_cnt;									//区画数インクリメント
 800371a:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <Marker_Write+0xd0>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <Marker_Write+0xd0>)
 8003724:	701a      	strb	r2, [r3, #0]
	Parcel_map[marker_cnt].mk_dist_C = dist_c;		//区画情報・距離代入
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <Marker_Write+0xd0>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <Marker_Write+0xd4>)
 800372e:	460b      	mov	r3, r1
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	601a      	str	r2, [r3, #0]
	Parcel_map[marker_cnt].mk_dist_L = dist_l;		//区画情報・左輪距離代入
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <Marker_Write+0xd0>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	4a26      	ldr	r2, [pc, #152]	; (80037dc <Marker_Write+0xd4>)
 8003744:	460b      	mov	r3, r1
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	601a      	str	r2, [r3, #0]
	Parcel_map[marker_cnt].mk_dist_R = dist_r;		//区画情報・右輪距離代入
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <Marker_Write+0xd0>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <Marker_Write+0xd4>)
 800375c:	460b      	mov	r3, r1
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	3308      	adds	r3, #8
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	601a      	str	r2, [r3, #0]

	// さっきとのマーカー距離判定  距離が短すぎるときはカウントしない
	if(Parcel_map[marker_cnt].mk_dist_C - Parcel_map[marker_cnt - 1].mk_dist_C <= MK_ERROR_DIST){
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <Marker_Write+0xd0>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <Marker_Write+0xd4>)
 8003774:	460b      	mov	r3, r1
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <Marker_Write+0xd0>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	1e5a      	subs	r2, r3, #1
 8003788:	4914      	ldr	r1, [pc, #80]	; (80037dc <Marker_Write+0xd4>)
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800379c:	ee17 0a90 	vmov	r0, s15
 80037a0:	f7fc fed2 	bl	8000548 <__aeabi_f2d>
 80037a4:	a30a      	add	r3, pc, #40	; (adr r3, 80037d0 <Marker_Write+0xc8>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f7fd f9a1 	bl	8000af0 <__aeabi_dcmple>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d100      	bne.n	80037b6 <Marker_Write+0xae>
		--marker_cnt;		//区間処理をおこなわないので区間指標をデクリメント

	}
}
 80037b4:	e005      	b.n	80037c2 <Marker_Write+0xba>
		--marker_cnt;		//区間処理をおこなわないので区間指標をデクリメント
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <Marker_Write+0xd0>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <Marker_Write+0xd0>)
 80037c0:	701a      	strb	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w
 80037d0:	4189374c 	.word	0x4189374c
 80037d4:	3fa0e560 	.word	0x3fa0e560
 80037d8:	200002bc 	.word	0x200002bc
 80037dc:	200005fc 	.word	0x200005fc

080037e0 <Search_Run>:

/* ---------------------------------------------------------------
	探索走行の関数
--------------------------------------------------------------- */
void Search_Run(void){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0

	//探索走行の加速度・速度の指示
	Acc_Set(accel);
 80037e4:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <Search_Run+0x78>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	eeb0 0a67 	vmov.f32	s0, s15
 80037ee:	f7fe fc7d 	bl	80020ec <Acc_Set>
	Vel_Set(search_vel);
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <Search_Run+0x7c>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	eeb0 0a67 	vmov.f32	s0, s15
 80037fc:	f7fe fc86 	bl	800210c <Vel_Set>

	//ライントレース開始
	Servo_Enable();
 8003800:	f7fe fc4c 	bl	800209c <Servo_Enable>

	//スタートマーカ通過
	while(Read_Marker(SEARCH) != MK_RIGHT){
 8003804:	e002      	b.n	800380c <Search_Run+0x2c>
		//Battery_LimiterVoltage();	//電源監視
		//LineOut_Cheker();			//ラインアウト監視
		HAL_Delay(10);
 8003806:	200a      	movs	r0, #10
 8003808:	f001 f9a8 	bl	8004b5c <HAL_Delay>
	while(Read_Marker(SEARCH) != MK_RIGHT){
 800380c:	2001      	movs	r0, #1
 800380e:	f7ff fd6f 	bl	80032f0 <Read_Marker>
 8003812:	4603      	mov	r3, r0
 8003814:	2b02      	cmp	r3, #2
 8003816:	d1f6      	bne.n	8003806 <Search_Run+0x26>
	}

	//ゴールマーカー通過
	while(Read_Marker(SEARCH) != MK_RIGHT){
 8003818:	e002      	b.n	8003820 <Search_Run+0x40>
		//Battery_LimiterVoltage();	//電源監視
		//LineOut_Cheker();			//ラインアウト監視
		HAL_Delay(10);
 800381a:	200a      	movs	r0, #10
 800381c:	f001 f99e 	bl	8004b5c <HAL_Delay>
	while(Read_Marker(SEARCH) != MK_RIGHT){
 8003820:	2001      	movs	r0, #1
 8003822:	f7ff fd65 	bl	80032f0 <Read_Marker>
 8003826:	4603      	mov	r3, r0
 8003828:	2b02      	cmp	r3, #2
 800382a:	d1f6      	bne.n	800381a <Search_Run+0x3a>
	}

	HAL_Delay(200);
 800382c:	20c8      	movs	r0, #200	; 0xc8
 800382e:	f001 f995 	bl	8004b5c <HAL_Delay>
	Acc_Set(accel);
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <Search_Run+0x78>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	eeb0 0a67 	vmov.f32	s0, s15
 800383c:	f7fe fc56 	bl	80020ec <Acc_Set>
	Vel_Set(0.0f);
 8003840:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003860 <Search_Run+0x80>
 8003844:	f7fe fc62 	bl	800210c <Vel_Set>
	HAL_Delay(2000);
 8003848:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800384c:	f001 f986 	bl	8004b5c <HAL_Delay>
	Servo_Disable();
 8003850:	f7fe fc34 	bl	80020bc <Servo_Disable>

}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000000 	.word	0x20000000
 800385c:	20000004 	.word	0x20000004
	...

08003868 <Make_DriveCom>:

/* ---------------------------------------------------------------
	コース解析，二次走行コマンド作成関数
--------------------------------------------------------------- */
void Make_DriveCom(uint8_t goal_cnt){
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]

	float parcel_dist_C = 0.0f;
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
	float parcel_dist_L = 0.0f;
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
	float parcel_dist_R = 0.0f;
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
	uint8_t parcel_cnt = 1; 			//スタート区画以降の区画情報を作る
 8003884:	2301      	movs	r3, #1
 8003886:	75fb      	strb	r3, [r7, #23]

	//区画ログの中で角速度を解析し区画速度を決定する
	while( parcel_cnt < goal_cnt ){		//区画数はマーカの数-1
 8003888:	e1d0      	b.n	8003c2c <Make_DriveCom+0x3c4>

		//区間の旋回半径計算
		parcel_dist_C = Parcel_map[parcel_cnt + 1].mk_dist_C - Parcel_map[parcel_cnt].mk_dist_C;	//車体中心の区間走行距離
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	49cc      	ldr	r1, [pc, #816]	; (8003bc0 <Make_DriveCom+0x358>)
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	ed93 7a00 	vldr	s14, [r3]
 800389e:	7dfa      	ldrb	r2, [r7, #23]
 80038a0:	49c7      	ldr	r1, [pc, #796]	; (8003bc0 <Make_DriveCom+0x358>)
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b4:	edc7 7a04 	vstr	s15, [r7, #16]
		parcel_dist_L = Parcel_map[parcel_cnt + 1].mk_dist_L - Parcel_map[parcel_cnt].mk_dist_L;	//左輪の区間走行距離
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	49c0      	ldr	r1, [pc, #768]	; (8003bc0 <Make_DriveCom+0x358>)
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	3304      	adds	r3, #4
 80038ca:	ed93 7a00 	vldr	s14, [r3]
 80038ce:	7dfa      	ldrb	r2, [r7, #23]
 80038d0:	49bb      	ldr	r1, [pc, #748]	; (8003bc0 <Make_DriveCom+0x358>)
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3304      	adds	r3, #4
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e6:	edc7 7a03 	vstr	s15, [r7, #12]
		parcel_dist_R = Parcel_map[parcel_cnt + 1].mk_dist_R - Parcel_map[parcel_cnt].mk_dist_R;	//右輪の区間走行距離
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	49b4      	ldr	r1, [pc, #720]	; (8003bc0 <Make_DriveCom+0x358>)
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3308      	adds	r3, #8
 80038fc:	ed93 7a00 	vldr	s14, [r3]
 8003900:	7dfa      	ldrb	r2, [r7, #23]
 8003902:	49af      	ldr	r1, [pc, #700]	; (8003bc0 <Make_DriveCom+0x358>)
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3308      	adds	r3, #8
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003918:	edc7 7a02 	vstr	s15, [r7, #8]

		Parcel_map[parcel_cnt].corner_R = (float)TRED * parcel_dist_C / (parcel_dist_L - parcel_dist_R);
 800391c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003920:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8003bc4 <Make_DriveCom+0x35c>
 8003924:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003928:	ed97 7a03 	vldr	s14, [r7, #12]
 800392c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003934:	7dfa      	ldrb	r2, [r7, #23]
 8003936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393a:	49a1      	ldr	r1, [pc, #644]	; (8003bc0 <Make_DriveCom+0x358>)
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3310      	adds	r3, #16
 8003948:	edc3 7a00 	vstr	s15, [r3]
		Parcel_map[parcel_cnt].corner_R = ABS(Parcel_map[parcel_cnt].corner_R);
 800394c:	7dfa      	ldrb	r2, [r7, #23]
 800394e:	499c      	ldr	r1, [pc, #624]	; (8003bc0 <Make_DriveCom+0x358>)
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3310      	adds	r3, #16
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	d50c      	bpl.n	8003984 <Make_DriveCom+0x11c>
 800396a:	7dfa      	ldrb	r2, [r7, #23]
 800396c:	4994      	ldr	r1, [pc, #592]	; (8003bc0 <Make_DriveCom+0x358>)
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3310      	adds	r3, #16
 800397a:	edd3 7a00 	vldr	s15, [r3]
 800397e:	eef1 7a67 	vneg.f32	s15, s15
 8003982:	e009      	b.n	8003998 <Make_DriveCom+0x130>
 8003984:	7dfa      	ldrb	r2, [r7, #23]
 8003986:	498e      	ldr	r1, [pc, #568]	; (8003bc0 <Make_DriveCom+0x358>)
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	3310      	adds	r3, #16
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	7dfa      	ldrb	r2, [r7, #23]
 800399a:	4989      	ldr	r1, [pc, #548]	; (8003bc0 <Make_DriveCom+0x358>)
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	3310      	adds	r3, #16
 80039a8:	edc3 7a00 	vstr	s15, [r3]

		//旋回半径より区画速度を決定する
		if(Parcel_map[parcel_cnt].corner_R <= 0.1f ){
 80039ac:	7dfa      	ldrb	r2, [r7, #23]
 80039ae:	4984      	ldr	r1, [pc, #528]	; (8003bc0 <Make_DriveCom+0x358>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3310      	adds	r3, #16
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003bc8 <Make_DriveCom+0x360>
 80039c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039cc:	d80b      	bhi.n	80039e6 <Make_DriveCom+0x17e>
			Parcel_map[parcel_cnt].vel_set = drive_vel_min;
 80039ce:	7dfa      	ldrb	r2, [r7, #23]
 80039d0:	4b7e      	ldr	r3, [pc, #504]	; (8003bcc <Make_DriveCom+0x364>)
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	487a      	ldr	r0, [pc, #488]	; (8003bc0 <Make_DriveCom+0x358>)
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4403      	add	r3, r0
 80039e0:	330c      	adds	r3, #12
 80039e2:	6019      	str	r1, [r3, #0]
 80039e4:	e109      	b.n	8003bfa <Make_DriveCom+0x392>
		}
		else if(Parcel_map[parcel_cnt].corner_R >= 0.1f && Parcel_map[parcel_cnt].corner_R < 0.15f){
 80039e6:	7dfa      	ldrb	r2, [r7, #23]
 80039e8:	4975      	ldr	r1, [pc, #468]	; (8003bc0 <Make_DriveCom+0x358>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3310      	adds	r3, #16
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003bc8 <Make_DriveCom+0x360>
 80039fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a06:	db1c      	blt.n	8003a42 <Make_DriveCom+0x1da>
 8003a08:	7dfa      	ldrb	r2, [r7, #23]
 8003a0a:	496d      	ldr	r1, [pc, #436]	; (8003bc0 <Make_DriveCom+0x358>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3310      	adds	r3, #16
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8003bd0 <Make_DriveCom+0x368>
 8003a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a28:	d50b      	bpl.n	8003a42 <Make_DriveCom+0x1da>
			Parcel_map[parcel_cnt].vel_set = drive_vel_min;
 8003a2a:	7dfa      	ldrb	r2, [r7, #23]
 8003a2c:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <Make_DriveCom+0x364>)
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	4863      	ldr	r0, [pc, #396]	; (8003bc0 <Make_DriveCom+0x358>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4403      	add	r3, r0
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	6019      	str	r1, [r3, #0]
 8003a40:	e0db      	b.n	8003bfa <Make_DriveCom+0x392>
		}
		else if(Parcel_map[parcel_cnt].corner_R >= 0.15f && Parcel_map[parcel_cnt].corner_R < 0.2f){
 8003a42:	7dfa      	ldrb	r2, [r7, #23]
 8003a44:	495e      	ldr	r1, [pc, #376]	; (8003bc0 <Make_DriveCom+0x358>)
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3310      	adds	r3, #16
 8003a52:	edd3 7a00 	vldr	s15, [r3]
 8003a56:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003bd0 <Make_DriveCom+0x368>
 8003a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	db22      	blt.n	8003aaa <Make_DriveCom+0x242>
 8003a64:	7dfa      	ldrb	r2, [r7, #23]
 8003a66:	4956      	ldr	r1, [pc, #344]	; (8003bc0 <Make_DriveCom+0x358>)
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3310      	adds	r3, #16
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003bd4 <Make_DriveCom+0x36c>
 8003a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a84:	d511      	bpl.n	8003aaa <Make_DriveCom+0x242>
			Parcel_map[parcel_cnt].vel_set = drive_vel_min + 0.1f;
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <Make_DriveCom+0x364>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	7dfa      	ldrb	r2, [r7, #23]
 8003a8e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003bc8 <Make_DriveCom+0x360>
 8003a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a96:	494a      	ldr	r1, [pc, #296]	; (8003bc0 <Make_DriveCom+0x358>)
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	edc3 7a00 	vstr	s15, [r3]
 8003aa8:	e0a7      	b.n	8003bfa <Make_DriveCom+0x392>
		}
		else if(Parcel_map[parcel_cnt].corner_R >= 0.2f && Parcel_map[parcel_cnt].corner_R < 0.4f){
 8003aaa:	7dfa      	ldrb	r2, [r7, #23]
 8003aac:	4944      	ldr	r1, [pc, #272]	; (8003bc0 <Make_DriveCom+0x358>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3310      	adds	r3, #16
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003bd4 <Make_DriveCom+0x36c>
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	db1c      	blt.n	8003b06 <Make_DriveCom+0x29e>
 8003acc:	7dfa      	ldrb	r2, [r7, #23]
 8003ace:	493c      	ldr	r1, [pc, #240]	; (8003bc0 <Make_DriveCom+0x358>)
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	3310      	adds	r3, #16
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003bd8 <Make_DriveCom+0x370>
 8003ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aec:	d50b      	bpl.n	8003b06 <Make_DriveCom+0x29e>
			//Parcel_map[parcel_cnt].vel_set = drive_vel_min + 0.2f;
			Parcel_map[parcel_cnt].vel_set = drive_vel_max;
 8003aee:	7dfa      	ldrb	r2, [r7, #23]
 8003af0:	4b3a      	ldr	r3, [pc, #232]	; (8003bdc <Make_DriveCom+0x374>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	4832      	ldr	r0, [pc, #200]	; (8003bc0 <Make_DriveCom+0x358>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4403      	add	r3, r0
 8003b00:	330c      	adds	r3, #12
 8003b02:	6019      	str	r1, [r3, #0]
 8003b04:	e079      	b.n	8003bfa <Make_DriveCom+0x392>
		}
		else if(Parcel_map[parcel_cnt].corner_R >= 0.4f && Parcel_map[parcel_cnt].corner_R < 0.7f){
 8003b06:	7dfa      	ldrb	r2, [r7, #23]
 8003b08:	492d      	ldr	r1, [pc, #180]	; (8003bc0 <Make_DriveCom+0x358>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	3310      	adds	r3, #16
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003bd8 <Make_DriveCom+0x370>
 8003b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	db1c      	blt.n	8003b62 <Make_DriveCom+0x2fa>
 8003b28:	7dfa      	ldrb	r2, [r7, #23]
 8003b2a:	4925      	ldr	r1, [pc, #148]	; (8003bc0 <Make_DriveCom+0x358>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3310      	adds	r3, #16
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003be0 <Make_DriveCom+0x378>
 8003b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	d50b      	bpl.n	8003b62 <Make_DriveCom+0x2fa>
			//Parcel_map[parcel_cnt].vel_set = drive_vel_min + 0.3f;
			Parcel_map[parcel_cnt].vel_set = drive_vel_max;
 8003b4a:	7dfa      	ldrb	r2, [r7, #23]
 8003b4c:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <Make_DriveCom+0x374>)
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <Make_DriveCom+0x358>)
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4403      	add	r3, r0
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	6019      	str	r1, [r3, #0]
 8003b60:	e04b      	b.n	8003bfa <Make_DriveCom+0x392>
		}
		else if(Parcel_map[parcel_cnt].corner_R >= 0.7f && Parcel_map[parcel_cnt].corner_R < 1.0f){
 8003b62:	7dfa      	ldrb	r2, [r7, #23]
 8003b64:	4916      	ldr	r1, [pc, #88]	; (8003bc0 <Make_DriveCom+0x358>)
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3310      	adds	r3, #16
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003be0 <Make_DriveCom+0x378>
 8003b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	db2f      	blt.n	8003be4 <Make_DriveCom+0x37c>
 8003b84:	7dfa      	ldrb	r2, [r7, #23]
 8003b86:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <Make_DriveCom+0x358>)
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3310      	adds	r3, #16
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba4:	d51e      	bpl.n	8003be4 <Make_DriveCom+0x37c>
			//Parcel_map[parcel_cnt].vel_set = drive_vel_min + 0.4f;
			Parcel_map[parcel_cnt].vel_set = drive_vel_max;
 8003ba6:	7dfa      	ldrb	r2, [r7, #23]
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <Make_DriveCom+0x374>)
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <Make_DriveCom+0x358>)
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4403      	add	r3, r0
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6019      	str	r1, [r3, #0]
 8003bbc:	e01d      	b.n	8003bfa <Make_DriveCom+0x392>
 8003bbe:	bf00      	nop
 8003bc0:	200005fc 	.word	0x200005fc
 8003bc4:	3da7ef9e 	.word	0x3da7ef9e
 8003bc8:	3dcccccd 	.word	0x3dcccccd
 8003bcc:	20000008 	.word	0x20000008
 8003bd0:	3e19999a 	.word	0x3e19999a
 8003bd4:	3e4ccccd 	.word	0x3e4ccccd
 8003bd8:	3ecccccd 	.word	0x3ecccccd
 8003bdc:	2000000c 	.word	0x2000000c
 8003be0:	3f333333 	.word	0x3f333333
		}
		else{
			Parcel_map[parcel_cnt].vel_set = drive_vel_max;
 8003be4:	7dfa      	ldrb	r2, [r7, #23]
 8003be6:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <Make_DriveCom+0x3f8>)
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	481e      	ldr	r0, [pc, #120]	; (8003c64 <Make_DriveCom+0x3fc>)
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4403      	add	r3, r0
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	6019      	str	r1, [r3, #0]
		}

		//短い直線フィルタ
		if(parcel_dist_C <= 0.33){
 8003bfa:	6938      	ldr	r0, [r7, #16]
 8003bfc:	f7fc fca4 	bl	8000548 <__aeabi_f2d>
 8003c00:	a315      	add	r3, pc, #84	; (adr r3, 8003c58 <Make_DriveCom+0x3f0>)
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f7fc ff73 	bl	8000af0 <__aeabi_dcmple>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <Make_DriveCom+0x3be>
			Parcel_map[parcel_cnt].vel_set = drive_vel_min;
 8003c10:	7dfa      	ldrb	r2, [r7, #23]
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <Make_DriveCom+0x400>)
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	4813      	ldr	r0, [pc, #76]	; (8003c64 <Make_DriveCom+0x3fc>)
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4403      	add	r3, r0
 8003c22:	330c      	adds	r3, #12
 8003c24:	6019      	str	r1, [r3, #0]
		}
		++parcel_cnt;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
	while( parcel_cnt < goal_cnt ){		//区画数はマーカの数-1
 8003c2c:	7dfa      	ldrb	r2, [r7, #23]
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	f4ff ae2a 	bcc.w	800388a <Make_DriveCom+0x22>
	}

	//最終区画の走行速度設定
	Parcel_map[goal_cnt].vel_set = drive_vel_min;
 8003c36:	79fa      	ldrb	r2, [r7, #7]
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <Make_DriveCom+0x400>)
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	4809      	ldr	r0, [pc, #36]	; (8003c64 <Make_DriveCom+0x3fc>)
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4403      	add	r3, r0
 8003c48:	330c      	adds	r3, #12
 8003c4a:	6019      	str	r1, [r3, #0]

}
 8003c4c:	bf00      	nop
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	f3af 8000 	nop.w
 8003c58:	51eb851f 	.word	0x51eb851f
 8003c5c:	3fd51eb8 	.word	0x3fd51eb8
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	200005fc 	.word	0x200005fc
 8003c68:	20000008 	.word	0x20000008

08003c6c <Command_Run>:

/* ---------------------------------------------------------------
	指令走行・・・二次走行関数
--------------------------------------------------------------- */
void Command_Run(uint8_t goal_num){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	ed2d 8b02 	vpush	{d8}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]

	//コマンド生成
	Make_DriveCom( goal_num );
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fdf3 	bl	8003868 <Make_DriveCom>
		}
	}
*/

	//スタート待ち
	while(SW2_ONOFF() != SW_ON){
 8003c82:	e006      	b.n	8003c92 <Command_Run+0x26>
		LED_TOGGLE();
 8003c84:	2108      	movs	r1, #8
 8003c86:	48be      	ldr	r0, [pc, #760]	; (8003f80 <Command_Run+0x314>)
 8003c88:	f002 fb90 	bl	80063ac <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8003c8c:	20c8      	movs	r0, #200	; 0xc8
 8003c8e:	f000 ff65 	bl	8004b5c <HAL_Delay>
	while(SW2_ONOFF() != SW_ON){
 8003c92:	2102      	movs	r1, #2
 8003c94:	48bb      	ldr	r0, [pc, #748]	; (8003f84 <Command_Run+0x318>)
 8003c96:	f002 fb59 	bl	800634c <HAL_GPIO_ReadPin>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f1      	bne.n	8003c84 <Command_Run+0x18>
	}

	LED_ON();
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	2108      	movs	r1, #8
 8003ca4:	48b6      	ldr	r0, [pc, #728]	; (8003f80 <Command_Run+0x314>)
 8003ca6:	f002 fb69 	bl	800637c <HAL_GPIO_WritePin>
	Buzz_Set(2,50);
 8003caa:	2132      	movs	r1, #50	; 0x32
 8003cac:	2002      	movs	r0, #2
 8003cae:	f7fe fa7d 	bl	80021ac <Buzz_Set>
	HAL_Delay(1000);
 8003cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cb6:	f000 ff51 	bl	8004b5c <HAL_Delay>

	//ライントレース開始
	LED_OFF();
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	48b0      	ldr	r0, [pc, #704]	; (8003f80 <Command_Run+0x314>)
 8003cc0:	f002 fb5c 	bl	800637c <HAL_GPIO_WritePin>
	Acc_Set(accel);
 8003cc4:	4bb0      	ldr	r3, [pc, #704]	; (8003f88 <Command_Run+0x31c>)
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	eeb0 0a67 	vmov.f32	s0, s15
 8003cce:	f7fe fa0d 	bl	80020ec <Acc_Set>
	Vel_Set(drive_vel_min);
 8003cd2:	4bae      	ldr	r3, [pc, #696]	; (8003f8c <Command_Run+0x320>)
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cdc:	f7fe fa16 	bl	800210c <Vel_Set>
	Servo_Enable();
 8003ce0:	f7fe f9dc 	bl	800209c <Servo_Enable>

	//スタートマーカ通過
	while(Read_Marker(READ) != MK_RIGHT){HAL_Delay(10);}
 8003ce4:	e002      	b.n	8003cec <Command_Run+0x80>
 8003ce6:	200a      	movs	r0, #10
 8003ce8:	f000 ff38 	bl	8004b5c <HAL_Delay>
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7ff faff 	bl	80032f0 <Read_Marker>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d1f6      	bne.n	8003ce6 <Command_Run+0x7a>

	//速度コマンド走行
	uint8_t i = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	77fb      	strb	r3, [r7, #31]
	float parcel_dist = 0.0f;
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
	float temp_dist = 0.0f;
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
	float local_dist = 0.0f;
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
	float decel_dist = 0.0f;
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

	for(i = 1; i <= goal_num - 2; ++i){
 8003d14:	2301      	movs	r3, #1
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e0fd      	b.n	8003f16 <Command_Run+0x2aa>

		//区間距離の長さを計算
		parcel_dist = Parcel_map[i + 1].mk_dist_C - Parcel_map[i].mk_dist_C;
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	499c      	ldr	r1, [pc, #624]	; (8003f90 <Command_Run+0x324>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	ed93 7a00 	vldr	s14, [r3]
 8003d2e:	7ffa      	ldrb	r2, [r7, #31]
 8003d30:	4997      	ldr	r1, [pc, #604]	; (8003f90 <Command_Run+0x324>)
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d44:	edc7 7a06 	vstr	s15, [r7, #24]
		temp_dist = Get_Dist();
 8003d48:	f7fe f9f0 	bl	800212c <Get_Dist>
 8003d4c:	ed87 0a05 	vstr	s0, [r7, #20]
		decel_dist = 0.0f;
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
		Vel_Set(Parcel_map[i].vel_set);
 8003d56:	7ffa      	ldrb	r2, [r7, #31]
 8003d58:	498d      	ldr	r1, [pc, #564]	; (8003f90 <Command_Run+0x324>)
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	330c      	adds	r3, #12
 8003d66:	edd3 7a00 	vldr	s15, [r3]
 8003d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6e:	f7fe f9cd 	bl	800210c <Vel_Set>

		//次の区間の方が速いとき
		if(Parcel_map[i].vel_set <= Parcel_map[i+1].vel_set){
 8003d72:	7ffa      	ldrb	r2, [r7, #31]
 8003d74:	4986      	ldr	r1, [pc, #536]	; (8003f90 <Command_Run+0x324>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	330c      	adds	r3, #12
 8003d82:	ed93 7a00 	vldr	s14, [r3]
 8003d86:	7ffb      	ldrb	r3, [r7, #31]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	4981      	ldr	r1, [pc, #516]	; (8003f90 <Command_Run+0x324>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	330c      	adds	r3, #12
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d814      	bhi.n	8003dd0 <Command_Run+0x164>

			while(1){

				//区間ローカル距離演算
				local_dist = Get_Dist() - temp_dist;
 8003da6:	f7fe f9c1 	bl	800212c <Get_Dist>
 8003daa:	eeb0 7a40 	vmov.f32	s14, s0
 8003dae:	edd7 7a05 	vldr	s15, [r7, #20]
 8003db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db6:	edc7 7a04 	vstr	s15, [r7, #16]

				//区間距離を走行してからループ出る
				if(local_dist >= parcel_dist){break;}
 8003dba:	ed97 7a04 	vldr	s14, [r7, #16]
 8003dbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	f280 80a0 	bge.w	8003f0e <Command_Run+0x2a2>
				local_dist = Get_Dist() - temp_dist;
 8003dce:	e7ea      	b.n	8003da6 <Command_Run+0x13a>
			}
		}

		//次の区間が遅い時
		else if(Parcel_map[i].vel_set > Parcel_map[i+1].vel_set){
 8003dd0:	7ffa      	ldrb	r2, [r7, #31]
 8003dd2:	496f      	ldr	r1, [pc, #444]	; (8003f90 <Command_Run+0x324>)
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	330c      	adds	r3, #12
 8003de0:	ed93 7a00 	vldr	s14, [r3]
 8003de4:	7ffb      	ldrb	r3, [r7, #31]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	4969      	ldr	r1, [pc, #420]	; (8003f90 <Command_Run+0x324>)
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	330c      	adds	r3, #12
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e02:	f340 8085 	ble.w	8003f10 <Command_Run+0x2a4>

			while(1){

				//区間ローカル距離演算
				local_dist = Get_Dist() - temp_dist;
 8003e06:	f7fe f991 	bl	800212c <Get_Dist>
 8003e0a:	eeb0 7a40 	vmov.f32	s14, s0
 8003e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e16:	edc7 7a04 	vstr	s15, [r7, #16]

				//減速距離演算
				decel_dist = (Get_Vel() * Get_Vel() - Parcel_map[i+1].vel_set * Parcel_map[i+1].vel_set) / (2.0f * accel);
 8003e1a:	f7fe f995 	bl	8002148 <Get_Vel>
 8003e1e:	eeb0 8a40 	vmov.f32	s16, s0
 8003e22:	f7fe f991 	bl	8002148 <Get_Vel>
 8003e26:	eef0 7a40 	vmov.f32	s15, s0
 8003e2a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	4957      	ldr	r1, [pc, #348]	; (8003f90 <Command_Run+0x324>)
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	330c      	adds	r3, #12
 8003e40:	edd3 6a00 	vldr	s13, [r3]
 8003e44:	7ffb      	ldrb	r3, [r7, #31]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	4951      	ldr	r1, [pc, #324]	; (8003f90 <Command_Run+0x324>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	330c      	adds	r3, #12
 8003e56:	edd3 7a00 	vldr	s15, [r3]
 8003e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e62:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <Command_Run+0x31c>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e70:	edc7 7a03 	vstr	s15, [r7, #12]

				//減速開始距離になったら次の区間速度にしてループ出る
				if(local_dist + decel_dist >= parcel_dist - 0.05f){		//減速開始距離待ち
 8003e74:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e80:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e84:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003f94 <Command_Run+0x328>
 8003e88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e94:	db15      	blt.n	8003ec2 <Command_Run+0x256>
					Vel_Set(Parcel_map[i+1].vel_set);					//減速指令
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	493d      	ldr	r1, [pc, #244]	; (8003f90 <Command_Run+0x324>)
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	edd3 7a00 	vldr	s15, [r3]
 8003eac:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb0:	f7fe f92c 	bl	800210c <Vel_Set>
					break;
 8003eb4:	bf00      	nop
				}
			}

			//左区間切れマーカー待ち
			LED_ON();
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2108      	movs	r1, #8
 8003eba:	4831      	ldr	r0, [pc, #196]	; (8003f80 <Command_Run+0x314>)
 8003ebc:	f002 fa5e 	bl	800637c <HAL_GPIO_WritePin>

			while(Read_Marker(READ) != MK_LEFT){
 8003ec0:	e017      	b.n	8003ef2 <Command_Run+0x286>
				local_dist = Get_Dist() - temp_dist;
 8003ec2:	e7a0      	b.n	8003e06 <Command_Run+0x19a>

				//区間ローカル距離演算
				local_dist = Get_Dist() - temp_dist;
 8003ec4:	f7fe f932 	bl	800212c <Get_Dist>
 8003ec8:	eeb0 7a40 	vmov.f32	s14, s0
 8003ecc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed4:	edc7 7a04 	vstr	s15, [r7, #16]

				//ただし，ローカル走行距離が，区間距離を超えたら強制的に次の区画へ行く
				if(local_dist >= parcel_dist + 0.05f){break;}
 8003ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003edc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003f94 <Command_Run+0x328>
 8003ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ee4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	da06      	bge.n	8003f00 <Command_Run+0x294>
			while(Read_Marker(READ) != MK_LEFT){
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f7ff f9fc 	bl	80032f0 <Read_Marker>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d1e2      	bne.n	8003ec4 <Command_Run+0x258>
 8003efe:	e000      	b.n	8003f02 <Command_Run+0x296>
				if(local_dist >= parcel_dist + 0.05f){break;}
 8003f00:	bf00      	nop
			}

			LED_OFF();
 8003f02:	2200      	movs	r2, #0
 8003f04:	2108      	movs	r1, #8
 8003f06:	481e      	ldr	r0, [pc, #120]	; (8003f80 <Command_Run+0x314>)
 8003f08:	f002 fa38 	bl	800637c <HAL_GPIO_WritePin>
 8003f0c:	e000      	b.n	8003f10 <Command_Run+0x2a4>
				if(local_dist >= parcel_dist){break;}
 8003f0e:	bf00      	nop
	for(i = 1; i <= goal_num - 2; ++i){
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	3301      	adds	r3, #1
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	1e5a      	subs	r2, r3, #1
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	f73f aefc 	bgt.w	8003d1a <Command_Run+0xae>
		}

	}

	//ゴールマーカー通過
	LED_ON();
 8003f22:	2201      	movs	r2, #1
 8003f24:	2108      	movs	r1, #8
 8003f26:	4816      	ldr	r0, [pc, #88]	; (8003f80 <Command_Run+0x314>)
 8003f28:	f002 fa28 	bl	800637c <HAL_GPIO_WritePin>
	while(Read_Marker(READ) != MK_RIGHT){HAL_Delay(10);}
 8003f2c:	e002      	b.n	8003f34 <Command_Run+0x2c8>
 8003f2e:	200a      	movs	r0, #10
 8003f30:	f000 fe14 	bl	8004b5c <HAL_Delay>
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7ff f9db 	bl	80032f0 <Read_Marker>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d1f6      	bne.n	8003f2e <Command_Run+0x2c2>
	LED_OFF();
 8003f40:	2200      	movs	r2, #0
 8003f42:	2108      	movs	r1, #8
 8003f44:	480e      	ldr	r0, [pc, #56]	; (8003f80 <Command_Run+0x314>)
 8003f46:	f002 fa19 	bl	800637c <HAL_GPIO_WritePin>

	HAL_Delay(200);
 8003f4a:	20c8      	movs	r0, #200	; 0xc8
 8003f4c:	f000 fe06 	bl	8004b5c <HAL_Delay>
	Acc_Set(accel);
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <Command_Run+0x31c>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5a:	f7fe f8c7 	bl	80020ec <Acc_Set>
	Vel_Set(0.0f);
 8003f5e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003f98 <Command_Run+0x32c>
 8003f62:	f7fe f8d3 	bl	800210c <Vel_Set>
	HAL_Delay(2000);
 8003f66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f6a:	f000 fdf7 	bl	8004b5c <HAL_Delay>
	Servo_Disable();
 8003f6e:	f7fe f8a5 	bl	80020bc <Servo_Disable>

}
 8003f72:	bf00      	nop
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	ecbd 8b02 	vpop	{d8}
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	48000400 	.word	0x48000400
 8003f84:	48001400 	.word	0x48001400
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	200005fc 	.word	0x200005fc
 8003f94:	3d4ccccd 	.word	0x3d4ccccd
 8003f98:	00000000 	.word	0x00000000

08003f9c <Sensor_Initialize>:

/* ---------------------------------------------------------------
	センサADの初期設定と開始の関数
--------------------------------------------------------------- */
void Sensor_Initialize( void )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc1_value,3);
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	4905      	ldr	r1, [pc, #20]	; (8003fb8 <Sensor_Initialize+0x1c>)
 8003fa4:	4805      	ldr	r0, [pc, #20]	; (8003fbc <Sensor_Initialize+0x20>)
 8003fa6:	f000 ffad 	bl	8004f04 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2,(uint32_t *)adc2_value,4);
 8003faa:	2204      	movs	r2, #4
 8003fac:	4904      	ldr	r1, [pc, #16]	; (8003fc0 <Sensor_Initialize+0x24>)
 8003fae:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <Sensor_Initialize+0x28>)
 8003fb0:	f000 ffa8 	bl	8004f04 <HAL_ADC_Start_DMA>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200002cc 	.word	0x200002cc
 8003fbc:	20000340 	.word	0x20000340
 8003fc0:	200002d8 	.word	0x200002d8
 8003fc4:	200002f0 	.word	0x200002f0

08003fc8 <Sensor_GetValue_R2>:

/* ---------------------------------------------------------------
	ラインセンサのAD値を取得する関数
--------------------------------------------------------------- */
uint16_t Sensor_GetValue_R2( void ){ return( adc1_value[0] ); }
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <Sensor_GetValue_R2+0x14>)
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200002cc 	.word	0x200002cc

08003fe0 <Sensor_GetValue_R1>:
uint16_t Sensor_GetValue_R1( void ){ return( adc2_value[0] ); }
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <Sensor_GetValue_R1+0x14>)
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200002d8 	.word	0x200002d8

08003ff8 <Sensor_GetValue_L2>:
uint16_t Sensor_GetValue_L2( void ){ return( adc2_value[2] ); }
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <Sensor_GetValue_L2+0x14>)
 8003ffe:	889b      	ldrh	r3, [r3, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	200002d8 	.word	0x200002d8

08004010 <Sensor_GetValue_L1>:
uint16_t Sensor_GetValue_L1( void ){ return( adc2_value[1] ); }
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <Sensor_GetValue_L1+0x14>)
 8004016:	885b      	ldrh	r3, [r3, #2]
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	200002d8 	.word	0x200002d8

08004028 <Sensor_GetValue_ML>:
uint16_t Sensor_GetValue_ML( void ){ return( adc1_value[2] ); }
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <Sensor_GetValue_ML+0x14>)
 800402e:	889b      	ldrh	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200002cc 	.word	0x200002cc

08004040 <Sensor_GetValue_MR>:
uint16_t Sensor_GetValue_MR( void ){ return( adc1_value[1] ); }
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <Sensor_GetValue_MR+0x14>)
 8004046:	885b      	ldrh	r3, [r3, #2]
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	200002cc 	.word	0x200002cc

08004058 <Sensor_GetValue_Battery>:

/* ---------------------------------------------------------------
	バッテリのAD値を取得する関数
--------------------------------------------------------------- */
uint16_t Sensor_GetValue_Battery( void ){return( adc2_value[3] );}
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <Sensor_GetValue_Battery+0x14>)
 800405e:	88db      	ldrh	r3, [r3, #6]
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	200002d8 	.word	0x200002d8

08004070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_MspInit+0x44>)
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	4a0e      	ldr	r2, [pc, #56]	; (80040b4 <HAL_MspInit+0x44>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6193      	str	r3, [r2, #24]
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <HAL_MspInit+0x44>)
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_MspInit+0x44>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <HAL_MspInit+0x44>)
 8004094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004098:	61d3      	str	r3, [r2, #28]
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_MspInit+0x44>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000

080040b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ca:	e7fe      	b.n	80040ca <HardFault_Handler+0x4>

080040cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <MemManage_Handler+0x4>

080040d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d6:	e7fe      	b.n	80040d6 <BusFault_Handler+0x4>

080040d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <UsageFault_Handler+0x4>

080040de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f0:	f000 fd14 	bl	8004b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  Interrupt_SysTick();
 80040f4:	f7fd f9ac 	bl	8001450 <Interrupt_SysTick>

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f8:	bf00      	nop
 80040fa:	bd80      	pop	{r7, pc}

080040fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004100:	4802      	ldr	r0, [pc, #8]	; (800410c <DMA1_Channel1_IRQHandler+0x10>)
 8004102:	f001 feb3 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000390 	.word	0x20000390

08004110 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <DMA1_Channel2_IRQHandler+0x10>)
 8004116:	f001 fea9 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200003d4 	.word	0x200003d4

08004124 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004128:	4802      	ldr	r0, [pc, #8]	; (8004134 <DMA1_Channel3_IRQHandler+0x10>)
 800412a:	f001 fe9f 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	200005b8 	.word	0x200005b8

08004138 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800413c:	4802      	ldr	r0, [pc, #8]	; (8004148 <DMA1_Channel4_IRQHandler+0x10>)
 800413e:	f001 fe95 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000528 	.word	0x20000528

0800414c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004150:	4802      	ldr	r0, [pc, #8]	; (800415c <DMA1_Channel6_IRQHandler+0x10>)
 8004152:	f001 fe8b 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	2000169c 	.word	0x2000169c

08004160 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <DMA1_Channel7_IRQHandler+0x10>)
 8004166:	f001 fe81 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200016e0 	.word	0x200016e0

08004174 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <I2C1_EV_IRQHandler+0x10>)
 800417a:	f002 f9c0 	bl	80064fe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	2000056c 	.word	0x2000056c

08004188 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <USART2_IRQHandler+0x10>)
 800418e:	f004 fe11 	bl	8008db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20001724 	.word	0x20001724

0800419c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
	return 1;
 80041a0:	2301      	movs	r3, #1
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <_kill>:

int _kill(int pid, int sig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041b6:	f005 fb61 	bl	800987c <__errno>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2216      	movs	r2, #22
 80041be:	601a      	str	r2, [r3, #0]
	return -1;
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_exit>:

void _exit (int status)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041d4:	f04f 31ff 	mov.w	r1, #4294967295
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ffe7 	bl	80041ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80041de:	e7fe      	b.n	80041de <_exit+0x12>

080041e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e00a      	b.n	8004208 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041f2:	f7fd f925 	bl	8001440 <__io_getchar>
 80041f6:	4601      	mov	r1, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	60ba      	str	r2, [r7, #8]
 80041fe:	b2ca      	uxtb	r2, r1
 8004200:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	dbf0      	blt.n	80041f2 <_read+0x12>
	}

return len;
 8004210:	687b      	ldr	r3, [r7, #4]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e009      	b.n	8004240 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	60ba      	str	r2, [r7, #8]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd f8f5 	bl	8001424 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3301      	adds	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	dbf1      	blt.n	800422c <_write+0x12>
	}
	return len;
 8004248:	687b      	ldr	r3, [r7, #4]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_close>:

int _close(int file)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	return -1;
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800427a:	605a      	str	r2, [r3, #4]
	return 0;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <_isatty>:

int _isatty(int file)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
	return 1;
 8004292:	2301      	movs	r3, #1
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	return 0;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <_sbrk+0x50>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <_sbrk+0x16>
		heap_end = &end;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <_sbrk+0x50>)
 80042ce:	4a10      	ldr	r2, [pc, #64]	; (8004310 <_sbrk+0x54>)
 80042d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <_sbrk+0x50>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <_sbrk+0x50>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	466a      	mov	r2, sp
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d907      	bls.n	80042f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80042e6:	f005 fac9 	bl	800987c <__errno>
 80042ea:	4603      	mov	r3, r0
 80042ec:	220c      	movs	r2, #12
 80042ee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	e006      	b.n	8004304 <_sbrk+0x48>
	}

	heap_end += incr;
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <_sbrk+0x50>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	4a03      	ldr	r2, [pc, #12]	; (800430c <_sbrk+0x50>)
 8004300:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	200002e4 	.word	0x200002e4
 8004310:	200017b8 	.word	0x200017b8

08004314 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <SystemInit+0x28>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	4a07      	ldr	r2, [pc, #28]	; (800433c <SystemInit+0x28>)
 8004320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <SystemInit+0x28>)
 800432a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800432e:	609a      	str	r2, [r3, #8]
#endif
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	; 0x30
 8004344:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	2224      	movs	r2, #36	; 0x24
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f005 fc8b 	bl	8009c6a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004354:	463b      	mov	r3, r7
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800435e:	4b23      	ldr	r3, [pc, #140]	; (80043ec <MX_TIM1_Init+0xac>)
 8004360:	4a23      	ldr	r2, [pc, #140]	; (80043f0 <MX_TIM1_Init+0xb0>)
 8004362:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <MX_TIM1_Init+0xac>)
 8004366:	2200      	movs	r2, #0
 8004368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <MX_TIM1_Init+0xac>)
 800436c:	2200      	movs	r2, #0
 800436e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004370:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <MX_TIM1_Init+0xac>)
 8004372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004376:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <MX_TIM1_Init+0xac>)
 800437a:	2200      	movs	r2, #0
 800437c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <MX_TIM1_Init+0xac>)
 8004380:	2200      	movs	r2, #0
 8004382:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <MX_TIM1_Init+0xac>)
 8004386:	2280      	movs	r2, #128	; 0x80
 8004388:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800438a:	2303      	movs	r3, #3
 800438c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800439e:	2302      	movs	r3, #2
 80043a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043a2:	2301      	movs	r3, #1
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043a6:	2300      	movs	r3, #0
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4619      	mov	r1, r3
 80043b4:	480d      	ldr	r0, [pc, #52]	; (80043ec <MX_TIM1_Init+0xac>)
 80043b6:	f003 fc69 	bl	8007c8c <HAL_TIM_Encoder_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80043c0:	f7fe fbf3 	bl	8002baa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c4:	2300      	movs	r3, #0
 80043c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043d0:	463b      	mov	r3, r7
 80043d2:	4619      	mov	r1, r3
 80043d4:	4805      	ldr	r0, [pc, #20]	; (80043ec <MX_TIM1_Init+0xac>)
 80043d6:	f004 f97f 	bl	80086d8 <HAL_TIMEx_MasterConfigSynchronization>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80043e0:	f7fe fbe3 	bl	8002baa <Error_Handler>
  }

}
 80043e4:	bf00      	nop
 80043e6:	3730      	adds	r7, #48	; 0x30
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200015dc 	.word	0x200015dc
 80043f0:	40012c00 	.word	0x40012c00

080043f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fc31 	bl	8009c6a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004408:	463b      	mov	r3, r7
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8004412:	4b21      	ldr	r3, [pc, #132]	; (8004498 <MX_TIM2_Init+0xa4>)
 8004414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800441a:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <MX_TIM2_Init+0xa4>)
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004420:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <MX_TIM2_Init+0xa4>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <MX_TIM2_Init+0xa4>)
 8004428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800442c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <MX_TIM2_Init+0xa4>)
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <MX_TIM2_Init+0xa4>)
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800443a:	2303      	movs	r3, #3
 800443c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004442:	2301      	movs	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004452:	2301      	movs	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004456:	2300      	movs	r3, #0
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800445e:	f107 030c 	add.w	r3, r7, #12
 8004462:	4619      	mov	r1, r3
 8004464:	480c      	ldr	r0, [pc, #48]	; (8004498 <MX_TIM2_Init+0xa4>)
 8004466:	f003 fc11 	bl	8007c8c <HAL_TIM_Encoder_Init>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004470:	f7fe fb9b 	bl	8002baa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004474:	2300      	movs	r3, #0
 8004476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800447c:	463b      	mov	r3, r7
 800447e:	4619      	mov	r1, r3
 8004480:	4805      	ldr	r0, [pc, #20]	; (8004498 <MX_TIM2_Init+0xa4>)
 8004482:	f004 f929 	bl	80086d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800448c:	f7fe fb8d 	bl	8002baa <Error_Handler>
  }

}
 8004490:	bf00      	nop
 8004492:	3730      	adds	r7, #48	; 0x30
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	2000161c 	.word	0x2000161c

0800449c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b092      	sub	sp, #72	; 0x48
 80044a0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	60da      	str	r2, [r3, #12]
 80044b0:	611a      	str	r2, [r3, #16]
 80044b2:	615a      	str	r2, [r3, #20]
 80044b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044b6:	463b      	mov	r3, r7
 80044b8:	222c      	movs	r2, #44	; 0x2c
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f005 fbd4 	bl	8009c6a <memset>

  htim16.Instance = TIM16;
 80044c2:	4b31      	ldr	r3, [pc, #196]	; (8004588 <MX_TIM16_Init+0xec>)
 80044c4:	4a31      	ldr	r2, [pc, #196]	; (800458c <MX_TIM16_Init+0xf0>)
 80044c6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80044c8:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <MX_TIM16_Init+0xec>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ce:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <MX_TIM16_Init+0xec>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 80044d4:	4b2c      	ldr	r3, [pc, #176]	; (8004588 <MX_TIM16_Init+0xec>)
 80044d6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80044da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044dc:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <MX_TIM16_Init+0xec>)
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <MX_TIM16_Init+0xec>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <MX_TIM16_Init+0xec>)
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80044ee:	4826      	ldr	r0, [pc, #152]	; (8004588 <MX_TIM16_Init+0xec>)
 80044f0:	f003 fb1a 	bl	8007b28 <HAL_TIM_Base_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80044fa:	f7fe fb56 	bl	8002baa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80044fe:	4822      	ldr	r0, [pc, #136]	; (8004588 <MX_TIM16_Init+0xec>)
 8004500:	f003 fb3d 	bl	8007b7e <HAL_TIM_PWM_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800450a:	f7fe fb4e 	bl	8002baa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800450e:	2360      	movs	r3, #96	; 0x60
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004516:	2300      	movs	r3, #0
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800451a:	2300      	movs	r3, #0
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800451e:	2300      	movs	r3, #0
 8004520:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800452a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800452e:	2200      	movs	r2, #0
 8004530:	4619      	mov	r1, r3
 8004532:	4815      	ldr	r0, [pc, #84]	; (8004588 <MX_TIM16_Init+0xec>)
 8004534:	f003 fc74 	bl	8007e20 <HAL_TIM_PWM_ConfigChannel>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800453e:	f7fe fb34 	bl	8002baa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800455a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004560:	2300      	movs	r3, #0
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004564:	463b      	mov	r3, r7
 8004566:	4619      	mov	r1, r3
 8004568:	4807      	ldr	r0, [pc, #28]	; (8004588 <MX_TIM16_Init+0xec>)
 800456a:	f004 f923 	bl	80087b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8004574:	f7fe fb19 	bl	8002baa <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 8004578:	4803      	ldr	r0, [pc, #12]	; (8004588 <MX_TIM16_Init+0xec>)
 800457a:	f000 f929 	bl	80047d0 <HAL_TIM_MspPostInit>

}
 800457e:	bf00      	nop
 8004580:	3748      	adds	r7, #72	; 0x48
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000165c 	.word	0x2000165c
 800458c:	40014400 	.word	0x40014400

08004590 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b092      	sub	sp, #72	; 0x48
 8004594:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	609a      	str	r2, [r3, #8]
 80045a2:	60da      	str	r2, [r3, #12]
 80045a4:	611a      	str	r2, [r3, #16]
 80045a6:	615a      	str	r2, [r3, #20]
 80045a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045aa:	463b      	mov	r3, r7
 80045ac:	222c      	movs	r2, #44	; 0x2c
 80045ae:	2100      	movs	r1, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f005 fb5a 	bl	8009c6a <memset>

  htim17.Instance = TIM17;
 80045b6:	4b31      	ldr	r3, [pc, #196]	; (800467c <MX_TIM17_Init+0xec>)
 80045b8:	4a31      	ldr	r2, [pc, #196]	; (8004680 <MX_TIM17_Init+0xf0>)
 80045ba:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80045bc:	4b2f      	ldr	r3, [pc, #188]	; (800467c <MX_TIM17_Init+0xec>)
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c2:	4b2e      	ldr	r3, [pc, #184]	; (800467c <MX_TIM17_Init+0xec>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 80045c8:	4b2c      	ldr	r3, [pc, #176]	; (800467c <MX_TIM17_Init+0xec>)
 80045ca:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80045ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d0:	4b2a      	ldr	r3, [pc, #168]	; (800467c <MX_TIM17_Init+0xec>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80045d6:	4b29      	ldr	r3, [pc, #164]	; (800467c <MX_TIM17_Init+0xec>)
 80045d8:	2200      	movs	r2, #0
 80045da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045dc:	4b27      	ldr	r3, [pc, #156]	; (800467c <MX_TIM17_Init+0xec>)
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80045e2:	4826      	ldr	r0, [pc, #152]	; (800467c <MX_TIM17_Init+0xec>)
 80045e4:	f003 faa0 	bl	8007b28 <HAL_TIM_Base_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80045ee:	f7fe fadc 	bl	8002baa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80045f2:	4822      	ldr	r0, [pc, #136]	; (800467c <MX_TIM17_Init+0xec>)
 80045f4:	f003 fac3 	bl	8007b7e <HAL_TIM_PWM_Init>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80045fe:	f7fe fad4 	bl	8002baa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004602:	2360      	movs	r3, #96	; 0x60
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800460a:	2300      	movs	r3, #0
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800460e:	2300      	movs	r3, #0
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004612:	2300      	movs	r3, #0
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800461e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004622:	2200      	movs	r2, #0
 8004624:	4619      	mov	r1, r3
 8004626:	4815      	ldr	r0, [pc, #84]	; (800467c <MX_TIM17_Init+0xec>)
 8004628:	f003 fbfa 	bl	8007e20 <HAL_TIM_PWM_ConfigChannel>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8004632:	f7fe faba 	bl	8002baa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004636:	2300      	movs	r3, #0
 8004638:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800464a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800464e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004654:	2300      	movs	r3, #0
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004658:	463b      	mov	r3, r7
 800465a:	4619      	mov	r1, r3
 800465c:	4807      	ldr	r0, [pc, #28]	; (800467c <MX_TIM17_Init+0xec>)
 800465e:	f004 f8a9 	bl	80087b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8004668:	f7fe fa9f 	bl	8002baa <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 800466c:	4803      	ldr	r0, [pc, #12]	; (800467c <MX_TIM17_Init+0xec>)
 800466e:	f000 f8af 	bl	80047d0 <HAL_TIM_MspPostInit>

}
 8004672:	bf00      	nop
 8004674:	3748      	adds	r7, #72	; 0x48
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2000159c 	.word	0x2000159c
 8004680:	40014800 	.word	0x40014800

08004684 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	; 0x30
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <HAL_TIM_Encoder_MspInit+0xdc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d12a      	bne.n	80046fc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	4a2e      	ldr	r2, [pc, #184]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 80046ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046b0:	6193      	str	r3, [r2, #24]
 80046b2:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4a28      	ldr	r2, [pc, #160]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 80046c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c8:	6153      	str	r3, [r2, #20]
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L1_Pin|ENC_L2_Pin;
 80046d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	2302      	movs	r3, #2
 80046de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e4:	2300      	movs	r3, #0
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80046e8:	2306      	movs	r3, #6
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ec:	f107 031c 	add.w	r3, r7, #28
 80046f0:	4619      	mov	r1, r3
 80046f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046f6:	f001 fcb7 	bl	8006068 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80046fa:	e02d      	b.n	8004758 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d128      	bne.n	8004758 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004706:	4b17      	ldr	r3, [pc, #92]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4a16      	ldr	r2, [pc, #88]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	61d3      	str	r3, [r2, #28]
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004728:	6153      	str	r3, [r2, #20]
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <HAL_TIM_Encoder_MspInit+0xe0>)
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_R1_Pin|ENC_R2_Pin;
 8004736:	2303      	movs	r3, #3
 8004738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473a:	2302      	movs	r3, #2
 800473c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004742:	2300      	movs	r3, #0
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004746:	2301      	movs	r3, #1
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800474a:	f107 031c 	add.w	r3, r7, #28
 800474e:	4619      	mov	r1, r3
 8004750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004754:	f001 fc88 	bl	8006068 <HAL_GPIO_Init>
}
 8004758:	bf00      	nop
 800475a:	3730      	adds	r7, #48	; 0x30
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40012c00 	.word	0x40012c00
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_TIM_Base_MspInit+0x5c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10c      	bne.n	8004794 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_TIM_Base_MspInit+0x60>)
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <HAL_TIM_Base_MspInit+0x60>)
 8004780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004784:	6193      	str	r3, [r2, #24]
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_TIM_Base_MspInit+0x60>)
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004792:	e010      	b.n	80047b6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <HAL_TIM_Base_MspInit+0x64>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d10b      	bne.n	80047b6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_TIM_Base_MspInit+0x60>)
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_TIM_Base_MspInit+0x60>)
 80047a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a8:	6193      	str	r3, [r2, #24]
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <HAL_TIM_Base_MspInit+0x60>)
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40014800 	.word	0x40014800

080047d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <HAL_TIM_MspPostInit+0xac>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d11e      	bne.n	8004830 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_TIM_MspPostInit+0xb0>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4a22      	ldr	r2, [pc, #136]	; (8004880 <HAL_TIM_MspPostInit+0xb0>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	6153      	str	r3, [r2, #20]
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_TIM_MspPostInit+0xb0>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration    
    PA12     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = MT_L_PWM_Pin;
 800480a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800480e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004810:	2302      	movs	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800481c:	2301      	movs	r3, #1
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MT_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4619      	mov	r1, r3
 8004826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800482a:	f001 fc1d 	bl	8006068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800482e:	e020      	b.n	8004872 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM17)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a13      	ldr	r2, [pc, #76]	; (8004884 <HAL_TIM_MspPostInit+0xb4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d11b      	bne.n	8004872 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_TIM_MspPostInit+0xb0>)
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4a10      	ldr	r2, [pc, #64]	; (8004880 <HAL_TIM_MspPostInit+0xb0>)
 8004840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004844:	6153      	str	r3, [r2, #20]
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_TIM_MspPostInit+0xb0>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MT_R_PWM_Pin;
 8004852:	2320      	movs	r3, #32
 8004854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004856:	2302      	movs	r3, #2
 8004858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485e:	2300      	movs	r3, #0
 8004860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8004862:	230a      	movs	r3, #10
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MT_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8004866:	f107 0314 	add.w	r3, r7, #20
 800486a:	4619      	mov	r1, r3
 800486c:	4806      	ldr	r0, [pc, #24]	; (8004888 <HAL_TIM_MspPostInit+0xb8>)
 800486e:	f001 fbfb 	bl	8006068 <HAL_GPIO_Init>
}
 8004872:	bf00      	nop
 8004874:	3728      	adds	r7, #40	; 0x28
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40014400 	.word	0x40014400
 8004880:	40021000 	.word	0x40021000
 8004884:	40014800 	.word	0x40014800
 8004888:	48000400 	.word	0x48000400

0800488c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004890:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 8004892:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <MX_USART2_UART_Init+0x6c>)
 8004894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004896:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 8004898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800489c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048a4:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048b2:	220c      	movs	r2, #12
 80048b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048be:	2200      	movs	r2, #0
 80048c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048ca:	2230      	movs	r2, #48	; 0x30
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048dc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048de:	4805      	ldr	r0, [pc, #20]	; (80048f4 <MX_USART2_UART_Init+0x68>)
 80048e0:	f003 ffe0 	bl	80088a4 <HAL_UART_Init>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 80048ea:	f7fe f95e 	bl	8002baa <Error_Handler>
  }

}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20001724 	.word	0x20001724
 80048f8:	40004400 	.word	0x40004400

080048fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	f107 0314 	add.w	r3, r7, #20
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
 8004912:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a42      	ldr	r2, [pc, #264]	; (8004a24 <HAL_UART_MspInit+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d17d      	bne.n	8004a1a <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800491e:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <HAL_UART_MspInit+0x12c>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	4a41      	ldr	r2, [pc, #260]	; (8004a28 <HAL_UART_MspInit+0x12c>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004928:	61d3      	str	r3, [r2, #28]
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <HAL_UART_MspInit+0x12c>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004936:	4b3c      	ldr	r3, [pc, #240]	; (8004a28 <HAL_UART_MspInit+0x12c>)
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <HAL_UART_MspInit+0x12c>)
 800493c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004940:	6153      	str	r3, [r2, #20]
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_UART_MspInit+0x12c>)
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800494e:	f248 0304 	movw	r3, #32772	; 0x8004
 8004952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800495c:	2303      	movs	r3, #3
 800495e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004960:	2307      	movs	r3, #7
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004964:	f107 0314 	add.w	r3, r7, #20
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800496e:	f001 fb7b 	bl	8006068 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004972:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_UART_MspInit+0x130>)
 8004974:	4a2e      	ldr	r2, [pc, #184]	; (8004a30 <HAL_UART_MspInit+0x134>)
 8004976:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004978:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <HAL_UART_MspInit+0x130>)
 800497a:	2200      	movs	r2, #0
 800497c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800497e:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <HAL_UART_MspInit+0x130>)
 8004980:	2200      	movs	r2, #0
 8004982:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004984:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <HAL_UART_MspInit+0x130>)
 8004986:	2280      	movs	r2, #128	; 0x80
 8004988:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800498a:	4b28      	ldr	r3, [pc, #160]	; (8004a2c <HAL_UART_MspInit+0x130>)
 800498c:	2200      	movs	r2, #0
 800498e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004990:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_UART_MspInit+0x130>)
 8004992:	2200      	movs	r2, #0
 8004994:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004996:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <HAL_UART_MspInit+0x130>)
 8004998:	2220      	movs	r2, #32
 800499a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <HAL_UART_MspInit+0x130>)
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80049a2:	4822      	ldr	r0, [pc, #136]	; (8004a2c <HAL_UART_MspInit+0x130>)
 80049a4:	f001 f945 	bl	8005c32 <HAL_DMA_Init>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80049ae:	f7fe f8fc 	bl	8002baa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_UART_MspInit+0x130>)
 80049b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80049b8:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_UART_MspInit+0x130>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80049be:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_UART_MspInit+0x13c>)
 80049c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049c6:	2210      	movs	r2, #16
 80049c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ca:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049d8:	2200      	movs	r2, #0
 80049da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049dc:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049de:	2200      	movs	r2, #0
 80049e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80049ee:	4811      	ldr	r0, [pc, #68]	; (8004a34 <HAL_UART_MspInit+0x138>)
 80049f0:	f001 f91f 	bl	8005c32 <HAL_DMA_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80049fa:	f7fe f8d6 	bl	8002baa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <HAL_UART_MspInit+0x138>)
 8004a02:	669a      	str	r2, [r3, #104]	; 0x68
 8004a04:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <HAL_UART_MspInit+0x138>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	2026      	movs	r0, #38	; 0x26
 8004a10:	f001 f8d9 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a14:	2026      	movs	r0, #38	; 0x26
 8004a16:	f001 f8f2 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	2000169c 	.word	0x2000169c
 8004a30:	4002006c 	.word	0x4002006c
 8004a34:	200016e0 	.word	0x200016e0
 8004a38:	40020080 	.word	0x40020080

08004a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004a40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004a42:	e003      	b.n	8004a4c <LoopCopyDataInit>

08004a44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004a46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004a48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004a4a:	3104      	adds	r1, #4

08004a4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004a4c:	480b      	ldr	r0, [pc, #44]	; (8004a7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004a50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004a52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004a54:	d3f6      	bcc.n	8004a44 <CopyDataInit>
	ldr	r2, =_sbss
 8004a56:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004a58:	e002      	b.n	8004a60 <LoopFillZerobss>

08004a5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004a5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004a5c:	f842 3b04 	str.w	r3, [r2], #4

08004a60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <LoopForever+0x16>)
	cmp	r2, r3
 8004a62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004a64:	d3f9      	bcc.n	8004a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a66:	f7ff fc55 	bl	8004314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a6a:	f005 f8d7 	bl	8009c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a6e:	f7fd ff97 	bl	80029a0 <main>

08004a72 <LoopForever>:

LoopForever:
    b LoopForever
 8004a72:	e7fe      	b.n	8004a72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a74:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004a78:	0800e99c 	.word	0x0800e99c
	ldr	r0, =_sdata
 8004a7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004a80:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8004a84:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8004a88:	200017b8 	.word	0x200017b8

08004a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <ADC1_2_IRQHandler>
	...

08004a90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_Init+0x28>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <HAL_Init+0x28>)
 8004a9a:	f043 0310 	orr.w	r3, r3, #16
 8004a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aa0:	2003      	movs	r0, #3
 8004aa2:	f001 f885 	bl	8005bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f000 f808 	bl	8004abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004aac:	f7ff fae0 	bl	8004070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40022000 	.word	0x40022000

08004abc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_InitTick+0x54>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_InitTick+0x58>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	4619      	mov	r1, r3
 8004ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 f89d 	bl	8005c1a <HAL_SYSTICK_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e00e      	b.n	8004b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d80a      	bhi.n	8004b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af0:	2200      	movs	r2, #0
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	f001 f865 	bl	8005bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <HAL_InitTick+0x5c>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000010 	.word	0x20000010
 8004b14:	20000018 	.word	0x20000018
 8004b18:	20000014 	.word	0x20000014

08004b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_IncTick+0x20>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_IncTick+0x24>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <HAL_IncTick+0x24>)
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000018 	.word	0x20000018
 8004b40:	200017a4 	.word	0x200017a4

08004b44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return uwTick;  
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <HAL_GetTick+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	200017a4 	.word	0x200017a4

08004b5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b64:	f7ff ffee 	bl	8004b44 <HAL_GetTick>
 8004b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d005      	beq.n	8004b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_Delay+0x44>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004b82:	bf00      	nop
 8004b84:	f7ff ffde 	bl	8004b44 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d8f7      	bhi.n	8004b84 <HAL_Delay+0x28>
  {
  }
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000018 	.word	0x20000018

08004ba4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b09a      	sub	sp, #104	; 0x68
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e172      	b.n	8004ee6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d176      	bne.n	8004d00 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d152      	bne.n	8004cc0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fc f971 	bl	8000f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d13b      	bne.n	8004cc0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fe81 	bl	8005950 <ADC_Disable>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d12f      	bne.n	8004cc0 <HAL_ADC_Init+0xe0>
 8004c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d12b      	bne.n	8004cc0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c70:	f023 0302 	bic.w	r3, r3, #2
 8004c74:	f043 0202 	orr.w	r2, r3, #2
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c8a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c9c:	4b94      	ldr	r3, [pc, #592]	; (8004ef0 <HAL_ADC_Init+0x310>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a94      	ldr	r2, [pc, #592]	; (8004ef4 <HAL_ADC_Init+0x314>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0c9a      	lsrs	r2, r3, #18
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004cb2:	e002      	b.n	8004cba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f9      	bne.n	8004cb4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cdc:	d110      	bne.n	8004d00 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f023 0312 	bic.w	r3, r3, #18
 8004ce6:	f043 0210 	orr.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 80df 	bne.w	8004ecc <HAL_ADC_Init+0x2ec>
 8004d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 80da 	bne.w	8004ecc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 80d2 	bne.w	8004ecc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d30:	f043 0202 	orr.w	r2, r3, #2
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d38:	4b6f      	ldr	r3, [pc, #444]	; (8004ef8 <HAL_ADC_Init+0x318>)
 8004d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d44:	d102      	bne.n	8004d4c <HAL_ADC_Init+0x16c>
 8004d46:	4b6d      	ldr	r3, [pc, #436]	; (8004efc <HAL_ADC_Init+0x31c>)
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e002      	b.n	8004d52 <HAL_ADC_Init+0x172>
 8004d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d50:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d108      	bne.n	8004d72 <HAL_ADC_Init+0x192>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_ADC_Init+0x192>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <HAL_ADC_Init+0x194>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11c      	bne.n	8004db2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004d78:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d107      	bne.n	8004d9a <HAL_ADC_Init+0x1ba>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_ADC_Init+0x1ba>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <HAL_ADC_Init+0x1bc>
 8004d9a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d108      	bne.n	8004db2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7e5b      	ldrb	r3, [r3, #25]
 8004db6:	035b      	lsls	r3, r3, #13
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dbc:	2a01      	cmp	r2, #1
 8004dbe:	d002      	beq.n	8004dc6 <HAL_ADC_Init+0x1e6>
 8004dc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dc4:	e000      	b.n	8004dc8 <HAL_ADC_Init+0x1e8>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d11b      	bne.n	8004e1e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	7e5b      	ldrb	r3, [r3, #25]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	3b01      	subs	r3, #1
 8004df4:	045a      	lsls	r2, r3, #17
 8004df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8004e00:	e00d      	b.n	8004e1e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d007      	beq.n	8004e36 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e32:	4313      	orrs	r3, r2
 8004e34:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d114      	bne.n	8004e6e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e52:	f023 0302 	bic.w	r3, r3, #2
 8004e56:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7e1b      	ldrb	r3, [r3, #24]
 8004e5c:	039a      	lsls	r2, r3, #14
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4313      	orrs	r3, r2
 8004e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <HAL_ADC_Init+0x320>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10c      	bne.n	8004ea4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f023 010f 	bic.w	r1, r3, #15
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	1e5a      	subs	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea2:	e007      	b.n	8004eb4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 020f 	bic.w	r2, r2, #15
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8004eca:	e00a      	b.n	8004ee2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f023 0312 	bic.w	r3, r3, #18
 8004ed4:	f043 0210 	orr.w	r2, r3, #16
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004ee2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3768      	adds	r7, #104	; 0x68
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000010 	.word	0x20000010
 8004ef4:	431bde83 	.word	0x431bde83
 8004ef8:	50000300 	.word	0x50000300
 8004efc:	50000100 	.word	0x50000100
 8004f00:	fff0c007 	.word	0xfff0c007

08004f04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 80b9 	bne.w	8005096 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_ADC_Start_DMA+0x2e>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e0b4      	b.n	800509c <HAL_ADC_Start_DMA+0x198>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8004f3a:	4b5a      	ldr	r3, [pc, #360]	; (80050a4 <HAL_ADC_Start_DMA+0x1a0>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 80a0 	bne.w	8005088 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fca3 	bl	8005894 <ADC_Enable>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 8092 	bne.w	800507e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004f6e:	4b4d      	ldr	r3, [pc, #308]	; (80050a4 <HAL_ADC_Start_DMA+0x1a0>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d004      	beq.n	8004f84 <HAL_ADC_Start_DMA+0x80>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f82:	d115      	bne.n	8004fb0 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d027      	beq.n	8004fee <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004fae:	e01e      	b.n	8004fee <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fc4:	d004      	beq.n	8004fd0 <HAL_ADC_Start_DMA+0xcc>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a37      	ldr	r2, [pc, #220]	; (80050a8 <HAL_ADC_Start_DMA+0x1a4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d10e      	bne.n	8004fee <HAL_ADC_Start_DMA+0xea>
 8004fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fe6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d106      	bne.n	800500a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	f023 0206 	bic.w	r2, r3, #6
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	645a      	str	r2, [r3, #68]	; 0x44
 8005008:	e002      	b.n	8005010 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	4a23      	ldr	r2, [pc, #140]	; (80050ac <HAL_ADC_Start_DMA+0x1a8>)
 800501e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <HAL_ADC_Start_DMA+0x1ac>)
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_ADC_Start_DMA+0x1b0>)
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	221c      	movs	r2, #28
 8005036:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0210 	orr.w	r2, r2, #16
 8005046:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3340      	adds	r3, #64	; 0x40
 8005062:	4619      	mov	r1, r3
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f000 fe2a 	bl	8005cc0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0204 	orr.w	r2, r2, #4
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	e00d      	b.n	800509a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005086:	e008      	b.n	800509a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005094:	e001      	b.n	800509a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005096:	2302      	movs	r3, #2
 8005098:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	50000300 	.word	0x50000300
 80050a8:	50000100 	.word	0x50000100
 80050ac:	080057c9 	.word	0x080057c9
 80050b0:	08005843 	.word	0x08005843
 80050b4:	0800585f 	.word	0x0800585f

080050b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b09b      	sub	sp, #108	; 0x6c
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADC_ConfigChannel+0x22>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e2a5      	b.n	8005626 <HAL_ADC_ConfigChannel+0x56e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 8289 	bne.w	8005604 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d81c      	bhi.n	8005134 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	461a      	mov	r2, r3
 800510e:	231f      	movs	r3, #31
 8005110:	4093      	lsls	r3, r2
 8005112:	43db      	mvns	r3, r3
 8005114:	4019      	ands	r1, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fa00 f203 	lsl.w	r2, r0, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
 8005132:	e063      	b.n	80051fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b09      	cmp	r3, #9
 800513a:	d81e      	bhi.n	800517a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	3b1e      	subs	r3, #30
 8005150:	221f      	movs	r2, #31
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	4019      	ands	r1, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	3b1e      	subs	r3, #30
 800516c:	fa00 f203 	lsl.w	r2, r0, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	635a      	str	r2, [r3, #52]	; 0x34
 8005178:	e040      	b.n	80051fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b0e      	cmp	r3, #14
 8005180:	d81e      	bhi.n	80051c0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	3b3c      	subs	r3, #60	; 0x3c
 8005196:	221f      	movs	r2, #31
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	4019      	ands	r1, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	3b3c      	subs	r3, #60	; 0x3c
 80051b2:	fa00 f203 	lsl.w	r2, r0, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
 80051be:	e01d      	b.n	80051fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	3b5a      	subs	r3, #90	; 0x5a
 80051d4:	221f      	movs	r2, #31
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	4019      	ands	r1, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	3b5a      	subs	r3, #90	; 0x5a
 80051f0:	fa00 f203 	lsl.w	r2, r0, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 80e5 	bne.w	80053d6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b09      	cmp	r3, #9
 8005212:	d91c      	bls.n	800524e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6999      	ldr	r1, [r3, #24]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	3b1e      	subs	r3, #30
 8005226:	2207      	movs	r2, #7
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	4019      	ands	r1, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6898      	ldr	r0, [r3, #8]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4413      	add	r3, r2
 800523e:	3b1e      	subs	r3, #30
 8005240:	fa00 f203 	lsl.w	r2, r0, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	619a      	str	r2, [r3, #24]
 800524c:	e019      	b.n	8005282 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6959      	ldr	r1, [r3, #20]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	2207      	movs	r2, #7
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	4019      	ands	r1, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6898      	ldr	r0, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	fa00 f203 	lsl.w	r2, r0, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695a      	ldr	r2, [r3, #20]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	08db      	lsrs	r3, r3, #3
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	3b01      	subs	r3, #1
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d84f      	bhi.n	8005344 <HAL_ADC_ConfigChannel+0x28c>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_ADC_ConfigChannel+0x1f4>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052df 	.word	0x080052df
 80052b4:	08005301 	.word	0x08005301
 80052b8:	08005323 	.word	0x08005323
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052c2:	4b9e      	ldr	r3, [pc, #632]	; (800553c <HAL_ADC_ConfigChannel+0x484>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	0691      	lsls	r1, r2, #26
 80052cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ce:	430a      	orrs	r2, r1
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052da:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80052dc:	e07e      	b.n	80053dc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052e4:	4b95      	ldr	r3, [pc, #596]	; (800553c <HAL_ADC_ConfigChannel+0x484>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	0691      	lsls	r1, r2, #26
 80052ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052f0:	430a      	orrs	r2, r1
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052fc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80052fe:	e06d      	b.n	80053dc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005306:	4b8d      	ldr	r3, [pc, #564]	; (800553c <HAL_ADC_ConfigChannel+0x484>)
 8005308:	4013      	ands	r3, r2
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	0691      	lsls	r1, r2, #26
 8005310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005312:	430a      	orrs	r2, r1
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800531e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005320:	e05c      	b.n	80053dc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005328:	4b84      	ldr	r3, [pc, #528]	; (800553c <HAL_ADC_ConfigChannel+0x484>)
 800532a:	4013      	ands	r3, r2
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	0691      	lsls	r1, r2, #26
 8005332:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005334:	430a      	orrs	r2, r1
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005340:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005342:	e04b      	b.n	80053dc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	069b      	lsls	r3, r3, #26
 8005354:	429a      	cmp	r2, r3
 8005356:	d107      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005366:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	069b      	lsls	r3, r3, #26
 8005378:	429a      	cmp	r2, r3
 800537a:	d107      	bne.n	800538c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800538a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	069b      	lsls	r3, r3, #26
 800539c:	429a      	cmp	r2, r3
 800539e:	d107      	bne.n	80053b0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053ae:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	069b      	lsls	r3, r3, #26
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d10a      	bne.n	80053da <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80053d4:	e001      	b.n	80053da <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <HAL_ADC_ConfigChannel+0x324>
      break;
 80053da:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d108      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x344>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x344>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_ADC_ConfigChannel+0x346>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 810b 	bne.w	800561a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d00f      	beq.n	800542c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2201      	movs	r2, #1
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43da      	mvns	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	400a      	ands	r2, r1
 8005426:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800542a:	e049      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2201      	movs	r2, #1
 800543a:	409a      	lsls	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b09      	cmp	r3, #9
 800544c:	d91c      	bls.n	8005488 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6999      	ldr	r1, [r3, #24]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	4413      	add	r3, r2
 800545e:	3b1b      	subs	r3, #27
 8005460:	2207      	movs	r2, #7
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	4019      	ands	r1, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6898      	ldr	r0, [r3, #8]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	3b1b      	subs	r3, #27
 800547a:	fa00 f203 	lsl.w	r2, r0, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	619a      	str	r2, [r3, #24]
 8005486:	e01b      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6959      	ldr	r1, [r3, #20]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	2207      	movs	r2, #7
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	4019      	ands	r1, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6898      	ldr	r0, [r3, #8]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	4613      	mov	r3, r2
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4413      	add	r3, r2
 80054b4:	fa00 f203 	lsl.w	r2, r0, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054c0:	4b1f      	ldr	r3, [pc, #124]	; (8005540 <HAL_ADC_ConfigChannel+0x488>)
 80054c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d105      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80054cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80054dc:	2b11      	cmp	r3, #17
 80054de:	d105      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80054e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80054f0:	2b12      	cmp	r3, #18
 80054f2:	f040 8092 	bne.w	800561a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80054f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 808b 	bne.w	800561a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800550c:	d102      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x45c>
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_ADC_ConfigChannel+0x48c>)
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e002      	b.n	800551a <HAL_ADC_ConfigChannel+0x462>
 8005514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005518:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d10f      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x490>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d108      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x490>
 8005536:	2301      	movs	r3, #1
 8005538:	e007      	b.n	800554a <HAL_ADC_ConfigChannel+0x492>
 800553a:	bf00      	nop
 800553c:	83fff000 	.word	0x83fff000
 8005540:	50000300 	.word	0x50000300
 8005544:	50000100 	.word	0x50000100
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d150      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800554e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d107      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x4b8>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x4b8>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <HAL_ADC_ConfigChannel+0x4ba>
 8005570:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005572:	2b00      	cmp	r3, #0
 8005574:	d13c      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b10      	cmp	r3, #16
 800557c:	d11d      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x502>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005586:	d118      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005592:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005594:	4b27      	ldr	r3, [pc, #156]	; (8005634 <HAL_ADC_ConfigChannel+0x57c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <HAL_ADC_ConfigChannel+0x580>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	0c9a      	lsrs	r2, r3, #18
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80055aa:	e002      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f9      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055b8:	e02e      	b.n	8005618 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b11      	cmp	r3, #17
 80055c0:	d10b      	bne.n	80055da <HAL_ADC_ConfigChannel+0x522>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ca:	d106      	bne.n	80055da <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80055cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80055d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055d8:	e01e      	b.n	8005618 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b12      	cmp	r3, #18
 80055e0:	d11a      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80055e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055ee:	e013      	b.n	8005618 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005602:	e00a      	b.n	800561a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	f043 0220 	orr.w	r2, r3, #32
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005616:	e000      	b.n	800561a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005618:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005622:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005626:	4618      	mov	r0, r3
 8005628:	376c      	adds	r7, #108	; 0x6c
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000010 	.word	0x20000010
 8005638:	431bde83 	.word	0x431bde83

0800563c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800563c:	b480      	push	{r7}
 800563e:	b099      	sub	sp, #100	; 0x64
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005654:	d102      	bne.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005656:	4b5a      	ldr	r3, [pc, #360]	; (80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	e002      	b.n	8005662 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800565c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005660:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0a2      	b.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005676:	2302      	movs	r3, #2
 8005678:	e09b      	b.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d17f      	bne.n	8005790 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d179      	bne.n	8005790 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800569c:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800569e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d040      	beq.n	800572a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80056a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ba:	035b      	lsls	r3, r3, #13
 80056bc:	430b      	orrs	r3, r1
 80056be:	431a      	orrs	r2, r3
 80056c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d108      	bne.n	80056e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d15c      	bne.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d107      	bne.n	8005706 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8005706:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005708:	2b00      	cmp	r3, #0
 800570a:	d14b      	bne.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800570c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005714:	f023 030f 	bic.w	r3, r3, #15
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	6811      	ldr	r1, [r2, #0]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	6892      	ldr	r2, [r2, #8]
 8005720:	430a      	orrs	r2, r1
 8005722:	431a      	orrs	r2, r3
 8005724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005726:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005728:	e03c      	b.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800572a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005734:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d108      	bne.n	8005756 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d123      	bne.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d107      	bne.n	8005778 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005778:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800577a:	2b00      	cmp	r3, #0
 800577c:	d112      	bne.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800577e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005786:	f023 030f 	bic.w	r3, r3, #15
 800578a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800578e:	e009      	b.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80057a2:	e000      	b.n	80057a6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80057a4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80057ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80057b2:	4618      	mov	r0, r3
 80057b4:	3764      	adds	r7, #100	; 0x64
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	50000100 	.word	0x50000100
 80057c4:	50000300 	.word	0x50000300

080057c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d126      	bne.n	8005830 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d115      	bne.n	8005828 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005800:	2b00      	cmp	r3, #0
 8005802:	d111      	bne.n	8005828 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d105      	bne.n	8005828 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	f043 0201 	orr.w	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff f9bb 	bl	8004ba4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800582e:	e004      	b.n	800583a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff f9b1 	bl	8004bb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	f043 0204 	orr.w	r2, r3, #4
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff f9a1 	bl	8004bcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d108      	bne.n	80058c0 <ADC_Enable+0x2c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <ADC_Enable+0x2c>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <ADC_Enable+0x2e>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d13c      	bne.n	8005940 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	4b1f      	ldr	r3, [pc, #124]	; (800594c <ADC_Enable+0xb8>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00d      	beq.n	80058f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f043 0210 	orr.w	r2, r3, #16
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	f043 0201 	orr.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e028      	b.n	8005942 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005900:	f7ff f920 	bl	8004b44 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005906:	e014      	b.n	8005932 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005908:	f7ff f91c 	bl	8004b44 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d90d      	bls.n	8005932 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f043 0210 	orr.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f043 0201 	orr.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e007      	b.n	8005942 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d1e3      	bne.n	8005908 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	8000003f 	.word	0x8000003f

08005950 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d108      	bne.n	800597c <ADC_Disable+0x2c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <ADC_Disable+0x2c>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <ADC_Disable+0x2e>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d040      	beq.n	8005a04 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 030d 	and.w	r3, r3, #13
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10f      	bne.n	80059b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0202 	orr.w	r2, r2, #2
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80059a8:	f7ff f8cc 	bl	8004b44 <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80059ae:	e022      	b.n	80059f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	f043 0210 	orr.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c0:	f043 0201 	orr.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e01c      	b.n	8005a06 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80059cc:	f7ff f8ba 	bl	8004b44 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d90d      	bls.n	80059f6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0210 	orr.w	r2, r3, #16
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f043 0201 	orr.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e007      	b.n	8005a06 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d0e3      	beq.n	80059cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	60d3      	str	r3, [r2, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <__NVIC_GetPriorityGrouping+0x18>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 0307 	and.w	r3, r3, #7
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	e000ed00 	.word	0xe000ed00

08005a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	db0b      	blt.n	8005a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	f003 021f 	and.w	r2, r3, #31
 8005a8c:	4907      	ldr	r1, [pc, #28]	; (8005aac <__NVIC_EnableIRQ+0x38>)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2001      	movs	r0, #1
 8005a96:	fa00 f202 	lsl.w	r2, r0, r2
 8005a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e100 	.word	0xe000e100

08005ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db0a      	blt.n	8005ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	490c      	ldr	r1, [pc, #48]	; (8005afc <__NVIC_SetPriority+0x4c>)
 8005aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad8:	e00a      	b.n	8005af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4908      	ldr	r1, [pc, #32]	; (8005b00 <__NVIC_SetPriority+0x50>)
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	761a      	strb	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	; 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf28      	it	cs
 8005b22:	2304      	movcs	r3, #4
 8005b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d902      	bls.n	8005b34 <NVIC_EncodePriority+0x30>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3b03      	subs	r3, #3
 8005b32:	e000      	b.n	8005b36 <NVIC_EncodePriority+0x32>
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	4313      	orrs	r3, r2
         );
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7c:	d301      	bcc.n	8005b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00f      	b.n	8005ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <SysTick_Config+0x40>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b8a:	210f      	movs	r1, #15
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	f7ff ff8e 	bl	8005ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <SysTick_Config+0x40>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <SysTick_Config+0x40>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010

08005bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff29 	bl	8005a10 <__NVIC_SetPriorityGrouping>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	4603      	mov	r3, r0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd8:	f7ff ff3e 	bl	8005a58 <__NVIC_GetPriorityGrouping>
 8005bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff8e 	bl	8005b04 <NVIC_EncodePriority>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff5d 	bl	8005ab0 <__NVIC_SetPriority>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	4603      	mov	r3, r0
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff31 	bl	8005a74 <__NVIC_EnableIRQ>
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff ffa2 	bl	8005b6c <SysTick_Config>
 8005c28:	4603      	mov	r3, r0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e037      	b.n	8005cb8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005c62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f9c4 	bl	8006028 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}  
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_DMA_Start_IT+0x20>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e04a      	b.n	8005d76 <HAL_DMA_Start_IT+0xb6>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d13a      	bne.n	8005d68 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f957 	bl	8005fca <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 020e 	orr.w	r2, r2, #14
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e00f      	b.n	8005d56 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 020a 	orr.w	r2, r2, #10
 8005d44:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0204 	bic.w	r2, r2, #4
 8005d54:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e005      	b.n	8005d74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
 8005d72:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d008      	beq.n	8005da2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2204      	movs	r2, #4
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e020      	b.n	8005de4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 020e 	bic.w	r2, r2, #14
 8005db0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dca:	2101      	movs	r1, #1
 8005dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d005      	beq.n	8005e12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
 8005e10:	e027      	b.n	8005e62 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 020e 	bic.w	r2, r2, #14
 8005e20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e40:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
    } 
  }
  return status;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2204      	movs	r2, #4
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d024      	beq.n	8005ede <HAL_DMA_IRQHandler+0x72>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01f      	beq.n	8005ede <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0204 	bic.w	r2, r2, #4
 8005eba:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec4:	2104      	movs	r1, #4
 8005ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eca:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d06a      	beq.n	8005faa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005edc:	e065      	b.n	8005faa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	409a      	lsls	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d02c      	beq.n	8005f48 <HAL_DMA_IRQHandler+0xdc>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d027      	beq.n	8005f48 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10b      	bne.n	8005f1e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 020a 	bic.w	r2, r2, #10
 8005f14:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	2102      	movs	r1, #2
 8005f28:	fa01 f202 	lsl.w	r2, r1, r2
 8005f2c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d035      	beq.n	8005faa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005f46:	e030      	b.n	8005faa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d028      	beq.n	8005faa <HAL_DMA_IRQHandler+0x13e>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d023      	beq.n	8005faa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 020e 	bic.w	r2, r2, #14
 8005f70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f80:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d004      	beq.n	8005faa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
    }
  }
}  
 8005fa8:	e7ff      	b.n	8005faa <HAL_DMA_IRQHandler+0x13e>
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d108      	bne.n	800600a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006008:	e007      	b.n	800601a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	60da      	str	r2, [r3, #12]
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <DMA_CalcBaseAndBitshift+0x34>)
 8006038:	4413      	add	r3, r2
 800603a:	4a09      	ldr	r2, [pc, #36]	; (8006060 <DMA_CalcBaseAndBitshift+0x38>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	009a      	lsls	r2, r3, #2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a06      	ldr	r2, [pc, #24]	; (8006064 <DMA_CalcBaseAndBitshift+0x3c>)
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	bffdfff8 	.word	0xbffdfff8
 8006060:	cccccccd 	.word	0xcccccccd
 8006064:	40020000 	.word	0x40020000

08006068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006076:	e14e      	b.n	8006316 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	2101      	movs	r1, #1
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	4013      	ands	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8140 	beq.w	8006310 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d003      	beq.n	80060a0 <HAL_GPIO_Init+0x38>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b12      	cmp	r3, #18
 800609e:	d123      	bne.n	80060e8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	08da      	lsrs	r2, r3, #3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3208      	adds	r2, #8
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	220f      	movs	r2, #15
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	08da      	lsrs	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3208      	adds	r2, #8
 80060e2:	6939      	ldr	r1, [r7, #16]
 80060e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2203      	movs	r2, #3
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4013      	ands	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 0203 	and.w	r2, r3, #3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d00b      	beq.n	800613c <HAL_GPIO_Init+0xd4>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d007      	beq.n	800613c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006130:	2b11      	cmp	r3, #17
 8006132:	d003      	beq.n	800613c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b12      	cmp	r3, #18
 800613a:	d130      	bne.n	800619e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	2203      	movs	r2, #3
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	43db      	mvns	r3, r3
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4013      	ands	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006172:	2201      	movs	r2, #1
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4013      	ands	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	091b      	lsrs	r3, r3, #4
 8006188:	f003 0201 	and.w	r2, r3, #1
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	2203      	movs	r2, #3
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 809a 	beq.w	8006310 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061dc:	4b55      	ldr	r3, [pc, #340]	; (8006334 <HAL_GPIO_Init+0x2cc>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	4a54      	ldr	r2, [pc, #336]	; (8006334 <HAL_GPIO_Init+0x2cc>)
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6193      	str	r3, [r2, #24]
 80061e8:	4b52      	ldr	r3, [pc, #328]	; (8006334 <HAL_GPIO_Init+0x2cc>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061f4:	4a50      	ldr	r2, [pc, #320]	; (8006338 <HAL_GPIO_Init+0x2d0>)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	089b      	lsrs	r3, r3, #2
 80061fa:	3302      	adds	r3, #2
 80061fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	220f      	movs	r2, #15
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4013      	ands	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800621e:	d013      	beq.n	8006248 <HAL_GPIO_Init+0x1e0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a46      	ldr	r2, [pc, #280]	; (800633c <HAL_GPIO_Init+0x2d4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00d      	beq.n	8006244 <HAL_GPIO_Init+0x1dc>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a45      	ldr	r2, [pc, #276]	; (8006340 <HAL_GPIO_Init+0x2d8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <HAL_GPIO_Init+0x1d8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a44      	ldr	r2, [pc, #272]	; (8006344 <HAL_GPIO_Init+0x2dc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <HAL_GPIO_Init+0x1d4>
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <HAL_GPIO_Init+0x1e2>
 800623c:	2305      	movs	r3, #5
 800623e:	e004      	b.n	800624a <HAL_GPIO_Init+0x1e2>
 8006240:	2302      	movs	r3, #2
 8006242:	e002      	b.n	800624a <HAL_GPIO_Init+0x1e2>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_GPIO_Init+0x1e2>
 8006248:	2300      	movs	r3, #0
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	f002 0203 	and.w	r2, r2, #3
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	4093      	lsls	r3, r2
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800625a:	4937      	ldr	r1, [pc, #220]	; (8006338 <HAL_GPIO_Init+0x2d0>)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	3302      	adds	r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006268:	4b37      	ldr	r3, [pc, #220]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	43db      	mvns	r3, r3
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4013      	ands	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800628c:	4a2e      	ldr	r2, [pc, #184]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006292:	4b2d      	ldr	r3, [pc, #180]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	43db      	mvns	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80062b6:	4a24      	ldr	r2, [pc, #144]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062bc:	4b22      	ldr	r3, [pc, #136]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	43db      	mvns	r3, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4013      	ands	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80062e0:	4a19      	ldr	r2, [pc, #100]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062e6:	4b18      	ldr	r3, [pc, #96]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	43db      	mvns	r3, r3
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800630a:	4a0f      	ldr	r2, [pc, #60]	; (8006348 <HAL_GPIO_Init+0x2e0>)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	3301      	adds	r3, #1
 8006314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	f47f aea9 	bne.w	8006078 <HAL_GPIO_Init+0x10>
  }
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40021000 	.word	0x40021000
 8006338:	40010000 	.word	0x40010000
 800633c:	48000400 	.word	0x48000400
 8006340:	48000800 	.word	0x48000800
 8006344:	48000c00 	.word	0x48000c00
 8006348:	40010400 	.word	0x40010400

0800634c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	887b      	ldrh	r3, [r7, #2]
 800635e:	4013      	ands	r3, r2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	e001      	b.n	800636e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	807b      	strh	r3, [r7, #2]
 8006388:	4613      	mov	r3, r2
 800638a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800638c:	787b      	ldrb	r3, [r7, #1]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006392:	887a      	ldrh	r2, [r7, #2]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006398:	e002      	b.n	80063a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800639a:	887a      	ldrh	r2, [r7, #2]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	887b      	ldrh	r3, [r7, #2]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063c4:	887b      	ldrh	r3, [r7, #2]
 80063c6:	041a      	lsls	r2, r3, #16
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80063cc:	e002      	b.n	80063d4 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063ce:	887a      	ldrh	r2, [r7, #2]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	619a      	str	r2, [r3, #24]
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e081      	b.n	80064f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc f8ee 	bl	80025e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2224      	movs	r2, #36	; 0x24
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d107      	bne.n	800645a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	e006      	b.n	8006468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d104      	bne.n	800647a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800649c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	ea42 0103 	orr.w	r1, r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	021a      	lsls	r2, r3, #8
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69d9      	ldr	r1, [r3, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1a      	ldr	r2, [r3, #32]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	68f9      	ldr	r1, [r7, #12]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
  }
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b20      	cmp	r3, #32
 8006546:	d138      	bne.n	80065ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006552:	2302      	movs	r3, #2
 8006554:	e032      	b.n	80065bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2224      	movs	r2, #36	; 0x24
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006584:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e000      	b.n	80065bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065ba:	2302      	movs	r3, #2
  }
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d139      	bne.n	8006652 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e033      	b.n	8006654 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2224      	movs	r2, #36	; 0x24
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800661a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006666:	af00      	add	r7, sp, #0
 8006668:	1d3b      	adds	r3, r7, #4
 800666a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f000 bef4 	b.w	8007462 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 816a 	beq.w	800695e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800668a:	4bb3      	ldr	r3, [pc, #716]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b04      	cmp	r3, #4
 8006694:	d00c      	beq.n	80066b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006696:	4bb0      	ldr	r3, [pc, #704]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d159      	bne.n	8006756 <HAL_RCC_OscConfig+0xf6>
 80066a2:	4bad      	ldr	r3, [pc, #692]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ae:	d152      	bne.n	8006756 <HAL_RCC_OscConfig+0xf6>
 80066b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80066bc:	fa93 f3a3 	rbit	r3, r3
 80066c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c8:	fab3 f383 	clz	r3, r3
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d102      	bne.n	80066e2 <HAL_RCC_OscConfig+0x82>
 80066dc:	4b9e      	ldr	r3, [pc, #632]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	e015      	b.n	800670e <HAL_RCC_OscConfig+0xae>
 80066e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80066ee:	fa93 f3a3 	rbit	r3, r3
 80066f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80066f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80066fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006702:	fa93 f3a3 	rbit	r3, r3
 8006706:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800670a:	4b93      	ldr	r3, [pc, #588]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006712:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006716:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800671a:	fa92 f2a2 	rbit	r2, r2
 800671e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006722:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006726:	fab2 f282 	clz	r2, r2
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	f042 0220 	orr.w	r2, r2, #32
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	f002 021f 	and.w	r2, r2, #31
 8006736:	2101      	movs	r1, #1
 8006738:	fa01 f202 	lsl.w	r2, r1, r2
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 810c 	beq.w	800695c <HAL_RCC_OscConfig+0x2fc>
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 8106 	bne.w	800695c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	f000 be86 	b.w	8007462 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006760:	d106      	bne.n	8006770 <HAL_RCC_OscConfig+0x110>
 8006762:	4b7d      	ldr	r3, [pc, #500]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a7c      	ldr	r2, [pc, #496]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e030      	b.n	80067d2 <HAL_RCC_OscConfig+0x172>
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <HAL_RCC_OscConfig+0x134>
 800677a:	4b77      	ldr	r3, [pc, #476]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a76      	ldr	r2, [pc, #472]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 8006780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	4b74      	ldr	r3, [pc, #464]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a73      	ldr	r2, [pc, #460]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 800678c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e01e      	b.n	80067d2 <HAL_RCC_OscConfig+0x172>
 8006794:	1d3b      	adds	r3, r7, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800679e:	d10c      	bne.n	80067ba <HAL_RCC_OscConfig+0x15a>
 80067a0:	4b6d      	ldr	r3, [pc, #436]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a6c      	ldr	r2, [pc, #432]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b6a      	ldr	r3, [pc, #424]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a69      	ldr	r2, [pc, #420]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e00b      	b.n	80067d2 <HAL_RCC_OscConfig+0x172>
 80067ba:	4b67      	ldr	r3, [pc, #412]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a66      	ldr	r2, [pc, #408]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4b64      	ldr	r3, [pc, #400]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a63      	ldr	r2, [pc, #396]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067d2:	4b61      	ldr	r3, [pc, #388]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	f023 020f 	bic.w	r2, r3, #15
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	495d      	ldr	r1, [pc, #372]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067e6:	1d3b      	adds	r3, r7, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d059      	beq.n	80068a4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7fe f9a8 	bl	8004b44 <HAL_GetTick>
 80067f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067fa:	f7fe f9a3 	bl	8004b44 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	; 0x64
 8006808:	d902      	bls.n	8006810 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	f000 be29 	b.w	8007462 <HAL_RCC_OscConfig+0xe02>
 8006810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006814:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006818:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800681c:	fa93 f3a3 	rbit	r3, r3
 8006820:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006824:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	d102      	bne.n	8006842 <HAL_RCC_OscConfig+0x1e2>
 800683c:	4b46      	ldr	r3, [pc, #280]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	e015      	b.n	800686e <HAL_RCC_OscConfig+0x20e>
 8006842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006846:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800684e:	fa93 f3a3 	rbit	r3, r3
 8006852:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800685a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800685e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006862:	fa93 f3a3 	rbit	r3, r3
 8006866:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800686a:	4b3b      	ldr	r3, [pc, #236]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006872:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006876:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800687a:	fa92 f2a2 	rbit	r2, r2
 800687e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006882:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006886:	fab2 f282 	clz	r2, r2
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	f042 0220 	orr.w	r2, r2, #32
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	f002 021f 	and.w	r2, r2, #31
 8006896:	2101      	movs	r1, #1
 8006898:	fa01 f202 	lsl.w	r2, r1, r2
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0ab      	beq.n	80067fa <HAL_RCC_OscConfig+0x19a>
 80068a2:	e05c      	b.n	800695e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fe f94e 	bl	8004b44 <HAL_GetTick>
 80068a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ac:	e00a      	b.n	80068c4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ae:	f7fe f949 	bl	8004b44 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b64      	cmp	r3, #100	; 0x64
 80068bc:	d902      	bls.n	80068c4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	f000 bdcf 	b.w	8007462 <HAL_RCC_OscConfig+0xe02>
 80068c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80068d0:	fa93 f3a3 	rbit	r3, r3
 80068d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80068d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068dc:	fab3 f383 	clz	r3, r3
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d102      	bne.n	80068f6 <HAL_RCC_OscConfig+0x296>
 80068f0:	4b19      	ldr	r3, [pc, #100]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	e015      	b.n	8006922 <HAL_RCC_OscConfig+0x2c2>
 80068f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006902:	fa93 f3a3 	rbit	r3, r3
 8006906:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800690a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800690e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006912:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006916:	fa93 f3a3 	rbit	r3, r3
 800691a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800691e:	4b0e      	ldr	r3, [pc, #56]	; (8006958 <HAL_RCC_OscConfig+0x2f8>)
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006926:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800692a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800692e:	fa92 f2a2 	rbit	r2, r2
 8006932:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006936:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800693a:	fab2 f282 	clz	r2, r2
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	f042 0220 	orr.w	r2, r2, #32
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	f002 021f 	and.w	r2, r2, #31
 800694a:	2101      	movs	r1, #1
 800694c:	fa01 f202 	lsl.w	r2, r1, r2
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1ab      	bne.n	80068ae <HAL_RCC_OscConfig+0x24e>
 8006956:	e002      	b.n	800695e <HAL_RCC_OscConfig+0x2fe>
 8006958:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800695c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 816f 	beq.w	8006c4c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800696e:	4bd0      	ldr	r3, [pc, #832]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800697a:	4bcd      	ldr	r3, [pc, #820]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b08      	cmp	r3, #8
 8006984:	d16c      	bne.n	8006a60 <HAL_RCC_OscConfig+0x400>
 8006986:	4bca      	ldr	r3, [pc, #808]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d166      	bne.n	8006a60 <HAL_RCC_OscConfig+0x400>
 8006992:	2302      	movs	r3, #2
 8006994:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006998:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800699c:	fa93 f3a3 	rbit	r3, r3
 80069a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80069a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a8:	fab3 f383 	clz	r3, r3
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d102      	bne.n	80069c2 <HAL_RCC_OscConfig+0x362>
 80069bc:	4bbc      	ldr	r3, [pc, #752]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	e013      	b.n	80069ea <HAL_RCC_OscConfig+0x38a>
 80069c2:	2302      	movs	r3, #2
 80069c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80069cc:	fa93 f3a3 	rbit	r3, r3
 80069d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80069d4:	2302      	movs	r3, #2
 80069d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80069da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80069de:	fa93 f3a3 	rbit	r3, r3
 80069e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80069e6:	4bb2      	ldr	r3, [pc, #712]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	2202      	movs	r2, #2
 80069ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80069f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80069f4:	fa92 f2a2 	rbit	r2, r2
 80069f8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80069fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006a00:	fab2 f282 	clz	r2, r2
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	f042 0220 	orr.w	r2, r2, #32
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	f002 021f 	and.w	r2, r2, #31
 8006a10:	2101      	movs	r1, #1
 8006a12:	fa01 f202 	lsl.w	r2, r1, r2
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <HAL_RCC_OscConfig+0x3cc>
 8006a1c:	1d3b      	adds	r3, r7, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d002      	beq.n	8006a2c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f000 bd1b 	b.w	8007462 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4ba0      	ldr	r3, [pc, #640]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	21f8      	movs	r1, #248	; 0xf8
 8006a3c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a40:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006a44:	fa91 f1a1 	rbit	r1, r1
 8006a48:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006a4c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006a50:	fab1 f181 	clz	r1, r1
 8006a54:	b2c9      	uxtb	r1, r1
 8006a56:	408b      	lsls	r3, r1
 8006a58:	4995      	ldr	r1, [pc, #596]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a5e:	e0f5      	b.n	8006c4c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8085 	beq.w	8006b76 <HAL_RCC_OscConfig+0x516>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006a76:	fa93 f3a3 	rbit	r3, r3
 8006a7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006a7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a82:	fab3 f383 	clz	r3, r3
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	461a      	mov	r2, r3
 8006a94:	2301      	movs	r3, #1
 8006a96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a98:	f7fe f854 	bl	8004b44 <HAL_GetTick>
 8006a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aa2:	f7fe f84f 	bl	8004b44 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d902      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	f000 bcd5 	b.w	8007462 <HAL_RCC_OscConfig+0xe02>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006ac2:	fa93 f3a3 	rbit	r3, r3
 8006ac6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006aca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ace:	fab3 f383 	clz	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d102      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x488>
 8006ae2:	4b73      	ldr	r3, [pc, #460]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	e013      	b.n	8006b10 <HAL_RCC_OscConfig+0x4b0>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006af2:	fa93 f3a3 	rbit	r3, r3
 8006af6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006afa:	2302      	movs	r3, #2
 8006afc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006b00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b04:	fa93 f3a3 	rbit	r3, r3
 8006b08:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006b0c:	4b68      	ldr	r3, [pc, #416]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2202      	movs	r2, #2
 8006b12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006b16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006b1a:	fa92 f2a2 	rbit	r2, r2
 8006b1e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006b22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006b26:	fab2 f282 	clz	r2, r2
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	f042 0220 	orr.w	r2, r2, #32
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	f002 021f 	and.w	r2, r2, #31
 8006b36:	2101      	movs	r1, #1
 8006b38:	fa01 f202 	lsl.w	r2, r1, r2
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0af      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b42:	4b5b      	ldr	r3, [pc, #364]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b4a:	1d3b      	adds	r3, r7, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	21f8      	movs	r1, #248	; 0xf8
 8006b52:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006b5a:	fa91 f1a1 	rbit	r1, r1
 8006b5e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006b62:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006b66:	fab1 f181 	clz	r1, r1
 8006b6a:	b2c9      	uxtb	r1, r1
 8006b6c:	408b      	lsls	r3, r1
 8006b6e:	4950      	ldr	r1, [pc, #320]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]
 8006b74:	e06a      	b.n	8006c4c <HAL_RCC_OscConfig+0x5ec>
 8006b76:	2301      	movs	r3, #1
 8006b78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b80:	fa93 f3a3 	rbit	r3, r3
 8006b84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006b88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b8c:	fab3 f383 	clz	r3, r3
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba2:	f7fd ffcf 	bl	8004b44 <HAL_GetTick>
 8006ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bac:	f7fd ffca 	bl	8004b44 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d902      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	f000 bc50 	b.w	8007462 <HAL_RCC_OscConfig+0xe02>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bcc:	fa93 f3a3 	rbit	r3, r3
 8006bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bd8:	fab3 f383 	clz	r3, r3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d102      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x592>
 8006bec:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	e013      	b.n	8006c1a <HAL_RCC_OscConfig+0x5ba>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bfc:	fa93 f3a3 	rbit	r3, r3
 8006c00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c04:	2302      	movs	r3, #2
 8006c06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c0e:	fa93 f3a3 	rbit	r3, r3
 8006c12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <HAL_RCC_OscConfig+0x650>)
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006c20:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006c24:	fa92 f2a2 	rbit	r2, r2
 8006c28:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006c2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006c30:	fab2 f282 	clz	r2, r2
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	f042 0220 	orr.w	r2, r2, #32
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	f002 021f 	and.w	r2, r2, #31
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f202 	lsl.w	r2, r1, r2
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1af      	bne.n	8006bac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c4c:	1d3b      	adds	r3, r7, #4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80da 	beq.w	8006e10 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d069      	beq.n	8006d3a <HAL_RCC_OscConfig+0x6da>
 8006c66:	2301      	movs	r3, #1
 8006c68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c70:	fa93 f3a3 	rbit	r3, r3
 8006c74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c7c:	fab3 f383 	clz	r3, r3
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <HAL_RCC_OscConfig+0x654>)
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c90:	f7fd ff58 	bl	8004b44 <HAL_GetTick>
 8006c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c98:	e00e      	b.n	8006cb8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c9a:	f7fd ff53 	bl	8004b44 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d906      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e3d9      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
 8006cae:	bf00      	nop
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	10908120 	.word	0x10908120
 8006cb8:	2302      	movs	r3, #2
 8006cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cc2:	fa93 f3a3 	rbit	r3, r3
 8006cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006cce:	2202      	movs	r2, #2
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	fa93 f2a3 	rbit	r2, r3
 8006cdc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	fa93 f2a3 	rbit	r2, r3
 8006cf4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006cf8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cfa:	4ba5      	ldr	r3, [pc, #660]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cfe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006d02:	2102      	movs	r1, #2
 8006d04:	6019      	str	r1, [r3, #0]
 8006d06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	fa93 f1a3 	rbit	r1, r3
 8006d10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006d14:	6019      	str	r1, [r3, #0]
  return result;
 8006d16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	fab3 f383 	clz	r3, r3
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0b0      	beq.n	8006c9a <HAL_RCC_OscConfig+0x63a>
 8006d38:	e06a      	b.n	8006e10 <HAL_RCC_OscConfig+0x7b0>
 8006d3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	fa93 f2a3 	rbit	r2, r3
 8006d4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006d50:	601a      	str	r2, [r3, #0]
  return result;
 8006d52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006d56:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d58:	fab3 f383 	clz	r3, r3
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4b8c      	ldr	r3, [pc, #560]	; (8006f94 <HAL_RCC_OscConfig+0x934>)
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	461a      	mov	r2, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d6c:	f7fd feea 	bl	8004b44 <HAL_GetTick>
 8006d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d74:	e009      	b.n	8006d8a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d76:	f7fd fee5 	bl	8004b44 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e36b      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
 8006d8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006d8e:	2202      	movs	r2, #2
 8006d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	fa93 f2a3 	rbit	r2, r3
 8006d9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006da6:	2202      	movs	r2, #2
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	fa93 f2a3 	rbit	r2, r3
 8006db4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	fa93 f2a3 	rbit	r2, r3
 8006dcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006dd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd2:	4b6f      	ldr	r3, [pc, #444]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006dda:	2102      	movs	r1, #2
 8006ddc:	6019      	str	r1, [r3, #0]
 8006dde:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	fa93 f1a3 	rbit	r1, r3
 8006de8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006dec:	6019      	str	r1, [r3, #0]
  return result;
 8006dee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	fab3 f383 	clz	r3, r3
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	2101      	movs	r1, #1
 8006e06:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1b2      	bne.n	8006d76 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e10:	1d3b      	adds	r3, r7, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8158 	beq.w	80070d0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e20:	2300      	movs	r3, #0
 8006e22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e26:	4b5a      	ldr	r3, [pc, #360]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d112      	bne.n	8006e58 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e32:	4b57      	ldr	r3, [pc, #348]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	4a56      	ldr	r2, [pc, #344]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3c:	61d3      	str	r3, [r2, #28]
 8006e3e:	4b54      	ldr	r3, [pc, #336]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e58:	4b4f      	ldr	r3, [pc, #316]	; (8006f98 <HAL_RCC_OscConfig+0x938>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11a      	bne.n	8006e9a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e64:	4b4c      	ldr	r3, [pc, #304]	; (8006f98 <HAL_RCC_OscConfig+0x938>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a4b      	ldr	r2, [pc, #300]	; (8006f98 <HAL_RCC_OscConfig+0x938>)
 8006e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e70:	f7fd fe68 	bl	8004b44 <HAL_GetTick>
 8006e74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e78:	e009      	b.n	8006e8e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e7a:	f7fd fe63 	bl	8004b44 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b64      	cmp	r3, #100	; 0x64
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e2e9      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8e:	4b42      	ldr	r3, [pc, #264]	; (8006f98 <HAL_RCC_OscConfig+0x938>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0ef      	beq.n	8006e7a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x852>
 8006ea4:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	4a39      	ldr	r2, [pc, #228]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	6213      	str	r3, [r2, #32]
 8006eb0:	e02f      	b.n	8006f12 <HAL_RCC_OscConfig+0x8b2>
 8006eb2:	1d3b      	adds	r3, r7, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10c      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x876>
 8006ebc:	4b34      	ldr	r3, [pc, #208]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	4a33      	ldr	r2, [pc, #204]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006ec2:	f023 0301 	bic.w	r3, r3, #1
 8006ec6:	6213      	str	r3, [r2, #32]
 8006ec8:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006ece:	f023 0304 	bic.w	r3, r3, #4
 8006ed2:	6213      	str	r3, [r2, #32]
 8006ed4:	e01d      	b.n	8006f12 <HAL_RCC_OscConfig+0x8b2>
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	d10c      	bne.n	8006efa <HAL_RCC_OscConfig+0x89a>
 8006ee0:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006ee6:	f043 0304 	orr.w	r3, r3, #4
 8006eea:	6213      	str	r3, [r2, #32]
 8006eec:	4b28      	ldr	r3, [pc, #160]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	4a27      	ldr	r2, [pc, #156]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	6213      	str	r3, [r2, #32]
 8006ef8:	e00b      	b.n	8006f12 <HAL_RCC_OscConfig+0x8b2>
 8006efa:	4b25      	ldr	r3, [pc, #148]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	4a24      	ldr	r2, [pc, #144]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	6213      	str	r3, [r2, #32]
 8006f06:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006f0c:	f023 0304 	bic.w	r3, r3, #4
 8006f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f12:	1d3b      	adds	r3, r7, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d06b      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f1c:	f7fd fe12 	bl	8004b44 <HAL_GetTick>
 8006f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f24:	e00b      	b.n	8006f3e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f26:	f7fd fe0d 	bl	8004b44 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e291      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
 8006f3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006f42:	2202      	movs	r2, #2
 8006f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	fa93 f2a3 	rbit	r2, r3
 8006f50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	fa93 f2a3 	rbit	r2, r3
 8006f68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006f6c:	601a      	str	r2, [r3, #0]
  return result;
 8006f6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006f72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f74:	fab3 f383 	clz	r3, r3
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f043 0302 	orr.w	r3, r3, #2
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d109      	bne.n	8006f9c <HAL_RCC_OscConfig+0x93c>
 8006f88:	4b01      	ldr	r3, [pc, #4]	; (8006f90 <HAL_RCC_OscConfig+0x930>)
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	e014      	b.n	8006fb8 <HAL_RCC_OscConfig+0x958>
 8006f8e:	bf00      	nop
 8006f90:	40021000 	.word	0x40021000
 8006f94:	10908120 	.word	0x10908120
 8006f98:	40007000 	.word	0x40007000
 8006f9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	fa93 f2a3 	rbit	r2, r3
 8006fae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	4bbb      	ldr	r3, [pc, #748]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	6011      	str	r1, [r2, #0]
 8006fc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	fa92 f1a2 	rbit	r1, r2
 8006fca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006fce:	6011      	str	r1, [r2, #0]
  return result;
 8006fd0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	fab2 f282 	clz	r2, r2
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	f002 021f 	and.w	r2, r2, #31
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d099      	beq.n	8006f26 <HAL_RCC_OscConfig+0x8c6>
 8006ff2:	e063      	b.n	80070bc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff4:	f7fd fda6 	bl	8004b44 <HAL_GetTick>
 8006ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ffc:	e00b      	b.n	8007016 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ffe:	f7fd fda1 	bl	8004b44 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e225      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
 8007016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800701a:	2202      	movs	r2, #2
 800701c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	fa93 f2a3 	rbit	r2, r3
 8007028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007032:	2202      	movs	r2, #2
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	fa93 f2a3 	rbit	r2, r3
 8007040:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007044:	601a      	str	r2, [r3, #0]
  return result;
 8007046:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800704a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800704c:	fab3 f383 	clz	r3, r3
 8007050:	b2db      	uxtb	r3, r3
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f043 0302 	orr.w	r3, r3, #2
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d102      	bne.n	8007066 <HAL_RCC_OscConfig+0xa06>
 8007060:	4b90      	ldr	r3, [pc, #576]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	e00d      	b.n	8007082 <HAL_RCC_OscConfig+0xa22>
 8007066:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800706a:	2202      	movs	r2, #2
 800706c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	fa93 f2a3 	rbit	r2, r3
 8007078:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	4b89      	ldr	r3, [pc, #548]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007086:	2102      	movs	r1, #2
 8007088:	6011      	str	r1, [r2, #0]
 800708a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	fa92 f1a2 	rbit	r1, r2
 8007094:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007098:	6011      	str	r1, [r2, #0]
  return result;
 800709a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	fab2 f282 	clz	r2, r2
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	f002 021f 	and.w	r2, r2, #31
 80070b0:	2101      	movs	r1, #1
 80070b2:	fa01 f202 	lsl.w	r2, r1, r2
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1a0      	bne.n	8006ffe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80070bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d105      	bne.n	80070d0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c4:	4b77      	ldr	r3, [pc, #476]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	4a76      	ldr	r2, [pc, #472]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 80070ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070d0:	1d3b      	adds	r3, r7, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 81c2 	beq.w	8007460 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070dc:	4b71      	ldr	r3, [pc, #452]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 030c 	and.w	r3, r3, #12
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	f000 819c 	beq.w	8007422 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	f040 8114 	bne.w	800731e <HAL_RCC_OscConfig+0xcbe>
 80070f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80070fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007100:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	fa93 f2a3 	rbit	r2, r3
 800710a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800710e:	601a      	str	r2, [r3, #0]
  return result;
 8007110:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007114:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007116:	fab3 f383 	clz	r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007120:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	461a      	mov	r2, r3
 8007128:	2300      	movs	r3, #0
 800712a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800712c:	f7fd fd0a 	bl	8004b44 <HAL_GetTick>
 8007130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007134:	e009      	b.n	800714a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007136:	f7fd fd05 	bl	8004b44 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e18b      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
 800714a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800714e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007154:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	fa93 f2a3 	rbit	r2, r3
 800715e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007162:	601a      	str	r2, [r3, #0]
  return result;
 8007164:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007168:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800716a:	fab3 f383 	clz	r3, r3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	b2db      	uxtb	r3, r3
 8007174:	f043 0301 	orr.w	r3, r3, #1
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d102      	bne.n	8007184 <HAL_RCC_OscConfig+0xb24>
 800717e:	4b49      	ldr	r3, [pc, #292]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	e01b      	b.n	80071bc <HAL_RCC_OscConfig+0xb5c>
 8007184:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800718c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	fa93 f2a3 	rbit	r2, r3
 8007198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80071a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	fa93 f2a3 	rbit	r2, r3
 80071b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	4b3a      	ldr	r3, [pc, #232]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80071c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80071c4:	6011      	str	r1, [r2, #0]
 80071c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	fa92 f1a2 	rbit	r1, r2
 80071d0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80071d4:	6011      	str	r1, [r2, #0]
  return result;
 80071d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	fab2 f282 	clz	r2, r2
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	f042 0220 	orr.w	r2, r2, #32
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	f002 021f 	and.w	r2, r2, #31
 80071ec:	2101      	movs	r1, #1
 80071ee:	fa01 f202 	lsl.w	r2, r1, r2
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d19e      	bne.n	8007136 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071f8:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007200:	1d3b      	adds	r3, r7, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007206:	1d3b      	adds	r3, r7, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	430b      	orrs	r3, r1
 800720e:	4925      	ldr	r1, [pc, #148]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 8007210:	4313      	orrs	r3, r2
 8007212:	604b      	str	r3, [r1, #4]
 8007214:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800721c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	fa93 f2a3 	rbit	r2, r3
 8007228:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800722c:	601a      	str	r2, [r3, #0]
  return result;
 800722e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007232:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007234:	fab3 f383 	clz	r3, r3
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800723e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	461a      	mov	r2, r3
 8007246:	2301      	movs	r3, #1
 8007248:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724a:	f7fd fc7b 	bl	8004b44 <HAL_GetTick>
 800724e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007252:	e009      	b.n	8007268 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007254:	f7fd fc76 	bl	8004b44 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e0fc      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
 8007268:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800726c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	fa93 f2a3 	rbit	r2, r3
 800727c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007280:	601a      	str	r2, [r3, #0]
  return result;
 8007282:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007286:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007288:	fab3 f383 	clz	r3, r3
 800728c:	b2db      	uxtb	r3, r3
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <HAL_RCC_OscConfig+0xc48>
 800729c:	4b01      	ldr	r3, [pc, #4]	; (80072a4 <HAL_RCC_OscConfig+0xc44>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	e01e      	b.n	80072e0 <HAL_RCC_OscConfig+0xc80>
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000
 80072a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80072ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	fa93 f2a3 	rbit	r2, r3
 80072bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	fa93 f2a3 	rbit	r2, r3
 80072d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	4b63      	ldr	r3, [pc, #396]	; (800746c <HAL_RCC_OscConfig+0xe0c>)
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80072e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80072e8:	6011      	str	r1, [r2, #0]
 80072ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	fa92 f1a2 	rbit	r1, r2
 80072f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80072f8:	6011      	str	r1, [r2, #0]
  return result;
 80072fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	fab2 f282 	clz	r2, r2
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	f042 0220 	orr.w	r2, r2, #32
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	f002 021f 	and.w	r2, r2, #31
 8007310:	2101      	movs	r1, #1
 8007312:	fa01 f202 	lsl.w	r2, r1, r2
 8007316:	4013      	ands	r3, r2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d09b      	beq.n	8007254 <HAL_RCC_OscConfig+0xbf4>
 800731c:	e0a0      	b.n	8007460 <HAL_RCC_OscConfig+0xe00>
 800731e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	fa93 f2a3 	rbit	r2, r3
 8007332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007336:	601a      	str	r2, [r3, #0]
  return result;
 8007338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800733c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800733e:	fab3 f383 	clz	r3, r3
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	461a      	mov	r2, r3
 8007350:	2300      	movs	r3, #0
 8007352:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007354:	f7fd fbf6 	bl	8004b44 <HAL_GetTick>
 8007358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800735c:	e009      	b.n	8007372 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800735e:	f7fd fbf1 	bl	8004b44 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e077      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
 8007372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800737a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	fa93 f2a3 	rbit	r2, r3
 8007386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800738a:	601a      	str	r2, [r3, #0]
  return result;
 800738c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007392:	fab3 f383 	clz	r3, r3
 8007396:	b2db      	uxtb	r3, r3
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d102      	bne.n	80073ac <HAL_RCC_OscConfig+0xd4c>
 80073a6:	4b31      	ldr	r3, [pc, #196]	; (800746c <HAL_RCC_OscConfig+0xe0c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	e01b      	b.n	80073e4 <HAL_RCC_OscConfig+0xd84>
 80073ac:	f107 0320 	add.w	r3, r7, #32
 80073b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b6:	f107 0320 	add.w	r3, r7, #32
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	fa93 f2a3 	rbit	r2, r3
 80073c0:	f107 031c 	add.w	r3, r7, #28
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	f107 0318 	add.w	r3, r7, #24
 80073ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f107 0318 	add.w	r3, r7, #24
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	fa93 f2a3 	rbit	r2, r3
 80073da:	f107 0314 	add.w	r3, r7, #20
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	4b22      	ldr	r3, [pc, #136]	; (800746c <HAL_RCC_OscConfig+0xe0c>)
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	f107 0210 	add.w	r2, r7, #16
 80073e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	f107 0210 	add.w	r2, r7, #16
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	fa92 f1a2 	rbit	r1, r2
 80073f8:	f107 020c 	add.w	r2, r7, #12
 80073fc:	6011      	str	r1, [r2, #0]
  return result;
 80073fe:	f107 020c 	add.w	r2, r7, #12
 8007402:	6812      	ldr	r2, [r2, #0]
 8007404:	fab2 f282 	clz	r2, r2
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	f042 0220 	orr.w	r2, r2, #32
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	f002 021f 	and.w	r2, r2, #31
 8007414:	2101      	movs	r1, #1
 8007416:	fa01 f202 	lsl.w	r2, r1, r2
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d19e      	bne.n	800735e <HAL_RCC_OscConfig+0xcfe>
 8007420:	e01e      	b.n	8007460 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007422:	1d3b      	adds	r3, r7, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e018      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007430:	4b0e      	ldr	r3, [pc, #56]	; (800746c <HAL_RCC_OscConfig+0xe0c>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007438:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800743c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007440:	1d3b      	adds	r3, r7, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	429a      	cmp	r2, r3
 8007448:	d108      	bne.n	800745c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800744a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800744e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007458:	429a      	cmp	r2, r3
 800745a:	d001      	beq.n	8007460 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40021000 	.word	0x40021000

08007470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b09e      	sub	sp, #120	; 0x78
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e162      	b.n	800774e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007488:	4b90      	ldr	r3, [pc, #576]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d910      	bls.n	80074b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007496:	4b8d      	ldr	r3, [pc, #564]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f023 0207 	bic.w	r2, r3, #7
 800749e:	498b      	ldr	r1, [pc, #556]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a6:	4b89      	ldr	r3, [pc, #548]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d001      	beq.n	80074b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e14a      	b.n	800774e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d008      	beq.n	80074d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c4:	4b82      	ldr	r3, [pc, #520]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	497f      	ldr	r1, [pc, #508]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80dc 	beq.w	800769c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d13c      	bne.n	8007566 <HAL_RCC_ClockConfig+0xf6>
 80074ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074f4:	fa93 f3a3 	rbit	r3, r3
 80074f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80074fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fc:	fab3 f383 	clz	r3, r3
 8007500:	b2db      	uxtb	r3, r3
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d102      	bne.n	8007516 <HAL_RCC_ClockConfig+0xa6>
 8007510:	4b6f      	ldr	r3, [pc, #444]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	e00f      	b.n	8007536 <HAL_RCC_ClockConfig+0xc6>
 8007516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800751a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800751c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800751e:	fa93 f3a3 	rbit	r3, r3
 8007522:	667b      	str	r3, [r7, #100]	; 0x64
 8007524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007528:	663b      	str	r3, [r7, #96]	; 0x60
 800752a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800752c:	fa93 f3a3 	rbit	r3, r3
 8007530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007532:	4b67      	ldr	r3, [pc, #412]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800753a:	65ba      	str	r2, [r7, #88]	; 0x58
 800753c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800753e:	fa92 f2a2 	rbit	r2, r2
 8007542:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007546:	fab2 f282 	clz	r2, r2
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	f042 0220 	orr.w	r2, r2, #32
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	f002 021f 	and.w	r2, r2, #31
 8007556:	2101      	movs	r1, #1
 8007558:	fa01 f202 	lsl.w	r2, r1, r2
 800755c:	4013      	ands	r3, r2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d17b      	bne.n	800765a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e0f3      	b.n	800774e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d13c      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x178>
 800756e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007572:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007576:	fa93 f3a3 	rbit	r3, r3
 800757a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800757c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800757e:	fab3 f383 	clz	r3, r3
 8007582:	b2db      	uxtb	r3, r3
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	d102      	bne.n	8007598 <HAL_RCC_ClockConfig+0x128>
 8007592:	4b4f      	ldr	r3, [pc, #316]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	e00f      	b.n	80075b8 <HAL_RCC_ClockConfig+0x148>
 8007598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800759c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a0:	fa93 f3a3 	rbit	r3, r3
 80075a4:	647b      	str	r3, [r7, #68]	; 0x44
 80075a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075aa:	643b      	str	r3, [r7, #64]	; 0x40
 80075ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ae:	fa93 f3a3 	rbit	r3, r3
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b4:	4b46      	ldr	r3, [pc, #280]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80075be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075c0:	fa92 f2a2 	rbit	r2, r2
 80075c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80075c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075c8:	fab2 f282 	clz	r2, r2
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	f042 0220 	orr.w	r2, r2, #32
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	f002 021f 	and.w	r2, r2, #31
 80075d8:	2101      	movs	r1, #1
 80075da:	fa01 f202 	lsl.w	r2, r1, r2
 80075de:	4013      	ands	r3, r2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d13a      	bne.n	800765a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0b2      	b.n	800774e <HAL_RCC_ClockConfig+0x2de>
 80075e8:	2302      	movs	r3, #2
 80075ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	fa93 f3a3 	rbit	r3, r3
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f6:	fab3 f383 	clz	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b01      	cmp	r3, #1
 8007608:	d102      	bne.n	8007610 <HAL_RCC_ClockConfig+0x1a0>
 800760a:	4b31      	ldr	r3, [pc, #196]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	e00d      	b.n	800762c <HAL_RCC_ClockConfig+0x1bc>
 8007610:	2302      	movs	r3, #2
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	fa93 f3a3 	rbit	r3, r3
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
 800761c:	2302      	movs	r3, #2
 800761e:	623b      	str	r3, [r7, #32]
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	fa93 f3a3 	rbit	r3, r3
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	4b29      	ldr	r3, [pc, #164]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2202      	movs	r2, #2
 800762e:	61ba      	str	r2, [r7, #24]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	fa92 f2a2 	rbit	r2, r2
 8007636:	617a      	str	r2, [r7, #20]
  return result;
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	fab2 f282 	clz	r2, r2
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	f042 0220 	orr.w	r2, r2, #32
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	f002 021f 	and.w	r2, r2, #31
 800764a:	2101      	movs	r1, #1
 800764c:	fa01 f202 	lsl.w	r2, r1, r2
 8007650:	4013      	ands	r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e079      	b.n	800774e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800765a:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f023 0203 	bic.w	r2, r3, #3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	491a      	ldr	r1, [pc, #104]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 8007668:	4313      	orrs	r3, r2
 800766a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800766c:	f7fd fa6a 	bl	8004b44 <HAL_GetTick>
 8007670:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007672:	e00a      	b.n	800768a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007674:	f7fd fa66 	bl	8004b44 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e061      	b.n	800774e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <HAL_RCC_ClockConfig+0x260>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f003 020c 	and.w	r2, r3, #12
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	429a      	cmp	r2, r3
 800769a:	d1eb      	bne.n	8007674 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800769c:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d214      	bcs.n	80076d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076aa:	4b08      	ldr	r3, [pc, #32]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 0207 	bic.w	r2, r3, #7
 80076b2:	4906      	ldr	r1, [pc, #24]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ba:	4b04      	ldr	r3, [pc, #16]	; (80076cc <HAL_RCC_ClockConfig+0x25c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d005      	beq.n	80076d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e040      	b.n	800774e <HAL_RCC_ClockConfig+0x2de>
 80076cc:	40022000 	.word	0x40022000
 80076d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e0:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <HAL_RCC_ClockConfig+0x2e8>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	491a      	ldr	r1, [pc, #104]	; (8007758 <HAL_RCC_ClockConfig+0x2e8>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076fe:	4b16      	ldr	r3, [pc, #88]	; (8007758 <HAL_RCC_ClockConfig+0x2e8>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4912      	ldr	r1, [pc, #72]	; (8007758 <HAL_RCC_ClockConfig+0x2e8>)
 800770e:	4313      	orrs	r3, r2
 8007710:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007712:	f000 f829 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 8007716:	4601      	mov	r1, r0
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <HAL_RCC_ClockConfig+0x2e8>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007720:	22f0      	movs	r2, #240	; 0xf0
 8007722:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	fa92 f2a2 	rbit	r2, r2
 800772a:	60fa      	str	r2, [r7, #12]
  return result;
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	fab2 f282 	clz	r2, r2
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	40d3      	lsrs	r3, r2
 8007736:	4a09      	ldr	r2, [pc, #36]	; (800775c <HAL_RCC_ClockConfig+0x2ec>)
 8007738:	5cd3      	ldrb	r3, [r2, r3]
 800773a:	fa21 f303 	lsr.w	r3, r1, r3
 800773e:	4a08      	ldr	r2, [pc, #32]	; (8007760 <HAL_RCC_ClockConfig+0x2f0>)
 8007740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007742:	4b08      	ldr	r3, [pc, #32]	; (8007764 <HAL_RCC_ClockConfig+0x2f4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd f9b8 	bl	8004abc <HAL_InitTick>
  
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3778      	adds	r7, #120	; 0x78
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40021000 	.word	0x40021000
 800775c:	0800e4a4 	.word	0x0800e4a4
 8007760:	20000010 	.word	0x20000010
 8007764:	20000014 	.word	0x20000014

08007768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007768:	b480      	push	{r7}
 800776a:	b08b      	sub	sp, #44	; 0x2c
 800776c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	61fb      	str	r3, [r7, #28]
 8007772:	2300      	movs	r3, #0
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	2300      	movs	r3, #0
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007782:	4b29      	ldr	r3, [pc, #164]	; (8007828 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f003 030c 	and.w	r3, r3, #12
 800778e:	2b04      	cmp	r3, #4
 8007790:	d002      	beq.n	8007798 <HAL_RCC_GetSysClockFreq+0x30>
 8007792:	2b08      	cmp	r3, #8
 8007794:	d003      	beq.n	800779e <HAL_RCC_GetSysClockFreq+0x36>
 8007796:	e03c      	b.n	8007812 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007798:	4b24      	ldr	r3, [pc, #144]	; (800782c <HAL_RCC_GetSysClockFreq+0xc4>)
 800779a:	623b      	str	r3, [r7, #32]
      break;
 800779c:	e03c      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80077a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80077a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	fa92 f2a2 	rbit	r2, r2
 80077b0:	607a      	str	r2, [r7, #4]
  return result;
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	fab2 f282 	clz	r2, r2
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	40d3      	lsrs	r3, r2
 80077bc:	4a1c      	ldr	r2, [pc, #112]	; (8007830 <HAL_RCC_GetSysClockFreq+0xc8>)
 80077be:	5cd3      	ldrb	r3, [r2, r3]
 80077c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80077c2:	4b19      	ldr	r3, [pc, #100]	; (8007828 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	220f      	movs	r2, #15
 80077cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	fa92 f2a2 	rbit	r2, r2
 80077d4:	60fa      	str	r2, [r7, #12]
  return result;
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	fab2 f282 	clz	r2, r2
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	40d3      	lsrs	r3, r2
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <HAL_RCC_GetSysClockFreq+0xcc>)
 80077e2:	5cd3      	ldrb	r3, [r2, r3]
 80077e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80077f0:	4a0e      	ldr	r2, [pc, #56]	; (800782c <HAL_RCC_GetSysClockFreq+0xc4>)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007800:	e004      	b.n	800780c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	623b      	str	r3, [r7, #32]
      break;
 8007810:	e002      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007812:	4b06      	ldr	r3, [pc, #24]	; (800782c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007814:	623b      	str	r3, [r7, #32]
      break;
 8007816:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007818:	6a3b      	ldr	r3, [r7, #32]
}
 800781a:	4618      	mov	r0, r3
 800781c:	372c      	adds	r7, #44	; 0x2c
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40021000 	.word	0x40021000
 800782c:	007a1200 	.word	0x007a1200
 8007830:	0800e4bc 	.word	0x0800e4bc
 8007834:	0800e4cc 	.word	0x0800e4cc
 8007838:	003d0900 	.word	0x003d0900

0800783c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007840:	4b03      	ldr	r3, [pc, #12]	; (8007850 <HAL_RCC_GetHCLKFreq+0x14>)
 8007842:	681b      	ldr	r3, [r3, #0]
}
 8007844:	4618      	mov	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000010 	.word	0x20000010

08007854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800785a:	f7ff ffef 	bl	800783c <HAL_RCC_GetHCLKFreq>
 800785e:	4601      	mov	r1, r0
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007868:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800786c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	fa92 f2a2 	rbit	r2, r2
 8007874:	603a      	str	r2, [r7, #0]
  return result;
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	fab2 f282 	clz	r2, r2
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	40d3      	lsrs	r3, r2
 8007880:	4a04      	ldr	r2, [pc, #16]	; (8007894 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007882:	5cd3      	ldrb	r3, [r2, r3]
 8007884:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40021000 	.word	0x40021000
 8007894:	0800e4b4 	.word	0x0800e4b4

08007898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800789e:	f7ff ffcd 	bl	800783c <HAL_RCC_GetHCLKFreq>
 80078a2:	4601      	mov	r1, r0
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80078ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80078b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	fa92 f2a2 	rbit	r2, r2
 80078b8:	603a      	str	r2, [r7, #0]
  return result;
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	fab2 f282 	clz	r2, r2
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	40d3      	lsrs	r3, r2
 80078c4:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80078c6:	5cd3      	ldrb	r3, [r2, r3]
 80078c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40021000 	.word	0x40021000
 80078d8:	0800e4b4 	.word	0x0800e4b4

080078dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b092      	sub	sp, #72	; 0x48
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 80d0 	beq.w	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80078fa:	2300      	movs	r3, #0
 80078fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007900:	4b86      	ldr	r3, [pc, #536]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10e      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800790c:	4b83      	ldr	r3, [pc, #524]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	4a82      	ldr	r2, [pc, #520]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007916:	61d3      	str	r3, [r2, #28]
 8007918:	4b80      	ldr	r3, [pc, #512]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800792a:	4b7d      	ldr	r3, [pc, #500]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d118      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007936:	4b7a      	ldr	r3, [pc, #488]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a79      	ldr	r2, [pc, #484]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800793c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007940:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007942:	f7fd f8ff 	bl	8004b44 <HAL_GetTick>
 8007946:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007948:	e008      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794a:	f7fd f8fb 	bl	8004b44 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b64      	cmp	r3, #100	; 0x64
 8007956:	d901      	bls.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e0db      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800795c:	4b70      	ldr	r3, [pc, #448]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0f0      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007968:	4b6c      	ldr	r3, [pc, #432]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d07d      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007982:	429a      	cmp	r2, r3
 8007984:	d076      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007986:	4b65      	ldr	r3, [pc, #404]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007994:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	fa93 f3a3 	rbit	r3, r3
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079a0:	fab3 f383 	clz	r3, r3
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	4b5e      	ldr	r3, [pc, #376]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	461a      	mov	r2, r3
 80079b0:	2301      	movs	r3, #1
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	fa93 f3a3 	rbit	r3, r3
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80079c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079c4:	fab3 f383 	clz	r3, r3
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	4b55      	ldr	r3, [pc, #340]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	461a      	mov	r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80079d8:	4a50      	ldr	r2, [pc, #320]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80079da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d045      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e8:	f7fd f8ac 	bl	8004b44 <HAL_GetTick>
 80079ec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ee:	e00a      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f0:	f7fd f8a8 	bl	8004b44 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e086      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8007a06:	2302      	movs	r3, #2
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	fa93 f3a3 	rbit	r3, r3
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
 8007a12:	2302      	movs	r3, #2
 8007a14:	623b      	str	r3, [r7, #32]
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	fa93 f3a3 	rbit	r3, r3
 8007a1c:	61fb      	str	r3, [r7, #28]
  return result;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a20:	fab3 f383 	clz	r3, r3
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	f043 0302 	orr.w	r3, r3, #2
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d102      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007a34:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	e007      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	fa93 f3a3 	rbit	r3, r3
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	4b35      	ldr	r3, [pc, #212]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	613a      	str	r2, [r7, #16]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	fa92 f2a2 	rbit	r2, r2
 8007a54:	60fa      	str	r2, [r7, #12]
  return result;
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	fab2 f282 	clz	r2, r2
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	f002 021f 	and.w	r2, r2, #31
 8007a68:	2101      	movs	r1, #1
 8007a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0bd      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007a74:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4926      	ldr	r1, [pc, #152]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007a86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d105      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a8e:	4b23      	ldr	r3, [pc, #140]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	4a22      	ldr	r2, [pc, #136]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a98:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007aa6:	4b1d      	ldr	r3, [pc, #116]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	f023 0203 	bic.w	r2, r3, #3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	491a      	ldr	r1, [pc, #104]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ac4:	4b15      	ldr	r3, [pc, #84]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	f023 0210 	bic.w	r2, r3, #16
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	4912      	ldr	r1, [pc, #72]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d008      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ae2:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	490b      	ldr	r1, [pc, #44]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	4903      	ldr	r1, [pc, #12]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3748      	adds	r7, #72	; 0x48
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	40007000 	.word	0x40007000
 8007b24:	10908100 	.word	0x10908100

08007b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e01d      	b.n	8007b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fc fe0a 	bl	8004768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f000 fa72 	bl	8008050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e01d      	b.n	8007bcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f815 	bl	8007bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2202      	movs	r2, #2
 8007bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f000 fa47 	bl	8008050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fd46 	bl	800868c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a1c      	ldr	r2, [pc, #112]	; (8007c78 <HAL_TIM_PWM_Start+0x90>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00e      	beq.n	8007c28 <HAL_TIM_PWM_Start+0x40>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <HAL_TIM_PWM_Start+0x94>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d009      	beq.n	8007c28 <HAL_TIM_PWM_Start+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a19      	ldr	r2, [pc, #100]	; (8007c80 <HAL_TIM_PWM_Start+0x98>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <HAL_TIM_PWM_Start+0x40>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <HAL_TIM_PWM_Start+0x9c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d101      	bne.n	8007c2c <HAL_TIM_PWM_Start+0x44>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e000      	b.n	8007c2e <HAL_TIM_PWM_Start+0x46>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <HAL_TIM_PWM_Start+0xa0>)
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b06      	cmp	r3, #6
 8007c52:	d00b      	beq.n	8007c6c <HAL_TIM_PWM_Start+0x84>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5a:	d007      	beq.n	8007c6c <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00
 8007c7c:	40014000 	.word	0x40014000
 8007c80:	40014400 	.word	0x40014400
 8007c84:	40014800 	.word	0x40014800
 8007c88:	00010007 	.word	0x00010007

08007c8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e083      	b.n	8007da8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7fc fce5 	bl	8004684 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6812      	ldr	r2, [r2, #0]
 8007ccc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f000 f9b5 	bl	8008050 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d2c:	f023 030c 	bic.w	r3, r3, #12
 8007d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	011a      	lsls	r2, r3, #4
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	031b      	lsls	r3, r3, #12
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007d6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <HAL_TIM_Encoder_Start+0x18>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d008      	beq.n	8007dd8 <HAL_TIM_Encoder_Start+0x28>
 8007dc6:	e00f      	b.n	8007de8 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fc5b 	bl	800868c <TIM_CCxChannelCmd>
      break;
 8007dd6:	e016      	b.n	8007e06 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	2104      	movs	r1, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fc53 	bl	800868c <TIM_CCxChannelCmd>
      break;
 8007de6:	e00e      	b.n	8007e06 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2201      	movs	r2, #1
 8007dee:	2100      	movs	r1, #0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fc4b 	bl	800868c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	2104      	movs	r1, #4
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fc44 	bl	800868c <TIM_CCxChannelCmd>
      break;
 8007e04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0201 	orr.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e105      	b.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b14      	cmp	r3, #20
 8007e4e:	f200 80f0 	bhi.w	8008032 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007ead 	.word	0x08007ead
 8007e5c:	08008033 	.word	0x08008033
 8007e60:	08008033 	.word	0x08008033
 8007e64:	08008033 	.word	0x08008033
 8007e68:	08007eed 	.word	0x08007eed
 8007e6c:	08008033 	.word	0x08008033
 8007e70:	08008033 	.word	0x08008033
 8007e74:	08008033 	.word	0x08008033
 8007e78:	08007f2f 	.word	0x08007f2f
 8007e7c:	08008033 	.word	0x08008033
 8007e80:	08008033 	.word	0x08008033
 8007e84:	08008033 	.word	0x08008033
 8007e88:	08007f6f 	.word	0x08007f6f
 8007e8c:	08008033 	.word	0x08008033
 8007e90:	08008033 	.word	0x08008033
 8007e94:	08008033 	.word	0x08008033
 8007e98:	08007fb1 	.word	0x08007fb1
 8007e9c:	08008033 	.word	0x08008033
 8007ea0:	08008033 	.word	0x08008033
 8007ea4:	08008033 	.word	0x08008033
 8007ea8:	08007ff1 	.word	0x08007ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f944 	bl	8008140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0208 	orr.w	r2, r2, #8
 8007ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0204 	bic.w	r2, r2, #4
 8007ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6999      	ldr	r1, [r3, #24]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691a      	ldr	r2, [r3, #16]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	619a      	str	r2, [r3, #24]
      break;
 8007eea:	e0a3      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f9aa 	bl	800824c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6999      	ldr	r1, [r3, #24]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	021a      	lsls	r2, r3, #8
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	619a      	str	r2, [r3, #24]
      break;
 8007f2c:	e082      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fa09 	bl	800834c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0208 	orr.w	r2, r2, #8
 8007f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0204 	bic.w	r2, r2, #4
 8007f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	61da      	str	r2, [r3, #28]
      break;
 8007f6c:	e062      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fa67 	bl	8008448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69da      	ldr	r2, [r3, #28]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69d9      	ldr	r1, [r3, #28]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	021a      	lsls	r2, r3, #8
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	61da      	str	r2, [r3, #28]
      break;
 8007fae:	e041      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 faaa 	bl	8008510 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0208 	orr.w	r2, r2, #8
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0204 	bic.w	r2, r2, #4
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	691a      	ldr	r2, [r3, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fee:	e021      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fae8 	bl	80085cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800800a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	021a      	lsls	r2, r3, #8
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008030:	e000      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8008032:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop

08008050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a32      	ldr	r2, [pc, #200]	; (800812c <TIM_Base_SetConfig+0xdc>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_Base_SetConfig+0x28>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806e:	d003      	beq.n	8008078 <TIM_Base_SetConfig+0x28>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a2f      	ldr	r2, [pc, #188]	; (8008130 <TIM_Base_SetConfig+0xe0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d108      	bne.n	800808a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a27      	ldr	r2, [pc, #156]	; (800812c <TIM_Base_SetConfig+0xdc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <TIM_Base_SetConfig+0x6a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008098:	d00f      	beq.n	80080ba <TIM_Base_SetConfig+0x6a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a24      	ldr	r2, [pc, #144]	; (8008130 <TIM_Base_SetConfig+0xe0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <TIM_Base_SetConfig+0x6a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a23      	ldr	r2, [pc, #140]	; (8008134 <TIM_Base_SetConfig+0xe4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_Base_SetConfig+0x6a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a22      	ldr	r2, [pc, #136]	; (8008138 <TIM_Base_SetConfig+0xe8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_Base_SetConfig+0x6a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a21      	ldr	r2, [pc, #132]	; (800813c <TIM_Base_SetConfig+0xec>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d108      	bne.n	80080cc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a0e      	ldr	r2, [pc, #56]	; (800812c <TIM_Base_SetConfig+0xdc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0xc0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a0e      	ldr	r2, [pc, #56]	; (8008134 <TIM_Base_SetConfig+0xe4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0xc0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a0d      	ldr	r2, [pc, #52]	; (8008138 <TIM_Base_SetConfig+0xe8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0xc0>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a0c      	ldr	r2, [pc, #48]	; (800813c <TIM_Base_SetConfig+0xec>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d103      	bne.n	8008118 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	615a      	str	r2, [r3, #20]
}
 800811e:	bf00      	nop
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40000400 	.word	0x40000400
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400
 800813c:	40014800 	.word	0x40014800

08008140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f023 0201 	bic.w	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800816e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f023 0302 	bic.w	r3, r3, #2
 800818c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a28      	ldr	r2, [pc, #160]	; (800823c <TIM_OC1_SetConfig+0xfc>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_OC1_SetConfig+0x78>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a27      	ldr	r2, [pc, #156]	; (8008240 <TIM_OC1_SetConfig+0x100>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC1_SetConfig+0x78>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a26      	ldr	r2, [pc, #152]	; (8008244 <TIM_OC1_SetConfig+0x104>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC1_SetConfig+0x78>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a25      	ldr	r2, [pc, #148]	; (8008248 <TIM_OC1_SetConfig+0x108>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d10c      	bne.n	80081d2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0308 	bic.w	r3, r3, #8
 80081be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f023 0304 	bic.w	r3, r3, #4
 80081d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a19      	ldr	r2, [pc, #100]	; (800823c <TIM_OC1_SetConfig+0xfc>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00b      	beq.n	80081f2 <TIM_OC1_SetConfig+0xb2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a18      	ldr	r2, [pc, #96]	; (8008240 <TIM_OC1_SetConfig+0x100>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <TIM_OC1_SetConfig+0xb2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a17      	ldr	r2, [pc, #92]	; (8008244 <TIM_OC1_SetConfig+0x104>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d003      	beq.n	80081f2 <TIM_OC1_SetConfig+0xb2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a16      	ldr	r2, [pc, #88]	; (8008248 <TIM_OC1_SetConfig+0x108>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d111      	bne.n	8008216 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	621a      	str	r2, [r3, #32]
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	40012c00 	.word	0x40012c00
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800

0800824c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	f023 0210 	bic.w	r2, r3, #16
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800827a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f023 0320 	bic.w	r3, r3, #32
 800829a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a24      	ldr	r2, [pc, #144]	; (800833c <TIM_OC2_SetConfig+0xf0>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d10d      	bne.n	80082cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a1b      	ldr	r2, [pc, #108]	; (800833c <TIM_OC2_SetConfig+0xf0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00b      	beq.n	80082ec <TIM_OC2_SetConfig+0xa0>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a1a      	ldr	r2, [pc, #104]	; (8008340 <TIM_OC2_SetConfig+0xf4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d007      	beq.n	80082ec <TIM_OC2_SetConfig+0xa0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a19      	ldr	r2, [pc, #100]	; (8008344 <TIM_OC2_SetConfig+0xf8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d003      	beq.n	80082ec <TIM_OC2_SetConfig+0xa0>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a18      	ldr	r2, [pc, #96]	; (8008348 <TIM_OC2_SetConfig+0xfc>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d113      	bne.n	8008314 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4313      	orrs	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	621a      	str	r2, [r3, #32]
}
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40012c00 	.word	0x40012c00
 8008340:	40014000 	.word	0x40014000
 8008344:	40014400 	.word	0x40014400
 8008348:	40014800 	.word	0x40014800

0800834c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a23      	ldr	r2, [pc, #140]	; (8008438 <TIM_OC3_SetConfig+0xec>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d10d      	bne.n	80083ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083c8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a1a      	ldr	r2, [pc, #104]	; (8008438 <TIM_OC3_SetConfig+0xec>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00b      	beq.n	80083ea <TIM_OC3_SetConfig+0x9e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a19      	ldr	r2, [pc, #100]	; (800843c <TIM_OC3_SetConfig+0xf0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d007      	beq.n	80083ea <TIM_OC3_SetConfig+0x9e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a18      	ldr	r2, [pc, #96]	; (8008440 <TIM_OC3_SetConfig+0xf4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d003      	beq.n	80083ea <TIM_OC3_SetConfig+0x9e>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a17      	ldr	r2, [pc, #92]	; (8008444 <TIM_OC3_SetConfig+0xf8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d113      	bne.n	8008412 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	621a      	str	r2, [r3, #32]
}
 800842c:	bf00      	nop
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	40012c00 	.word	0x40012c00
 800843c:	40014000 	.word	0x40014000
 8008440:	40014400 	.word	0x40014400
 8008444:	40014800 	.word	0x40014800

08008448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	031b      	lsls	r3, r3, #12
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a16      	ldr	r2, [pc, #88]	; (8008500 <TIM_OC4_SetConfig+0xb8>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00b      	beq.n	80084c4 <TIM_OC4_SetConfig+0x7c>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a15      	ldr	r2, [pc, #84]	; (8008504 <TIM_OC4_SetConfig+0xbc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d007      	beq.n	80084c4 <TIM_OC4_SetConfig+0x7c>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a14      	ldr	r2, [pc, #80]	; (8008508 <TIM_OC4_SetConfig+0xc0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d003      	beq.n	80084c4 <TIM_OC4_SetConfig+0x7c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a13      	ldr	r2, [pc, #76]	; (800850c <TIM_OC4_SetConfig+0xc4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d109      	bne.n	80084d8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	019b      	lsls	r3, r3, #6
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685a      	ldr	r2, [r3, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	621a      	str	r2, [r3, #32]
}
 80084f2:	bf00      	nop
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40012c00 	.word	0x40012c00
 8008504:	40014000 	.word	0x40014000
 8008508:	40014400 	.word	0x40014400
 800850c:	40014800 	.word	0x40014800

08008510 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008554:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	041b      	lsls	r3, r3, #16
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a15      	ldr	r2, [pc, #84]	; (80085bc <TIM_OC5_SetConfig+0xac>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00b      	beq.n	8008582 <TIM_OC5_SetConfig+0x72>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a14      	ldr	r2, [pc, #80]	; (80085c0 <TIM_OC5_SetConfig+0xb0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d007      	beq.n	8008582 <TIM_OC5_SetConfig+0x72>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <TIM_OC5_SetConfig+0xb4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d003      	beq.n	8008582 <TIM_OC5_SetConfig+0x72>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a12      	ldr	r2, [pc, #72]	; (80085c8 <TIM_OC5_SetConfig+0xb8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d109      	bne.n	8008596 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	621a      	str	r2, [r3, #32]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	40012c00 	.word	0x40012c00
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40014400 	.word	0x40014400
 80085c8:	40014800 	.word	0x40014800

080085cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	051b      	lsls	r3, r3, #20
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a16      	ldr	r2, [pc, #88]	; (800867c <TIM_OC6_SetConfig+0xb0>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00b      	beq.n	8008640 <TIM_OC6_SetConfig+0x74>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a15      	ldr	r2, [pc, #84]	; (8008680 <TIM_OC6_SetConfig+0xb4>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_OC6_SetConfig+0x74>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a14      	ldr	r2, [pc, #80]	; (8008684 <TIM_OC6_SetConfig+0xb8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_OC6_SetConfig+0x74>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a13      	ldr	r2, [pc, #76]	; (8008688 <TIM_OC6_SetConfig+0xbc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d109      	bne.n	8008654 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	029b      	lsls	r3, r3, #10
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	621a      	str	r2, [r3, #32]
}
 800866e:	bf00      	nop
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40012c00 	.word	0x40012c00
 8008680:	40014000 	.word	0x40014000
 8008684:	40014400 	.word	0x40014400
 8008688:	40014800 	.word	0x40014800

0800868c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f003 031f 	and.w	r3, r3, #31
 800869e:	2201      	movs	r2, #1
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a1a      	ldr	r2, [r3, #32]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	43db      	mvns	r3, r3
 80086ae:	401a      	ands	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a1a      	ldr	r2, [r3, #32]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f003 031f 	and.w	r3, r3, #31
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	fa01 f303 	lsl.w	r3, r1, r3
 80086c4:	431a      	orrs	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
	...

080086d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e054      	b.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a24      	ldr	r2, [pc, #144]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d108      	bne.n	800872c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00e      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008758:	d009      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a13      	ldr	r2, [pc, #76]	; (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d004      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d10c      	bne.n	8008788 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4313      	orrs	r3, r2
 800877e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40012c00 	.word	0x40012c00
 80087ac:	40000400 	.word	0x40000400
 80087b0:	40014000 	.word	0x40014000

080087b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e060      	b.n	8008892 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	041b      	lsls	r3, r3, #16
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d115      	bne.n	8008880 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	051b      	lsls	r3, r3, #20
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40012c00 	.word	0x40012c00

080088a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e040      	b.n	8008938 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fc f818 	bl	80048fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2224      	movs	r2, #36	; 0x24
 80088d0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0201 	bic.w	r2, r2, #1
 80088e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fbc8 	bl	8009078 <UART_SetConfig>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e022      	b.n	8008938 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fd3e 	bl	800937c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800890e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689a      	ldr	r2, [r3, #8]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800891e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0201 	orr.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fdc5 	bl	80094c0 <UART_CheckIdleState>
 8008936:	4603      	mov	r3, r0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08a      	sub	sp, #40	; 0x28
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	4613      	mov	r3, r2
 800894e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008954:	2b20      	cmp	r3, #32
 8008956:	f040 80bb 	bne.w	8008ad0 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <HAL_UART_Receive+0x26>
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e0b3      	b.n	8008ad2 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_UART_Receive+0x38>
 8008974:	2302      	movs	r3, #2
 8008976:	e0ac      	b.n	8008ad2 <HAL_UART_Receive+0x192>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2222      	movs	r2, #34	; 0x22
 800898a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800898c:	f7fc f8da 	bl	8004b44 <HAL_GetTick>
 8008990:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	88fa      	ldrh	r2, [r7, #6]
 800899e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089aa:	d10e      	bne.n	80089ca <HAL_UART_Receive+0x8a>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <HAL_UART_Receive+0x80>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089be:	e02d      	b.n	8008a1c <HAL_UART_Receive+0xdc>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	22ff      	movs	r2, #255	; 0xff
 80089c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089c8:	e028      	b.n	8008a1c <HAL_UART_Receive+0xdc>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <HAL_UART_Receive+0xae>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <HAL_UART_Receive+0xa4>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089e2:	e01b      	b.n	8008a1c <HAL_UART_Receive+0xdc>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	227f      	movs	r2, #127	; 0x7f
 80089e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ec:	e016      	b.n	8008a1c <HAL_UART_Receive+0xdc>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f6:	d10d      	bne.n	8008a14 <HAL_UART_Receive+0xd4>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <HAL_UART_Receive+0xca>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	227f      	movs	r2, #127	; 0x7f
 8008a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a08:	e008      	b.n	8008a1c <HAL_UART_Receive+0xdc>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	223f      	movs	r2, #63	; 0x3f
 8008a0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a12:	e003      	b.n	8008a1c <HAL_UART_Receive+0xdc>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a22:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a2c:	d108      	bne.n	8008a40 <HAL_UART_Receive+0x100>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	61bb      	str	r3, [r7, #24]
 8008a3e:	e003      	b.n	8008a48 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a48:	e033      	b.n	8008ab2 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2200      	movs	r2, #0
 8008a52:	2120      	movs	r1, #32
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fd78 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e036      	b.n	8008ad2 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10c      	bne.n	8008a84 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	8a7b      	ldrh	r3, [r7, #18]
 8008a74:	4013      	ands	r3, r2
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	3302      	adds	r3, #2
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	e00d      	b.n	8008aa0 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	8a7b      	ldrh	r3, [r7, #18]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	4013      	ands	r3, r2
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1c5      	bne.n	8008a4a <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e000      	b.n	8008ad2 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8008ad0:	2302      	movs	r3, #2
  }
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	d164      	bne.n	8008bbc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_UART_Transmit_DMA+0x22>
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e05d      	b.n	8008bbe <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_UART_Transmit_DMA+0x34>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e056      	b.n	8008bbe <HAL_UART_Transmit_DMA+0xe2>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	88fa      	ldrh	r2, [r7, #6]
 8008b22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	88fa      	ldrh	r2, [r7, #6]
 8008b2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2221      	movs	r2, #33	; 0x21
 8008b38:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d02a      	beq.n	8008b98 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b46:	4a20      	ldr	r2, [pc, #128]	; (8008bc8 <HAL_UART_Transmit_DMA+0xec>)
 8008b48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b4e:	4a1f      	ldr	r2, [pc, #124]	; (8008bcc <HAL_UART_Transmit_DMA+0xf0>)
 8008b50:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b56:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <HAL_UART_Transmit_DMA+0xf4>)
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b5e:	2200      	movs	r2, #0
 8008b60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3328      	adds	r3, #40	; 0x28
 8008b72:	461a      	mov	r2, r3
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	f7fd f8a3 	bl	8005cc0 <HAL_DMA_Start_IT>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2210      	movs	r2, #16
 8008b84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e012      	b.n	8008bbe <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2240      	movs	r2, #64	; 0x40
 8008b9e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bb6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e000      	b.n	8008bbe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	080096ab 	.word	0x080096ab
 8008bcc:	080096f9 	.word	0x080096f9
 8008bd0:	08009793 	.word	0x08009793

08008bd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d16c      	bne.n	8008cc4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <HAL_UART_Receive_DMA+0x22>
 8008bf0:	88fb      	ldrh	r3, [r7, #6]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e065      	b.n	8008cc6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_UART_Receive_DMA+0x34>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e05e      	b.n	8008cc6 <HAL_UART_Receive_DMA+0xf2>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	88fa      	ldrh	r2, [r7, #6]
 8008c1a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2222      	movs	r2, #34	; 0x22
 8008c28:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d02a      	beq.n	8008c88 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c36:	4a26      	ldr	r2, [pc, #152]	; (8008cd0 <HAL_UART_Receive_DMA+0xfc>)
 8008c38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3e:	4a25      	ldr	r2, [pc, #148]	; (8008cd4 <HAL_UART_Receive_DMA+0x100>)
 8008c40:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c46:	4a24      	ldr	r2, [pc, #144]	; (8008cd8 <HAL_UART_Receive_DMA+0x104>)
 8008c48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4e:	2200      	movs	r2, #0
 8008c50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3324      	adds	r3, #36	; 0x24
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c62:	461a      	mov	r2, r3
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	f7fd f82b 	bl	8005cc0 <HAL_DMA_Start_IT>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2210      	movs	r2, #16
 8008c74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2220      	movs	r2, #32
 8008c82:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e01e      	b.n	8008cc6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c9e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cbe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e000      	b.n	8008cc6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008cc4:	2302      	movs	r3, #2
  }
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	08009715 	.word	0x08009715
 8008cd4:	08009777 	.word	0x08009777
 8008cd8:	08009793 	.word	0x08009793

08008cdc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce8:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfa:	2b80      	cmp	r3, #128	; 0x80
 8008cfc:	d126      	bne.n	8008d4c <HAL_UART_DMAStop+0x70>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b21      	cmp	r3, #33	; 0x21
 8008d02:	d123      	bne.n	8008d4c <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689a      	ldr	r2, [r3, #8]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d12:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d014      	beq.n	8008d46 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fd f82c 	bl	8005d7e <HAL_DMA_Abort>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00c      	beq.n	8008d46 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fd f93e 	bl	8005fb2 <HAL_DMA_GetError>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d104      	bne.n	8008d46 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2210      	movs	r2, #16
 8008d40:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e031      	b.n	8008daa <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fc7a 	bl	8009640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b40      	cmp	r3, #64	; 0x40
 8008d58:	d126      	bne.n	8008da8 <HAL_UART_DMAStop+0xcc>
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b22      	cmp	r3, #34	; 0x22
 8008d5e:	d123      	bne.n	8008da8 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d6e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d014      	beq.n	8008da2 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fc fffe 	bl	8005d7e <HAL_DMA_Abort>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00c      	beq.n	8008da2 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fd f910 	bl	8005fb2 <HAL_DMA_GetError>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d104      	bne.n	8008da2 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2210      	movs	r2, #16
 8008d9c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e003      	b.n	8008daa <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fc61 	bl	800966a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008dda:	4013      	ands	r3, r2
 8008ddc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d113      	bne.n	8008e0c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00e      	beq.n	8008e0c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d009      	beq.n	8008e0c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8113 	beq.w	8009028 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	4798      	blx	r3
      }
      return;
 8008e0a:	e10d      	b.n	8009028 <HAL_UART_IRQHandler+0x274>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80d6 	beq.w	8008fc0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 80cb 	beq.w	8008fc0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00e      	beq.n	8008e52 <HAL_UART_IRQHandler+0x9e>
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d009      	beq.n	8008e52 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2201      	movs	r2, #1
 8008e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00e      	beq.n	8008e7a <HAL_UART_IRQHandler+0xc6>
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e72:	f043 0204 	orr.w	r2, r3, #4
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00e      	beq.n	8008ea2 <HAL_UART_IRQHandler+0xee>
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2204      	movs	r2, #4
 8008e94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e9a:	f043 0202 	orr.w	r2, r3, #2
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	f003 0308 	and.w	r3, r3, #8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d013      	beq.n	8008ed4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d009      	beq.n	8008ed4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2208      	movs	r2, #8
 8008ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ecc:	f043 0208 	orr.w	r2, r3, #8
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00f      	beq.n	8008efe <HAL_UART_IRQHandler+0x14a>
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00a      	beq.n	8008efe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ef6:	f043 0220 	orr.w	r2, r3, #32
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 8092 	beq.w	800902c <HAL_UART_IRQHandler+0x278>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00c      	beq.n	8008f2c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	d004      	beq.n	8008f4a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d031      	beq.n	8008fae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fb8d 	bl	800966a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5a:	2b40      	cmp	r3, #64	; 0x40
 8008f5c:	d123      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d013      	beq.n	8008f9e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7a:	4a2f      	ldr	r2, [pc, #188]	; (8009038 <HAL_UART_IRQHandler+0x284>)
 8008f7c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fc ff34 	bl	8005df0 <HAL_DMA_Abort_IT>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d016      	beq.n	8008fbc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f9c:	e00e      	b.n	8008fbc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f860 	bl	8009064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa4:	e00a      	b.n	8008fbc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f85c 	bl	8009064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fac:	e006      	b.n	8008fbc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f858 	bl	8009064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008fba:	e037      	b.n	800902c <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	bf00      	nop
    return;
 8008fbe:	e035      	b.n	800902c <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00d      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x232>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d008      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fc42 	bl	8009868 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fe4:	e025      	b.n	8009032 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d008      	beq.n	800900c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d016      	beq.n	8009030 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	4798      	blx	r3
    }
    return;
 800900a:	e011      	b.n	8009030 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <HAL_UART_IRQHandler+0x27e>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d008      	beq.n	8009032 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fc08 	bl	8009836 <UART_EndTransmit_IT>
    return;
 8009026:	e004      	b.n	8009032 <HAL_UART_IRQHandler+0x27e>
      return;
 8009028:	bf00      	nop
 800902a:	e002      	b.n	8009032 <HAL_UART_IRQHandler+0x27e>
    return;
 800902c:	bf00      	nop
 800902e:	e000      	b.n	8009032 <HAL_UART_IRQHandler+0x27e>
    return;
 8009030:	bf00      	nop
  }

}
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	0800980b 	.word	0x0800980b

0800903c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009080:	2300      	movs	r3, #0
 8009082:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	4313      	orrs	r3, r2
 800909e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	4ba2      	ldr	r3, [pc, #648]	; (8009330 <UART_SetConfig+0x2b8>)
 80090a8:	4013      	ands	r3, r2
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6812      	ldr	r2, [r2, #0]
 80090ae:	6939      	ldr	r1, [r7, #16]
 80090b0:	430b      	orrs	r3, r1
 80090b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a90      	ldr	r2, [pc, #576]	; (8009334 <UART_SetConfig+0x2bc>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d120      	bne.n	800913a <UART_SetConfig+0xc2>
 80090f8:	4b8f      	ldr	r3, [pc, #572]	; (8009338 <UART_SetConfig+0x2c0>)
 80090fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	2b03      	cmp	r3, #3
 8009102:	d817      	bhi.n	8009134 <UART_SetConfig+0xbc>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0x94>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	0800911d 	.word	0x0800911d
 8009110:	08009129 	.word	0x08009129
 8009114:	0800912f 	.word	0x0800912f
 8009118:	08009123 	.word	0x08009123
 800911c:	2300      	movs	r3, #0
 800911e:	77fb      	strb	r3, [r7, #31]
 8009120:	e01d      	b.n	800915e <UART_SetConfig+0xe6>
 8009122:	2302      	movs	r3, #2
 8009124:	77fb      	strb	r3, [r7, #31]
 8009126:	e01a      	b.n	800915e <UART_SetConfig+0xe6>
 8009128:	2304      	movs	r3, #4
 800912a:	77fb      	strb	r3, [r7, #31]
 800912c:	e017      	b.n	800915e <UART_SetConfig+0xe6>
 800912e:	2308      	movs	r3, #8
 8009130:	77fb      	strb	r3, [r7, #31]
 8009132:	e014      	b.n	800915e <UART_SetConfig+0xe6>
 8009134:	2310      	movs	r3, #16
 8009136:	77fb      	strb	r3, [r7, #31]
 8009138:	e011      	b.n	800915e <UART_SetConfig+0xe6>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a7f      	ldr	r2, [pc, #508]	; (800933c <UART_SetConfig+0x2c4>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d102      	bne.n	800914a <UART_SetConfig+0xd2>
 8009144:	2300      	movs	r3, #0
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e009      	b.n	800915e <UART_SetConfig+0xe6>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a7c      	ldr	r2, [pc, #496]	; (8009340 <UART_SetConfig+0x2c8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d102      	bne.n	800915a <UART_SetConfig+0xe2>
 8009154:	2300      	movs	r3, #0
 8009156:	77fb      	strb	r3, [r7, #31]
 8009158:	e001      	b.n	800915e <UART_SetConfig+0xe6>
 800915a:	2310      	movs	r3, #16
 800915c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009166:	f040 8083 	bne.w	8009270 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800916a:	7ffb      	ldrb	r3, [r7, #31]
 800916c:	2b08      	cmp	r3, #8
 800916e:	d85f      	bhi.n	8009230 <UART_SetConfig+0x1b8>
 8009170:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <UART_SetConfig+0x100>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	0800919d 	.word	0x0800919d
 800917c:	080091bd 	.word	0x080091bd
 8009180:	080091dd 	.word	0x080091dd
 8009184:	08009231 	.word	0x08009231
 8009188:	080091f9 	.word	0x080091f9
 800918c:	08009231 	.word	0x08009231
 8009190:	08009231 	.word	0x08009231
 8009194:	08009231 	.word	0x08009231
 8009198:	08009219 	.word	0x08009219
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800919c:	f7fe fb5a 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 80091a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	005a      	lsls	r2, r3, #1
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	441a      	add	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	61bb      	str	r3, [r7, #24]
        break;
 80091ba:	e03c      	b.n	8009236 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091bc:	f7fe fb6c 	bl	8007898 <HAL_RCC_GetPCLK2Freq>
 80091c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	005a      	lsls	r2, r3, #1
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	441a      	add	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	61bb      	str	r3, [r7, #24]
        break;
 80091da:	e02c      	b.n	8009236 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	085b      	lsrs	r3, r3, #1
 80091e2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80091e6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	6852      	ldr	r2, [r2, #4]
 80091ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	61bb      	str	r3, [r7, #24]
        break;
 80091f6:	e01e      	b.n	8009236 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091f8:	f7fe fab6 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 80091fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	005a      	lsls	r2, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	441a      	add	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	61bb      	str	r3, [r7, #24]
        break;
 8009216:	e00e      	b.n	8009236 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	fbb2 f3f3 	udiv	r3, r2, r3
 800922a:	b29b      	uxth	r3, r3
 800922c:	61bb      	str	r3, [r7, #24]
        break;
 800922e:	e002      	b.n	8009236 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	75fb      	strb	r3, [r7, #23]
        break;
 8009234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b0f      	cmp	r3, #15
 800923a:	d916      	bls.n	800926a <UART_SetConfig+0x1f2>
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009242:	d212      	bcs.n	800926a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f023 030f 	bic.w	r3, r3, #15
 800924c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	085b      	lsrs	r3, r3, #1
 8009252:	b29b      	uxth	r3, r3
 8009254:	f003 0307 	and.w	r3, r3, #7
 8009258:	b29a      	uxth	r2, r3
 800925a:	897b      	ldrh	r3, [r7, #10]
 800925c:	4313      	orrs	r3, r2
 800925e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	897a      	ldrh	r2, [r7, #10]
 8009266:	60da      	str	r2, [r3, #12]
 8009268:	e07d      	b.n	8009366 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	75fb      	strb	r3, [r7, #23]
 800926e:	e07a      	b.n	8009366 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8009270:	7ffb      	ldrb	r3, [r7, #31]
 8009272:	2b08      	cmp	r3, #8
 8009274:	d866      	bhi.n	8009344 <UART_SetConfig+0x2cc>
 8009276:	a201      	add	r2, pc, #4	; (adr r2, 800927c <UART_SetConfig+0x204>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	080092a1 	.word	0x080092a1
 8009280:	080092bf 	.word	0x080092bf
 8009284:	080092dd 	.word	0x080092dd
 8009288:	08009345 	.word	0x08009345
 800928c:	080092f9 	.word	0x080092f9
 8009290:	08009345 	.word	0x08009345
 8009294:	08009345 	.word	0x08009345
 8009298:	08009345 	.word	0x08009345
 800929c:	08009317 	.word	0x08009317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a0:	f7fe fad8 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 80092a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	085a      	lsrs	r2, r3, #1
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	441a      	add	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	61bb      	str	r3, [r7, #24]
        break;
 80092bc:	e045      	b.n	800934a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092be:	f7fe faeb 	bl	8007898 <HAL_RCC_GetPCLK2Freq>
 80092c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	085a      	lsrs	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	441a      	add	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	61bb      	str	r3, [r7, #24]
        break;
 80092da:	e036      	b.n	800934a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	085b      	lsrs	r3, r3, #1
 80092e2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80092e6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6852      	ldr	r2, [r2, #4]
 80092ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	61bb      	str	r3, [r7, #24]
        break;
 80092f6:	e028      	b.n	800934a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092f8:	f7fe fa36 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 80092fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	085a      	lsrs	r2, r3, #1
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	441a      	add	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009310:	b29b      	uxth	r3, r3
 8009312:	61bb      	str	r3, [r7, #24]
        break;
 8009314:	e019      	b.n	800934a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	fbb2 f3f3 	udiv	r3, r2, r3
 8009328:	b29b      	uxth	r3, r3
 800932a:	61bb      	str	r3, [r7, #24]
        break;
 800932c:	e00d      	b.n	800934a <UART_SetConfig+0x2d2>
 800932e:	bf00      	nop
 8009330:	efff69f3 	.word	0xefff69f3
 8009334:	40013800 	.word	0x40013800
 8009338:	40021000 	.word	0x40021000
 800933c:	40004400 	.word	0x40004400
 8009340:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	75fb      	strb	r3, [r7, #23]
        break;
 8009348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	2b0f      	cmp	r3, #15
 800934e:	d908      	bls.n	8009362 <UART_SetConfig+0x2ea>
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009356:	d204      	bcs.n	8009362 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	60da      	str	r2, [r3, #12]
 8009360:	e001      	b.n	8009366 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	430a      	orrs	r2, r1
 800942c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01a      	beq.n	8009492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800947a:	d10a      	bne.n	8009492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	605a      	str	r2, [r3, #4]
  }
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80094ce:	f7fb fb39 	bl	8004b44 <HAL_GetTick>
 80094d2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0308 	and.w	r3, r3, #8
 80094de:	2b08      	cmp	r3, #8
 80094e0:	d10e      	bne.n	8009500 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f82a 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e020      	b.n	8009542 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0304 	and.w	r3, r3, #4
 800950a:	2b04      	cmp	r3, #4
 800950c:	d10e      	bne.n	800952c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800950e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f814 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e00a      	b.n	8009542 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2220      	movs	r2, #32
 8009530:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	603b      	str	r3, [r7, #0]
 8009556:	4613      	mov	r3, r2
 8009558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800955a:	e05d      	b.n	8009618 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009562:	d059      	beq.n	8009618 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009564:	f7fb faee 	bl	8004b44 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	429a      	cmp	r2, r3
 8009572:	d302      	bcc.n	800957a <UART_WaitOnFlagUntilTimeout+0x30>
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d11b      	bne.n	80095b2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009588:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0201 	bic.w	r2, r2, #1
 8009598:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2220      	movs	r2, #32
 800959e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2220      	movs	r2, #32
 80095a4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e042      	b.n	8009638 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d02b      	beq.n	8009618 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ce:	d123      	bne.n	8009618 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095d8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0201 	bic.w	r2, r2, #1
 80095f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2220      	movs	r2, #32
 80095fe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2220      	movs	r2, #32
 8009604:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2220      	movs	r2, #32
 800960a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e00f      	b.n	8009638 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69da      	ldr	r2, [r3, #28]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	4013      	ands	r3, r2
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	429a      	cmp	r2, r3
 8009626:	bf0c      	ite	eq
 8009628:	2301      	moveq	r3, #1
 800962a:	2300      	movne	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	429a      	cmp	r2, r3
 8009634:	d092      	beq.n	800955c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009656:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2220      	movs	r2, #32
 800965c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009680:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0201 	bic.w	r2, r2, #1
 8009690:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d014      	beq.n	80096ea <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096d6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096e6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096e8:	e002      	b.n	80096f0 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7f7 fe7a 	bl	80013e4 <HAL_UART_TxCpltCallback>
}
 80096f0:	bf00      	nop
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff fc98 	bl	800903c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	2b20      	cmp	r3, #32
 8009728:	d01e      	beq.n	8009768 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009740:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0201 	bic.w	r2, r2, #1
 8009750:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009760:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2220      	movs	r2, #32
 8009766:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f7f7 fe29 	bl	80013c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff fc63 	bl	8009050 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b6:	2b80      	cmp	r3, #128	; 0x80
 80097b8:	d109      	bne.n	80097ce <UART_DMAError+0x3c>
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b21      	cmp	r3, #33	; 0x21
 80097be:	d106      	bne.n	80097ce <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80097c8:	6978      	ldr	r0, [r7, #20]
 80097ca:	f7ff ff39 	bl	8009640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d8:	2b40      	cmp	r3, #64	; 0x40
 80097da:	d109      	bne.n	80097f0 <UART_DMAError+0x5e>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b22      	cmp	r3, #34	; 0x22
 80097e0:	d106      	bne.n	80097f0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80097ea:	6978      	ldr	r0, [r7, #20]
 80097ec:	f7ff ff3d 	bl	800966a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f4:	f043 0210 	orr.w	r2, r3, #16
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097fc:	6978      	ldr	r0, [r7, #20]
 80097fe:	f7ff fc31 	bl	8009064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009802:	bf00      	nop
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7ff fc1b 	bl	8009064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800984c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7f7 fdc2 	bl	80013e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <__errno>:
 800987c:	4b01      	ldr	r3, [pc, #4]	; (8009884 <__errno+0x8>)
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	2000001c 	.word	0x2000001c

08009888 <__sflush_r>:
 8009888:	898a      	ldrh	r2, [r1, #12]
 800988a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988e:	4605      	mov	r5, r0
 8009890:	0710      	lsls	r0, r2, #28
 8009892:	460c      	mov	r4, r1
 8009894:	d458      	bmi.n	8009948 <__sflush_r+0xc0>
 8009896:	684b      	ldr	r3, [r1, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	dc05      	bgt.n	80098a8 <__sflush_r+0x20>
 800989c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc02      	bgt.n	80098a8 <__sflush_r+0x20>
 80098a2:	2000      	movs	r0, #0
 80098a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	d0f9      	beq.n	80098a2 <__sflush_r+0x1a>
 80098ae:	2300      	movs	r3, #0
 80098b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098b4:	682f      	ldr	r7, [r5, #0]
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	d032      	beq.n	8009920 <__sflush_r+0x98>
 80098ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	075a      	lsls	r2, r3, #29
 80098c0:	d505      	bpl.n	80098ce <__sflush_r+0x46>
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	1ac0      	subs	r0, r0, r3
 80098c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c8:	b10b      	cbz	r3, 80098ce <__sflush_r+0x46>
 80098ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098cc:	1ac0      	subs	r0, r0, r3
 80098ce:	2300      	movs	r3, #0
 80098d0:	4602      	mov	r2, r0
 80098d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d4:	6a21      	ldr	r1, [r4, #32]
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b0      	blx	r6
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	d106      	bne.n	80098ee <__sflush_r+0x66>
 80098e0:	6829      	ldr	r1, [r5, #0]
 80098e2:	291d      	cmp	r1, #29
 80098e4:	d82c      	bhi.n	8009940 <__sflush_r+0xb8>
 80098e6:	4a2a      	ldr	r2, [pc, #168]	; (8009990 <__sflush_r+0x108>)
 80098e8:	40ca      	lsrs	r2, r1
 80098ea:	07d6      	lsls	r6, r2, #31
 80098ec:	d528      	bpl.n	8009940 <__sflush_r+0xb8>
 80098ee:	2200      	movs	r2, #0
 80098f0:	6062      	str	r2, [r4, #4]
 80098f2:	04d9      	lsls	r1, r3, #19
 80098f4:	6922      	ldr	r2, [r4, #16]
 80098f6:	6022      	str	r2, [r4, #0]
 80098f8:	d504      	bpl.n	8009904 <__sflush_r+0x7c>
 80098fa:	1c42      	adds	r2, r0, #1
 80098fc:	d101      	bne.n	8009902 <__sflush_r+0x7a>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b903      	cbnz	r3, 8009904 <__sflush_r+0x7c>
 8009902:	6560      	str	r0, [r4, #84]	; 0x54
 8009904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009906:	602f      	str	r7, [r5, #0]
 8009908:	2900      	cmp	r1, #0
 800990a:	d0ca      	beq.n	80098a2 <__sflush_r+0x1a>
 800990c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <__sflush_r+0x92>
 8009914:	4628      	mov	r0, r5
 8009916:	f000 f9b1 	bl	8009c7c <_free_r>
 800991a:	2000      	movs	r0, #0
 800991c:	6360      	str	r0, [r4, #52]	; 0x34
 800991e:	e7c1      	b.n	80098a4 <__sflush_r+0x1c>
 8009920:	6a21      	ldr	r1, [r4, #32]
 8009922:	2301      	movs	r3, #1
 8009924:	4628      	mov	r0, r5
 8009926:	47b0      	blx	r6
 8009928:	1c41      	adds	r1, r0, #1
 800992a:	d1c7      	bne.n	80098bc <__sflush_r+0x34>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0c4      	beq.n	80098bc <__sflush_r+0x34>
 8009932:	2b1d      	cmp	r3, #29
 8009934:	d001      	beq.n	800993a <__sflush_r+0xb2>
 8009936:	2b16      	cmp	r3, #22
 8009938:	d101      	bne.n	800993e <__sflush_r+0xb6>
 800993a:	602f      	str	r7, [r5, #0]
 800993c:	e7b1      	b.n	80098a2 <__sflush_r+0x1a>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	e7ad      	b.n	80098a4 <__sflush_r+0x1c>
 8009948:	690f      	ldr	r7, [r1, #16]
 800994a:	2f00      	cmp	r7, #0
 800994c:	d0a9      	beq.n	80098a2 <__sflush_r+0x1a>
 800994e:	0793      	lsls	r3, r2, #30
 8009950:	680e      	ldr	r6, [r1, #0]
 8009952:	bf08      	it	eq
 8009954:	694b      	ldreq	r3, [r1, #20]
 8009956:	600f      	str	r7, [r1, #0]
 8009958:	bf18      	it	ne
 800995a:	2300      	movne	r3, #0
 800995c:	eba6 0807 	sub.w	r8, r6, r7
 8009960:	608b      	str	r3, [r1, #8]
 8009962:	f1b8 0f00 	cmp.w	r8, #0
 8009966:	dd9c      	ble.n	80098a2 <__sflush_r+0x1a>
 8009968:	6a21      	ldr	r1, [r4, #32]
 800996a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800996c:	4643      	mov	r3, r8
 800996e:	463a      	mov	r2, r7
 8009970:	4628      	mov	r0, r5
 8009972:	47b0      	blx	r6
 8009974:	2800      	cmp	r0, #0
 8009976:	dc06      	bgt.n	8009986 <__sflush_r+0xfe>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e78e      	b.n	80098a4 <__sflush_r+0x1c>
 8009986:	4407      	add	r7, r0
 8009988:	eba8 0800 	sub.w	r8, r8, r0
 800998c:	e7e9      	b.n	8009962 <__sflush_r+0xda>
 800998e:	bf00      	nop
 8009990:	20400001 	.word	0x20400001

08009994 <_fflush_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	690b      	ldr	r3, [r1, #16]
 8009998:	4605      	mov	r5, r0
 800999a:	460c      	mov	r4, r1
 800999c:	b913      	cbnz	r3, 80099a4 <_fflush_r+0x10>
 800999e:	2500      	movs	r5, #0
 80099a0:	4628      	mov	r0, r5
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	b118      	cbz	r0, 80099ae <_fflush_r+0x1a>
 80099a6:	6983      	ldr	r3, [r0, #24]
 80099a8:	b90b      	cbnz	r3, 80099ae <_fflush_r+0x1a>
 80099aa:	f000 f899 	bl	8009ae0 <__sinit>
 80099ae:	4b14      	ldr	r3, [pc, #80]	; (8009a00 <_fflush_r+0x6c>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d11b      	bne.n	80099ec <_fflush_r+0x58>
 80099b4:	686c      	ldr	r4, [r5, #4]
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0ef      	beq.n	800999e <_fflush_r+0xa>
 80099be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099c0:	07d0      	lsls	r0, r2, #31
 80099c2:	d404      	bmi.n	80099ce <_fflush_r+0x3a>
 80099c4:	0599      	lsls	r1, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_fflush_r+0x3a>
 80099c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ca:	f000 f94c 	bl	8009c66 <__retarget_lock_acquire_recursive>
 80099ce:	4628      	mov	r0, r5
 80099d0:	4621      	mov	r1, r4
 80099d2:	f7ff ff59 	bl	8009888 <__sflush_r>
 80099d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d8:	07da      	lsls	r2, r3, #31
 80099da:	4605      	mov	r5, r0
 80099dc:	d4e0      	bmi.n	80099a0 <_fflush_r+0xc>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	d4dd      	bmi.n	80099a0 <_fflush_r+0xc>
 80099e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e6:	f000 f93f 	bl	8009c68 <__retarget_lock_release_recursive>
 80099ea:	e7d9      	b.n	80099a0 <_fflush_r+0xc>
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <_fflush_r+0x70>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	d101      	bne.n	80099f6 <_fflush_r+0x62>
 80099f2:	68ac      	ldr	r4, [r5, #8]
 80099f4:	e7df      	b.n	80099b6 <_fflush_r+0x22>
 80099f6:	4b04      	ldr	r3, [pc, #16]	; (8009a08 <_fflush_r+0x74>)
 80099f8:	429c      	cmp	r4, r3
 80099fa:	bf08      	it	eq
 80099fc:	68ec      	ldreq	r4, [r5, #12]
 80099fe:	e7da      	b.n	80099b6 <_fflush_r+0x22>
 8009a00:	0800e4fc 	.word	0x0800e4fc
 8009a04:	0800e51c 	.word	0x0800e51c
 8009a08:	0800e4dc 	.word	0x0800e4dc

08009a0c <fflush>:
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	b920      	cbnz	r0, 8009a1a <fflush+0xe>
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <fflush+0x18>)
 8009a12:	4905      	ldr	r1, [pc, #20]	; (8009a28 <fflush+0x1c>)
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	f000 b8e1 	b.w	8009bdc <_fwalk_reent>
 8009a1a:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <fflush+0x20>)
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	f7ff bfb9 	b.w	8009994 <_fflush_r>
 8009a22:	bf00      	nop
 8009a24:	0800e53c 	.word	0x0800e53c
 8009a28:	08009995 	.word	0x08009995
 8009a2c:	2000001c 	.word	0x2000001c

08009a30 <std>:
 8009a30:	2300      	movs	r3, #0
 8009a32:	b510      	push	{r4, lr}
 8009a34:	4604      	mov	r4, r0
 8009a36:	e9c0 3300 	strd	r3, r3, [r0]
 8009a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a3e:	6083      	str	r3, [r0, #8]
 8009a40:	8181      	strh	r1, [r0, #12]
 8009a42:	6643      	str	r3, [r0, #100]	; 0x64
 8009a44:	81c2      	strh	r2, [r0, #14]
 8009a46:	6183      	str	r3, [r0, #24]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	2208      	movs	r2, #8
 8009a4c:	305c      	adds	r0, #92	; 0x5c
 8009a4e:	f000 f90c 	bl	8009c6a <memset>
 8009a52:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <std+0x38>)
 8009a54:	6263      	str	r3, [r4, #36]	; 0x24
 8009a56:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <std+0x3c>)
 8009a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <std+0x40>)
 8009a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <std+0x44>)
 8009a60:	6224      	str	r4, [r4, #32]
 8009a62:	6323      	str	r3, [r4, #48]	; 0x30
 8009a64:	bd10      	pop	{r4, pc}
 8009a66:	bf00      	nop
 8009a68:	0800acfd 	.word	0x0800acfd
 8009a6c:	0800ad1f 	.word	0x0800ad1f
 8009a70:	0800ad57 	.word	0x0800ad57
 8009a74:	0800ad7b 	.word	0x0800ad7b

08009a78 <_cleanup_r>:
 8009a78:	4901      	ldr	r1, [pc, #4]	; (8009a80 <_cleanup_r+0x8>)
 8009a7a:	f000 b8af 	b.w	8009bdc <_fwalk_reent>
 8009a7e:	bf00      	nop
 8009a80:	08009995 	.word	0x08009995

08009a84 <__sfmoreglue>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	1e4a      	subs	r2, r1, #1
 8009a88:	2568      	movs	r5, #104	; 0x68
 8009a8a:	4355      	muls	r5, r2
 8009a8c:	460e      	mov	r6, r1
 8009a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a92:	f000 f943 	bl	8009d1c <_malloc_r>
 8009a96:	4604      	mov	r4, r0
 8009a98:	b140      	cbz	r0, 8009aac <__sfmoreglue+0x28>
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009aa0:	300c      	adds	r0, #12
 8009aa2:	60a0      	str	r0, [r4, #8]
 8009aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009aa8:	f000 f8df 	bl	8009c6a <memset>
 8009aac:	4620      	mov	r0, r4
 8009aae:	bd70      	pop	{r4, r5, r6, pc}

08009ab0 <__sfp_lock_acquire>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__sfp_lock_acquire+0x8>)
 8009ab2:	f000 b8d8 	b.w	8009c66 <__retarget_lock_acquire_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	200017b0 	.word	0x200017b0

08009abc <__sfp_lock_release>:
 8009abc:	4801      	ldr	r0, [pc, #4]	; (8009ac4 <__sfp_lock_release+0x8>)
 8009abe:	f000 b8d3 	b.w	8009c68 <__retarget_lock_release_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	200017b0 	.word	0x200017b0

08009ac8 <__sinit_lock_acquire>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	; (8009ad0 <__sinit_lock_acquire+0x8>)
 8009aca:	f000 b8cc 	b.w	8009c66 <__retarget_lock_acquire_recursive>
 8009ace:	bf00      	nop
 8009ad0:	200017ab 	.word	0x200017ab

08009ad4 <__sinit_lock_release>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	; (8009adc <__sinit_lock_release+0x8>)
 8009ad6:	f000 b8c7 	b.w	8009c68 <__retarget_lock_release_recursive>
 8009ada:	bf00      	nop
 8009adc:	200017ab 	.word	0x200017ab

08009ae0 <__sinit>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	f7ff fff0 	bl	8009ac8 <__sinit_lock_acquire>
 8009ae8:	69a3      	ldr	r3, [r4, #24]
 8009aea:	b11b      	cbz	r3, 8009af4 <__sinit+0x14>
 8009aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af0:	f7ff bff0 	b.w	8009ad4 <__sinit_lock_release>
 8009af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009af8:	6523      	str	r3, [r4, #80]	; 0x50
 8009afa:	4b13      	ldr	r3, [pc, #76]	; (8009b48 <__sinit+0x68>)
 8009afc:	4a13      	ldr	r2, [pc, #76]	; (8009b4c <__sinit+0x6c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	bf04      	itt	eq
 8009b06:	2301      	moveq	r3, #1
 8009b08:	61a3      	streq	r3, [r4, #24]
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 f820 	bl	8009b50 <__sfp>
 8009b10:	6060      	str	r0, [r4, #4]
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 f81c 	bl	8009b50 <__sfp>
 8009b18:	60a0      	str	r0, [r4, #8]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f818 	bl	8009b50 <__sfp>
 8009b20:	2200      	movs	r2, #0
 8009b22:	60e0      	str	r0, [r4, #12]
 8009b24:	2104      	movs	r1, #4
 8009b26:	6860      	ldr	r0, [r4, #4]
 8009b28:	f7ff ff82 	bl	8009a30 <std>
 8009b2c:	68a0      	ldr	r0, [r4, #8]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	2109      	movs	r1, #9
 8009b32:	f7ff ff7d 	bl	8009a30 <std>
 8009b36:	68e0      	ldr	r0, [r4, #12]
 8009b38:	2202      	movs	r2, #2
 8009b3a:	2112      	movs	r1, #18
 8009b3c:	f7ff ff78 	bl	8009a30 <std>
 8009b40:	2301      	movs	r3, #1
 8009b42:	61a3      	str	r3, [r4, #24]
 8009b44:	e7d2      	b.n	8009aec <__sinit+0xc>
 8009b46:	bf00      	nop
 8009b48:	0800e53c 	.word	0x0800e53c
 8009b4c:	08009a79 	.word	0x08009a79

08009b50 <__sfp>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	4607      	mov	r7, r0
 8009b54:	f7ff ffac 	bl	8009ab0 <__sfp_lock_acquire>
 8009b58:	4b1e      	ldr	r3, [pc, #120]	; (8009bd4 <__sfp+0x84>)
 8009b5a:	681e      	ldr	r6, [r3, #0]
 8009b5c:	69b3      	ldr	r3, [r6, #24]
 8009b5e:	b913      	cbnz	r3, 8009b66 <__sfp+0x16>
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7ff ffbd 	bl	8009ae0 <__sinit>
 8009b66:	3648      	adds	r6, #72	; 0x48
 8009b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	d503      	bpl.n	8009b78 <__sfp+0x28>
 8009b70:	6833      	ldr	r3, [r6, #0]
 8009b72:	b30b      	cbz	r3, 8009bb8 <__sfp+0x68>
 8009b74:	6836      	ldr	r6, [r6, #0]
 8009b76:	e7f7      	b.n	8009b68 <__sfp+0x18>
 8009b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b7c:	b9d5      	cbnz	r5, 8009bb4 <__sfp+0x64>
 8009b7e:	4b16      	ldr	r3, [pc, #88]	; (8009bd8 <__sfp+0x88>)
 8009b80:	60e3      	str	r3, [r4, #12]
 8009b82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b86:	6665      	str	r5, [r4, #100]	; 0x64
 8009b88:	f000 f86c 	bl	8009c64 <__retarget_lock_init_recursive>
 8009b8c:	f7ff ff96 	bl	8009abc <__sfp_lock_release>
 8009b90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b98:	6025      	str	r5, [r4, #0]
 8009b9a:	61a5      	str	r5, [r4, #24]
 8009b9c:	2208      	movs	r2, #8
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ba4:	f000 f861 	bl	8009c6a <memset>
 8009ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb4:	3468      	adds	r4, #104	; 0x68
 8009bb6:	e7d9      	b.n	8009b6c <__sfp+0x1c>
 8009bb8:	2104      	movs	r1, #4
 8009bba:	4638      	mov	r0, r7
 8009bbc:	f7ff ff62 	bl	8009a84 <__sfmoreglue>
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	6030      	str	r0, [r6, #0]
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d1d5      	bne.n	8009b74 <__sfp+0x24>
 8009bc8:	f7ff ff78 	bl	8009abc <__sfp_lock_release>
 8009bcc:	230c      	movs	r3, #12
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	e7ee      	b.n	8009bb0 <__sfp+0x60>
 8009bd2:	bf00      	nop
 8009bd4:	0800e53c 	.word	0x0800e53c
 8009bd8:	ffff0001 	.word	0xffff0001

08009bdc <_fwalk_reent>:
 8009bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	4606      	mov	r6, r0
 8009be2:	4688      	mov	r8, r1
 8009be4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009be8:	2700      	movs	r7, #0
 8009bea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bee:	f1b9 0901 	subs.w	r9, r9, #1
 8009bf2:	d505      	bpl.n	8009c00 <_fwalk_reent+0x24>
 8009bf4:	6824      	ldr	r4, [r4, #0]
 8009bf6:	2c00      	cmp	r4, #0
 8009bf8:	d1f7      	bne.n	8009bea <_fwalk_reent+0xe>
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c00:	89ab      	ldrh	r3, [r5, #12]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d907      	bls.n	8009c16 <_fwalk_reent+0x3a>
 8009c06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	d003      	beq.n	8009c16 <_fwalk_reent+0x3a>
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4630      	mov	r0, r6
 8009c12:	47c0      	blx	r8
 8009c14:	4307      	orrs	r7, r0
 8009c16:	3568      	adds	r5, #104	; 0x68
 8009c18:	e7e9      	b.n	8009bee <_fwalk_reent+0x12>
	...

08009c1c <__libc_init_array>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4d0d      	ldr	r5, [pc, #52]	; (8009c54 <__libc_init_array+0x38>)
 8009c20:	4c0d      	ldr	r4, [pc, #52]	; (8009c58 <__libc_init_array+0x3c>)
 8009c22:	1b64      	subs	r4, r4, r5
 8009c24:	10a4      	asrs	r4, r4, #2
 8009c26:	2600      	movs	r6, #0
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	d109      	bne.n	8009c40 <__libc_init_array+0x24>
 8009c2c:	4d0b      	ldr	r5, [pc, #44]	; (8009c5c <__libc_init_array+0x40>)
 8009c2e:	4c0c      	ldr	r4, [pc, #48]	; (8009c60 <__libc_init_array+0x44>)
 8009c30:	f004 fb74 	bl	800e31c <_init>
 8009c34:	1b64      	subs	r4, r4, r5
 8009c36:	10a4      	asrs	r4, r4, #2
 8009c38:	2600      	movs	r6, #0
 8009c3a:	42a6      	cmp	r6, r4
 8009c3c:	d105      	bne.n	8009c4a <__libc_init_array+0x2e>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c44:	4798      	blx	r3
 8009c46:	3601      	adds	r6, #1
 8009c48:	e7ee      	b.n	8009c28 <__libc_init_array+0xc>
 8009c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4e:	4798      	blx	r3
 8009c50:	3601      	adds	r6, #1
 8009c52:	e7f2      	b.n	8009c3a <__libc_init_array+0x1e>
 8009c54:	0800e994 	.word	0x0800e994
 8009c58:	0800e994 	.word	0x0800e994
 8009c5c:	0800e994 	.word	0x0800e994
 8009c60:	0800e998 	.word	0x0800e998

08009c64 <__retarget_lock_init_recursive>:
 8009c64:	4770      	bx	lr

08009c66 <__retarget_lock_acquire_recursive>:
 8009c66:	4770      	bx	lr

08009c68 <__retarget_lock_release_recursive>:
 8009c68:	4770      	bx	lr

08009c6a <memset>:
 8009c6a:	4402      	add	r2, r0
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d100      	bne.n	8009c74 <memset+0xa>
 8009c72:	4770      	bx	lr
 8009c74:	f803 1b01 	strb.w	r1, [r3], #1
 8009c78:	e7f9      	b.n	8009c6e <memset+0x4>
	...

08009c7c <_free_r>:
 8009c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	d048      	beq.n	8009d14 <_free_r+0x98>
 8009c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c86:	9001      	str	r0, [sp, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c8e:	bfb8      	it	lt
 8009c90:	18e4      	addlt	r4, r4, r3
 8009c92:	f003 f9d7 	bl	800d044 <__malloc_lock>
 8009c96:	4a20      	ldr	r2, [pc, #128]	; (8009d18 <_free_r+0x9c>)
 8009c98:	9801      	ldr	r0, [sp, #4]
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	b933      	cbnz	r3, 8009cae <_free_r+0x32>
 8009ca0:	6063      	str	r3, [r4, #4]
 8009ca2:	6014      	str	r4, [r2, #0]
 8009ca4:	b003      	add	sp, #12
 8009ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009caa:	f003 b9d1 	b.w	800d050 <__malloc_unlock>
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	d90b      	bls.n	8009cca <_free_r+0x4e>
 8009cb2:	6821      	ldr	r1, [r4, #0]
 8009cb4:	1862      	adds	r2, r4, r1
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	bf04      	itt	eq
 8009cba:	681a      	ldreq	r2, [r3, #0]
 8009cbc:	685b      	ldreq	r3, [r3, #4]
 8009cbe:	6063      	str	r3, [r4, #4]
 8009cc0:	bf04      	itt	eq
 8009cc2:	1852      	addeq	r2, r2, r1
 8009cc4:	6022      	streq	r2, [r4, #0]
 8009cc6:	602c      	str	r4, [r5, #0]
 8009cc8:	e7ec      	b.n	8009ca4 <_free_r+0x28>
 8009cca:	461a      	mov	r2, r3
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	b10b      	cbz	r3, 8009cd4 <_free_r+0x58>
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	d9fa      	bls.n	8009cca <_free_r+0x4e>
 8009cd4:	6811      	ldr	r1, [r2, #0]
 8009cd6:	1855      	adds	r5, r2, r1
 8009cd8:	42a5      	cmp	r5, r4
 8009cda:	d10b      	bne.n	8009cf4 <_free_r+0x78>
 8009cdc:	6824      	ldr	r4, [r4, #0]
 8009cde:	4421      	add	r1, r4
 8009ce0:	1854      	adds	r4, r2, r1
 8009ce2:	42a3      	cmp	r3, r4
 8009ce4:	6011      	str	r1, [r2, #0]
 8009ce6:	d1dd      	bne.n	8009ca4 <_free_r+0x28>
 8009ce8:	681c      	ldr	r4, [r3, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	6053      	str	r3, [r2, #4]
 8009cee:	4421      	add	r1, r4
 8009cf0:	6011      	str	r1, [r2, #0]
 8009cf2:	e7d7      	b.n	8009ca4 <_free_r+0x28>
 8009cf4:	d902      	bls.n	8009cfc <_free_r+0x80>
 8009cf6:	230c      	movs	r3, #12
 8009cf8:	6003      	str	r3, [r0, #0]
 8009cfa:	e7d3      	b.n	8009ca4 <_free_r+0x28>
 8009cfc:	6825      	ldr	r5, [r4, #0]
 8009cfe:	1961      	adds	r1, r4, r5
 8009d00:	428b      	cmp	r3, r1
 8009d02:	bf04      	itt	eq
 8009d04:	6819      	ldreq	r1, [r3, #0]
 8009d06:	685b      	ldreq	r3, [r3, #4]
 8009d08:	6063      	str	r3, [r4, #4]
 8009d0a:	bf04      	itt	eq
 8009d0c:	1949      	addeq	r1, r1, r5
 8009d0e:	6021      	streq	r1, [r4, #0]
 8009d10:	6054      	str	r4, [r2, #4]
 8009d12:	e7c7      	b.n	8009ca4 <_free_r+0x28>
 8009d14:	b003      	add	sp, #12
 8009d16:	bd30      	pop	{r4, r5, pc}
 8009d18:	200002e8 	.word	0x200002e8

08009d1c <_malloc_r>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	1ccd      	adds	r5, r1, #3
 8009d20:	f025 0503 	bic.w	r5, r5, #3
 8009d24:	3508      	adds	r5, #8
 8009d26:	2d0c      	cmp	r5, #12
 8009d28:	bf38      	it	cc
 8009d2a:	250c      	movcc	r5, #12
 8009d2c:	2d00      	cmp	r5, #0
 8009d2e:	4606      	mov	r6, r0
 8009d30:	db01      	blt.n	8009d36 <_malloc_r+0x1a>
 8009d32:	42a9      	cmp	r1, r5
 8009d34:	d903      	bls.n	8009d3e <_malloc_r+0x22>
 8009d36:	230c      	movs	r3, #12
 8009d38:	6033      	str	r3, [r6, #0]
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3e:	f003 f981 	bl	800d044 <__malloc_lock>
 8009d42:	4921      	ldr	r1, [pc, #132]	; (8009dc8 <_malloc_r+0xac>)
 8009d44:	680a      	ldr	r2, [r1, #0]
 8009d46:	4614      	mov	r4, r2
 8009d48:	b99c      	cbnz	r4, 8009d72 <_malloc_r+0x56>
 8009d4a:	4f20      	ldr	r7, [pc, #128]	; (8009dcc <_malloc_r+0xb0>)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	b923      	cbnz	r3, 8009d5a <_malloc_r+0x3e>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4630      	mov	r0, r6
 8009d54:	f000 fece 	bl	800aaf4 <_sbrk_r>
 8009d58:	6038      	str	r0, [r7, #0]
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 fec9 	bl	800aaf4 <_sbrk_r>
 8009d62:	1c43      	adds	r3, r0, #1
 8009d64:	d123      	bne.n	8009dae <_malloc_r+0x92>
 8009d66:	230c      	movs	r3, #12
 8009d68:	6033      	str	r3, [r6, #0]
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f003 f970 	bl	800d050 <__malloc_unlock>
 8009d70:	e7e3      	b.n	8009d3a <_malloc_r+0x1e>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	1b5b      	subs	r3, r3, r5
 8009d76:	d417      	bmi.n	8009da8 <_malloc_r+0x8c>
 8009d78:	2b0b      	cmp	r3, #11
 8009d7a:	d903      	bls.n	8009d84 <_malloc_r+0x68>
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	441c      	add	r4, r3
 8009d80:	6025      	str	r5, [r4, #0]
 8009d82:	e004      	b.n	8009d8e <_malloc_r+0x72>
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	42a2      	cmp	r2, r4
 8009d88:	bf0c      	ite	eq
 8009d8a:	600b      	streq	r3, [r1, #0]
 8009d8c:	6053      	strne	r3, [r2, #4]
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f003 f95e 	bl	800d050 <__malloc_unlock>
 8009d94:	f104 000b 	add.w	r0, r4, #11
 8009d98:	1d23      	adds	r3, r4, #4
 8009d9a:	f020 0007 	bic.w	r0, r0, #7
 8009d9e:	1ac2      	subs	r2, r0, r3
 8009da0:	d0cc      	beq.n	8009d3c <_malloc_r+0x20>
 8009da2:	1a1b      	subs	r3, r3, r0
 8009da4:	50a3      	str	r3, [r4, r2]
 8009da6:	e7c9      	b.n	8009d3c <_malloc_r+0x20>
 8009da8:	4622      	mov	r2, r4
 8009daa:	6864      	ldr	r4, [r4, #4]
 8009dac:	e7cc      	b.n	8009d48 <_malloc_r+0x2c>
 8009dae:	1cc4      	adds	r4, r0, #3
 8009db0:	f024 0403 	bic.w	r4, r4, #3
 8009db4:	42a0      	cmp	r0, r4
 8009db6:	d0e3      	beq.n	8009d80 <_malloc_r+0x64>
 8009db8:	1a21      	subs	r1, r4, r0
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f000 fe9a 	bl	800aaf4 <_sbrk_r>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d1dd      	bne.n	8009d80 <_malloc_r+0x64>
 8009dc4:	e7cf      	b.n	8009d66 <_malloc_r+0x4a>
 8009dc6:	bf00      	nop
 8009dc8:	200002e8 	.word	0x200002e8
 8009dcc:	200002ec 	.word	0x200002ec

08009dd0 <__cvt>:
 8009dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	ec55 4b10 	vmov	r4, r5, d0
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	460e      	mov	r6, r1
 8009ddc:	4619      	mov	r1, r3
 8009dde:	462b      	mov	r3, r5
 8009de0:	bfbb      	ittet	lt
 8009de2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009de6:	461d      	movlt	r5, r3
 8009de8:	2300      	movge	r3, #0
 8009dea:	232d      	movlt	r3, #45	; 0x2d
 8009dec:	700b      	strb	r3, [r1, #0]
 8009dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009df4:	4691      	mov	r9, r2
 8009df6:	f023 0820 	bic.w	r8, r3, #32
 8009dfa:	bfbc      	itt	lt
 8009dfc:	4622      	movlt	r2, r4
 8009dfe:	4614      	movlt	r4, r2
 8009e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e04:	d005      	beq.n	8009e12 <__cvt+0x42>
 8009e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e0a:	d100      	bne.n	8009e0e <__cvt+0x3e>
 8009e0c:	3601      	adds	r6, #1
 8009e0e:	2102      	movs	r1, #2
 8009e10:	e000      	b.n	8009e14 <__cvt+0x44>
 8009e12:	2103      	movs	r1, #3
 8009e14:	ab03      	add	r3, sp, #12
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	ab02      	add	r3, sp, #8
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	ec45 4b10 	vmov	d0, r4, r5
 8009e20:	4653      	mov	r3, sl
 8009e22:	4632      	mov	r2, r6
 8009e24:	f001 ff10 	bl	800bc48 <_dtoa_r>
 8009e28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e2c:	4607      	mov	r7, r0
 8009e2e:	d102      	bne.n	8009e36 <__cvt+0x66>
 8009e30:	f019 0f01 	tst.w	r9, #1
 8009e34:	d022      	beq.n	8009e7c <__cvt+0xac>
 8009e36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e3a:	eb07 0906 	add.w	r9, r7, r6
 8009e3e:	d110      	bne.n	8009e62 <__cvt+0x92>
 8009e40:	783b      	ldrb	r3, [r7, #0]
 8009e42:	2b30      	cmp	r3, #48	; 0x30
 8009e44:	d10a      	bne.n	8009e5c <__cvt+0x8c>
 8009e46:	2200      	movs	r2, #0
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7f6 fe3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e52:	b918      	cbnz	r0, 8009e5c <__cvt+0x8c>
 8009e54:	f1c6 0601 	rsb	r6, r6, #1
 8009e58:	f8ca 6000 	str.w	r6, [sl]
 8009e5c:	f8da 3000 	ldr.w	r3, [sl]
 8009e60:	4499      	add	r9, r3
 8009e62:	2200      	movs	r2, #0
 8009e64:	2300      	movs	r3, #0
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e6e:	b108      	cbz	r0, 8009e74 <__cvt+0xa4>
 8009e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e74:	2230      	movs	r2, #48	; 0x30
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	454b      	cmp	r3, r9
 8009e7a:	d307      	bcc.n	8009e8c <__cvt+0xbc>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e80:	1bdb      	subs	r3, r3, r7
 8009e82:	4638      	mov	r0, r7
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	b004      	add	sp, #16
 8009e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8c:	1c59      	adds	r1, r3, #1
 8009e8e:	9103      	str	r1, [sp, #12]
 8009e90:	701a      	strb	r2, [r3, #0]
 8009e92:	e7f0      	b.n	8009e76 <__cvt+0xa6>

08009e94 <__exponent>:
 8009e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e96:	4603      	mov	r3, r0
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	bfb8      	it	lt
 8009e9c:	4249      	neglt	r1, r1
 8009e9e:	f803 2b02 	strb.w	r2, [r3], #2
 8009ea2:	bfb4      	ite	lt
 8009ea4:	222d      	movlt	r2, #45	; 0x2d
 8009ea6:	222b      	movge	r2, #43	; 0x2b
 8009ea8:	2909      	cmp	r1, #9
 8009eaa:	7042      	strb	r2, [r0, #1]
 8009eac:	dd2a      	ble.n	8009f04 <__exponent+0x70>
 8009eae:	f10d 0407 	add.w	r4, sp, #7
 8009eb2:	46a4      	mov	ip, r4
 8009eb4:	270a      	movs	r7, #10
 8009eb6:	46a6      	mov	lr, r4
 8009eb8:	460a      	mov	r2, r1
 8009eba:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ebe:	fb07 1516 	mls	r5, r7, r6, r1
 8009ec2:	3530      	adds	r5, #48	; 0x30
 8009ec4:	2a63      	cmp	r2, #99	; 0x63
 8009ec6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009eca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ece:	4631      	mov	r1, r6
 8009ed0:	dcf1      	bgt.n	8009eb6 <__exponent+0x22>
 8009ed2:	3130      	adds	r1, #48	; 0x30
 8009ed4:	f1ae 0502 	sub.w	r5, lr, #2
 8009ed8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009edc:	1c44      	adds	r4, r0, #1
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4561      	cmp	r1, ip
 8009ee2:	d30a      	bcc.n	8009efa <__exponent+0x66>
 8009ee4:	f10d 0209 	add.w	r2, sp, #9
 8009ee8:	eba2 020e 	sub.w	r2, r2, lr
 8009eec:	4565      	cmp	r5, ip
 8009eee:	bf88      	it	hi
 8009ef0:	2200      	movhi	r2, #0
 8009ef2:	4413      	add	r3, r2
 8009ef4:	1a18      	subs	r0, r3, r0
 8009ef6:	b003      	add	sp, #12
 8009ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009efe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009f02:	e7ed      	b.n	8009ee0 <__exponent+0x4c>
 8009f04:	2330      	movs	r3, #48	; 0x30
 8009f06:	3130      	adds	r1, #48	; 0x30
 8009f08:	7083      	strb	r3, [r0, #2]
 8009f0a:	70c1      	strb	r1, [r0, #3]
 8009f0c:	1d03      	adds	r3, r0, #4
 8009f0e:	e7f1      	b.n	8009ef4 <__exponent+0x60>

08009f10 <_printf_float>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	ed2d 8b02 	vpush	{d8}
 8009f18:	b08d      	sub	sp, #52	; 0x34
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f20:	4616      	mov	r6, r2
 8009f22:	461f      	mov	r7, r3
 8009f24:	4605      	mov	r5, r0
 8009f26:	f002 ffeb 	bl	800cf00 <_localeconv_r>
 8009f2a:	f8d0 a000 	ldr.w	sl, [r0]
 8009f2e:	4650      	mov	r0, sl
 8009f30:	f7f6 f94e 	bl	80001d0 <strlen>
 8009f34:	2300      	movs	r3, #0
 8009f36:	930a      	str	r3, [sp, #40]	; 0x28
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f44:	3307      	adds	r3, #7
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	f103 0208 	add.w	r2, r3, #8
 8009f4e:	f8c8 2000 	str.w	r2, [r8]
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f62:	9307      	str	r3, [sp, #28]
 8009f64:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f68:	ee08 0a10 	vmov	s16, r0
 8009f6c:	4b9f      	ldr	r3, [pc, #636]	; (800a1ec <_printf_float+0x2dc>)
 8009f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f72:	f04f 32ff 	mov.w	r2, #4294967295
 8009f76:	f7f6 fdd9 	bl	8000b2c <__aeabi_dcmpun>
 8009f7a:	bb88      	cbnz	r0, 8009fe0 <_printf_float+0xd0>
 8009f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f80:	4b9a      	ldr	r3, [pc, #616]	; (800a1ec <_printf_float+0x2dc>)
 8009f82:	f04f 32ff 	mov.w	r2, #4294967295
 8009f86:	f7f6 fdb3 	bl	8000af0 <__aeabi_dcmple>
 8009f8a:	bb48      	cbnz	r0, 8009fe0 <_printf_float+0xd0>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2300      	movs	r3, #0
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 fda2 	bl	8000adc <__aeabi_dcmplt>
 8009f98:	b110      	cbz	r0, 8009fa0 <_printf_float+0x90>
 8009f9a:	232d      	movs	r3, #45	; 0x2d
 8009f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fa0:	4b93      	ldr	r3, [pc, #588]	; (800a1f0 <_printf_float+0x2e0>)
 8009fa2:	4894      	ldr	r0, [pc, #592]	; (800a1f4 <_printf_float+0x2e4>)
 8009fa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009fa8:	bf94      	ite	ls
 8009faa:	4698      	movls	r8, r3
 8009fac:	4680      	movhi	r8, r0
 8009fae:	2303      	movs	r3, #3
 8009fb0:	6123      	str	r3, [r4, #16]
 8009fb2:	9b05      	ldr	r3, [sp, #20]
 8009fb4:	f023 0204 	bic.w	r2, r3, #4
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	f04f 0900 	mov.w	r9, #0
 8009fbe:	9700      	str	r7, [sp, #0]
 8009fc0:	4633      	mov	r3, r6
 8009fc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f000 f9d8 	bl	800a37c <_printf_common>
 8009fcc:	3001      	adds	r0, #1
 8009fce:	f040 8090 	bne.w	800a0f2 <_printf_float+0x1e2>
 8009fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd6:	b00d      	add	sp, #52	; 0x34
 8009fd8:	ecbd 8b02 	vpop	{d8}
 8009fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe0:	4642      	mov	r2, r8
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	f7f6 fda0 	bl	8000b2c <__aeabi_dcmpun>
 8009fec:	b140      	cbz	r0, 800a000 <_printf_float+0xf0>
 8009fee:	464b      	mov	r3, r9
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfbc      	itt	lt
 8009ff4:	232d      	movlt	r3, #45	; 0x2d
 8009ff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ffa:	487f      	ldr	r0, [pc, #508]	; (800a1f8 <_printf_float+0x2e8>)
 8009ffc:	4b7f      	ldr	r3, [pc, #508]	; (800a1fc <_printf_float+0x2ec>)
 8009ffe:	e7d1      	b.n	8009fa4 <_printf_float+0x94>
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a006:	9206      	str	r2, [sp, #24]
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	d13f      	bne.n	800a08c <_printf_float+0x17c>
 800a00c:	2306      	movs	r3, #6
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	9b05      	ldr	r3, [sp, #20]
 800a012:	6861      	ldr	r1, [r4, #4]
 800a014:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a018:	2300      	movs	r3, #0
 800a01a:	9303      	str	r3, [sp, #12]
 800a01c:	ab0a      	add	r3, sp, #40	; 0x28
 800a01e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a022:	ab09      	add	r3, sp, #36	; 0x24
 800a024:	ec49 8b10 	vmov	d0, r8, r9
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	6022      	str	r2, [r4, #0]
 800a02c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a030:	4628      	mov	r0, r5
 800a032:	f7ff fecd 	bl	8009dd0 <__cvt>
 800a036:	9b06      	ldr	r3, [sp, #24]
 800a038:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a03a:	2b47      	cmp	r3, #71	; 0x47
 800a03c:	4680      	mov	r8, r0
 800a03e:	d108      	bne.n	800a052 <_printf_float+0x142>
 800a040:	1cc8      	adds	r0, r1, #3
 800a042:	db02      	blt.n	800a04a <_printf_float+0x13a>
 800a044:	6863      	ldr	r3, [r4, #4]
 800a046:	4299      	cmp	r1, r3
 800a048:	dd41      	ble.n	800a0ce <_printf_float+0x1be>
 800a04a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a04e:	fa5f fb8b 	uxtb.w	fp, fp
 800a052:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a056:	d820      	bhi.n	800a09a <_printf_float+0x18a>
 800a058:	3901      	subs	r1, #1
 800a05a:	465a      	mov	r2, fp
 800a05c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a060:	9109      	str	r1, [sp, #36]	; 0x24
 800a062:	f7ff ff17 	bl	8009e94 <__exponent>
 800a066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a068:	1813      	adds	r3, r2, r0
 800a06a:	2a01      	cmp	r2, #1
 800a06c:	4681      	mov	r9, r0
 800a06e:	6123      	str	r3, [r4, #16]
 800a070:	dc02      	bgt.n	800a078 <_printf_float+0x168>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	07d2      	lsls	r2, r2, #31
 800a076:	d501      	bpl.n	800a07c <_printf_float+0x16c>
 800a078:	3301      	adds	r3, #1
 800a07a:	6123      	str	r3, [r4, #16]
 800a07c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a080:	2b00      	cmp	r3, #0
 800a082:	d09c      	beq.n	8009fbe <_printf_float+0xae>
 800a084:	232d      	movs	r3, #45	; 0x2d
 800a086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a08a:	e798      	b.n	8009fbe <_printf_float+0xae>
 800a08c:	9a06      	ldr	r2, [sp, #24]
 800a08e:	2a47      	cmp	r2, #71	; 0x47
 800a090:	d1be      	bne.n	800a010 <_printf_float+0x100>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1bc      	bne.n	800a010 <_printf_float+0x100>
 800a096:	2301      	movs	r3, #1
 800a098:	e7b9      	b.n	800a00e <_printf_float+0xfe>
 800a09a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a09e:	d118      	bne.n	800a0d2 <_printf_float+0x1c2>
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	dd0b      	ble.n	800a0be <_printf_float+0x1ae>
 800a0a6:	6121      	str	r1, [r4, #16]
 800a0a8:	b913      	cbnz	r3, 800a0b0 <_printf_float+0x1a0>
 800a0aa:	6822      	ldr	r2, [r4, #0]
 800a0ac:	07d0      	lsls	r0, r2, #31
 800a0ae:	d502      	bpl.n	800a0b6 <_printf_float+0x1a6>
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	440b      	add	r3, r1
 800a0b4:	6123      	str	r3, [r4, #16]
 800a0b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0b8:	f04f 0900 	mov.w	r9, #0
 800a0bc:	e7de      	b.n	800a07c <_printf_float+0x16c>
 800a0be:	b913      	cbnz	r3, 800a0c6 <_printf_float+0x1b6>
 800a0c0:	6822      	ldr	r2, [r4, #0]
 800a0c2:	07d2      	lsls	r2, r2, #31
 800a0c4:	d501      	bpl.n	800a0ca <_printf_float+0x1ba>
 800a0c6:	3302      	adds	r3, #2
 800a0c8:	e7f4      	b.n	800a0b4 <_printf_float+0x1a4>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f2      	b.n	800a0b4 <_printf_float+0x1a4>
 800a0ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	db05      	blt.n	800a0e4 <_printf_float+0x1d4>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	6121      	str	r1, [r4, #16]
 800a0dc:	07d8      	lsls	r0, r3, #31
 800a0de:	d5ea      	bpl.n	800a0b6 <_printf_float+0x1a6>
 800a0e0:	1c4b      	adds	r3, r1, #1
 800a0e2:	e7e7      	b.n	800a0b4 <_printf_float+0x1a4>
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	bfd4      	ite	le
 800a0e8:	f1c1 0202 	rsble	r2, r1, #2
 800a0ec:	2201      	movgt	r2, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	e7e0      	b.n	800a0b4 <_printf_float+0x1a4>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	055a      	lsls	r2, r3, #21
 800a0f6:	d407      	bmi.n	800a108 <_printf_float+0x1f8>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	d12c      	bne.n	800a160 <_printf_float+0x250>
 800a106:	e764      	b.n	8009fd2 <_printf_float+0xc2>
 800a108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a10c:	f240 80e0 	bls.w	800a2d0 <_printf_float+0x3c0>
 800a110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a114:	2200      	movs	r2, #0
 800a116:	2300      	movs	r3, #0
 800a118:	f7f6 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d034      	beq.n	800a18a <_printf_float+0x27a>
 800a120:	4a37      	ldr	r2, [pc, #220]	; (800a200 <_printf_float+0x2f0>)
 800a122:	2301      	movs	r3, #1
 800a124:	4631      	mov	r1, r6
 800a126:	4628      	mov	r0, r5
 800a128:	47b8      	blx	r7
 800a12a:	3001      	adds	r0, #1
 800a12c:	f43f af51 	beq.w	8009fd2 <_printf_float+0xc2>
 800a130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a134:	429a      	cmp	r2, r3
 800a136:	db02      	blt.n	800a13e <_printf_float+0x22e>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	07d8      	lsls	r0, r3, #31
 800a13c:	d510      	bpl.n	800a160 <_printf_float+0x250>
 800a13e:	ee18 3a10 	vmov	r3, s16
 800a142:	4652      	mov	r2, sl
 800a144:	4631      	mov	r1, r6
 800a146:	4628      	mov	r0, r5
 800a148:	47b8      	blx	r7
 800a14a:	3001      	adds	r0, #1
 800a14c:	f43f af41 	beq.w	8009fd2 <_printf_float+0xc2>
 800a150:	f04f 0800 	mov.w	r8, #0
 800a154:	f104 091a 	add.w	r9, r4, #26
 800a158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4543      	cmp	r3, r8
 800a15e:	dc09      	bgt.n	800a174 <_printf_float+0x264>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	079b      	lsls	r3, r3, #30
 800a164:	f100 8105 	bmi.w	800a372 <_printf_float+0x462>
 800a168:	68e0      	ldr	r0, [r4, #12]
 800a16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a16c:	4298      	cmp	r0, r3
 800a16e:	bfb8      	it	lt
 800a170:	4618      	movlt	r0, r3
 800a172:	e730      	b.n	8009fd6 <_printf_float+0xc6>
 800a174:	2301      	movs	r3, #1
 800a176:	464a      	mov	r2, r9
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	47b8      	blx	r7
 800a17e:	3001      	adds	r0, #1
 800a180:	f43f af27 	beq.w	8009fd2 <_printf_float+0xc2>
 800a184:	f108 0801 	add.w	r8, r8, #1
 800a188:	e7e6      	b.n	800a158 <_printf_float+0x248>
 800a18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc39      	bgt.n	800a204 <_printf_float+0x2f4>
 800a190:	4a1b      	ldr	r2, [pc, #108]	; (800a200 <_printf_float+0x2f0>)
 800a192:	2301      	movs	r3, #1
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	f43f af19 	beq.w	8009fd2 <_printf_float+0xc2>
 800a1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	d102      	bne.n	800a1ae <_printf_float+0x29e>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	07d9      	lsls	r1, r3, #31
 800a1ac:	d5d8      	bpl.n	800a160 <_printf_float+0x250>
 800a1ae:	ee18 3a10 	vmov	r3, s16
 800a1b2:	4652      	mov	r2, sl
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	f43f af09 	beq.w	8009fd2 <_printf_float+0xc2>
 800a1c0:	f04f 0900 	mov.w	r9, #0
 800a1c4:	f104 0a1a 	add.w	sl, r4, #26
 800a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ca:	425b      	negs	r3, r3
 800a1cc:	454b      	cmp	r3, r9
 800a1ce:	dc01      	bgt.n	800a1d4 <_printf_float+0x2c4>
 800a1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d2:	e792      	b.n	800a0fa <_printf_float+0x1ea>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4652      	mov	r2, sl
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b8      	blx	r7
 800a1de:	3001      	adds	r0, #1
 800a1e0:	f43f aef7 	beq.w	8009fd2 <_printf_float+0xc2>
 800a1e4:	f109 0901 	add.w	r9, r9, #1
 800a1e8:	e7ee      	b.n	800a1c8 <_printf_float+0x2b8>
 800a1ea:	bf00      	nop
 800a1ec:	7fefffff 	.word	0x7fefffff
 800a1f0:	0800e540 	.word	0x0800e540
 800a1f4:	0800e544 	.word	0x0800e544
 800a1f8:	0800e54c 	.word	0x0800e54c
 800a1fc:	0800e548 	.word	0x0800e548
 800a200:	0800e550 	.word	0x0800e550
 800a204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a208:	429a      	cmp	r2, r3
 800a20a:	bfa8      	it	ge
 800a20c:	461a      	movge	r2, r3
 800a20e:	2a00      	cmp	r2, #0
 800a210:	4691      	mov	r9, r2
 800a212:	dc37      	bgt.n	800a284 <_printf_float+0x374>
 800a214:	f04f 0b00 	mov.w	fp, #0
 800a218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a21c:	f104 021a 	add.w	r2, r4, #26
 800a220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a222:	9305      	str	r3, [sp, #20]
 800a224:	eba3 0309 	sub.w	r3, r3, r9
 800a228:	455b      	cmp	r3, fp
 800a22a:	dc33      	bgt.n	800a294 <_printf_float+0x384>
 800a22c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a230:	429a      	cmp	r2, r3
 800a232:	db3b      	blt.n	800a2ac <_printf_float+0x39c>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	07da      	lsls	r2, r3, #31
 800a238:	d438      	bmi.n	800a2ac <_printf_float+0x39c>
 800a23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	eba2 0901 	sub.w	r9, r2, r1
 800a246:	4599      	cmp	r9, r3
 800a248:	bfa8      	it	ge
 800a24a:	4699      	movge	r9, r3
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	dc35      	bgt.n	800a2be <_printf_float+0x3ae>
 800a252:	f04f 0800 	mov.w	r8, #0
 800a256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a25a:	f104 0a1a 	add.w	sl, r4, #26
 800a25e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	eba3 0309 	sub.w	r3, r3, r9
 800a268:	4543      	cmp	r3, r8
 800a26a:	f77f af79 	ble.w	800a160 <_printf_float+0x250>
 800a26e:	2301      	movs	r3, #1
 800a270:	4652      	mov	r2, sl
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	f43f aeaa 	beq.w	8009fd2 <_printf_float+0xc2>
 800a27e:	f108 0801 	add.w	r8, r8, #1
 800a282:	e7ec      	b.n	800a25e <_printf_float+0x34e>
 800a284:	4613      	mov	r3, r2
 800a286:	4631      	mov	r1, r6
 800a288:	4642      	mov	r2, r8
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b8      	blx	r7
 800a28e:	3001      	adds	r0, #1
 800a290:	d1c0      	bne.n	800a214 <_printf_float+0x304>
 800a292:	e69e      	b.n	8009fd2 <_printf_float+0xc2>
 800a294:	2301      	movs	r3, #1
 800a296:	4631      	mov	r1, r6
 800a298:	4628      	mov	r0, r5
 800a29a:	9205      	str	r2, [sp, #20]
 800a29c:	47b8      	blx	r7
 800a29e:	3001      	adds	r0, #1
 800a2a0:	f43f ae97 	beq.w	8009fd2 <_printf_float+0xc2>
 800a2a4:	9a05      	ldr	r2, [sp, #20]
 800a2a6:	f10b 0b01 	add.w	fp, fp, #1
 800a2aa:	e7b9      	b.n	800a220 <_printf_float+0x310>
 800a2ac:	ee18 3a10 	vmov	r3, s16
 800a2b0:	4652      	mov	r2, sl
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d1be      	bne.n	800a23a <_printf_float+0x32a>
 800a2bc:	e689      	b.n	8009fd2 <_printf_float+0xc2>
 800a2be:	9a05      	ldr	r2, [sp, #20]
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	4442      	add	r2, r8
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	47b8      	blx	r7
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	d1c1      	bne.n	800a252 <_printf_float+0x342>
 800a2ce:	e680      	b.n	8009fd2 <_printf_float+0xc2>
 800a2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d2:	2a01      	cmp	r2, #1
 800a2d4:	dc01      	bgt.n	800a2da <_printf_float+0x3ca>
 800a2d6:	07db      	lsls	r3, r3, #31
 800a2d8:	d538      	bpl.n	800a34c <_printf_float+0x43c>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4642      	mov	r2, r8
 800a2de:	4631      	mov	r1, r6
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	47b8      	blx	r7
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f43f ae74 	beq.w	8009fd2 <_printf_float+0xc2>
 800a2ea:	ee18 3a10 	vmov	r3, s16
 800a2ee:	4652      	mov	r2, sl
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	47b8      	blx	r7
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	f43f ae6b 	beq.w	8009fd2 <_printf_float+0xc2>
 800a2fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	f7f6 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a308:	b9d8      	cbnz	r0, 800a342 <_printf_float+0x432>
 800a30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a30c:	f108 0201 	add.w	r2, r8, #1
 800a310:	3b01      	subs	r3, #1
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	d10e      	bne.n	800a33a <_printf_float+0x42a>
 800a31c:	e659      	b.n	8009fd2 <_printf_float+0xc2>
 800a31e:	2301      	movs	r3, #1
 800a320:	4652      	mov	r2, sl
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	f43f ae52 	beq.w	8009fd2 <_printf_float+0xc2>
 800a32e:	f108 0801 	add.w	r8, r8, #1
 800a332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a334:	3b01      	subs	r3, #1
 800a336:	4543      	cmp	r3, r8
 800a338:	dcf1      	bgt.n	800a31e <_printf_float+0x40e>
 800a33a:	464b      	mov	r3, r9
 800a33c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a340:	e6dc      	b.n	800a0fc <_printf_float+0x1ec>
 800a342:	f04f 0800 	mov.w	r8, #0
 800a346:	f104 0a1a 	add.w	sl, r4, #26
 800a34a:	e7f2      	b.n	800a332 <_printf_float+0x422>
 800a34c:	2301      	movs	r3, #1
 800a34e:	4642      	mov	r2, r8
 800a350:	e7df      	b.n	800a312 <_printf_float+0x402>
 800a352:	2301      	movs	r3, #1
 800a354:	464a      	mov	r2, r9
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f ae38 	beq.w	8009fd2 <_printf_float+0xc2>
 800a362:	f108 0801 	add.w	r8, r8, #1
 800a366:	68e3      	ldr	r3, [r4, #12]
 800a368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a36a:	1a5b      	subs	r3, r3, r1
 800a36c:	4543      	cmp	r3, r8
 800a36e:	dcf0      	bgt.n	800a352 <_printf_float+0x442>
 800a370:	e6fa      	b.n	800a168 <_printf_float+0x258>
 800a372:	f04f 0800 	mov.w	r8, #0
 800a376:	f104 0919 	add.w	r9, r4, #25
 800a37a:	e7f4      	b.n	800a366 <_printf_float+0x456>

0800a37c <_printf_common>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	4616      	mov	r6, r2
 800a382:	4699      	mov	r9, r3
 800a384:	688a      	ldr	r2, [r1, #8]
 800a386:	690b      	ldr	r3, [r1, #16]
 800a388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bfb8      	it	lt
 800a390:	4613      	movlt	r3, r2
 800a392:	6033      	str	r3, [r6, #0]
 800a394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a398:	4607      	mov	r7, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	b10a      	cbz	r2, 800a3a2 <_printf_common+0x26>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	0699      	lsls	r1, r3, #26
 800a3a6:	bf42      	ittt	mi
 800a3a8:	6833      	ldrmi	r3, [r6, #0]
 800a3aa:	3302      	addmi	r3, #2
 800a3ac:	6033      	strmi	r3, [r6, #0]
 800a3ae:	6825      	ldr	r5, [r4, #0]
 800a3b0:	f015 0506 	ands.w	r5, r5, #6
 800a3b4:	d106      	bne.n	800a3c4 <_printf_common+0x48>
 800a3b6:	f104 0a19 	add.w	sl, r4, #25
 800a3ba:	68e3      	ldr	r3, [r4, #12]
 800a3bc:	6832      	ldr	r2, [r6, #0]
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	42ab      	cmp	r3, r5
 800a3c2:	dc26      	bgt.n	800a412 <_printf_common+0x96>
 800a3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3c8:	1e13      	subs	r3, r2, #0
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	bf18      	it	ne
 800a3ce:	2301      	movne	r3, #1
 800a3d0:	0692      	lsls	r2, r2, #26
 800a3d2:	d42b      	bmi.n	800a42c <_printf_common+0xb0>
 800a3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c0      	blx	r8
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d01e      	beq.n	800a420 <_printf_common+0xa4>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	68e5      	ldr	r5, [r4, #12]
 800a3e6:	6832      	ldr	r2, [r6, #0]
 800a3e8:	f003 0306 	and.w	r3, r3, #6
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	bf08      	it	eq
 800a3f0:	1aad      	subeq	r5, r5, r2
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	6922      	ldr	r2, [r4, #16]
 800a3f6:	bf0c      	ite	eq
 800a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3fc:	2500      	movne	r5, #0
 800a3fe:	4293      	cmp	r3, r2
 800a400:	bfc4      	itt	gt
 800a402:	1a9b      	subgt	r3, r3, r2
 800a404:	18ed      	addgt	r5, r5, r3
 800a406:	2600      	movs	r6, #0
 800a408:	341a      	adds	r4, #26
 800a40a:	42b5      	cmp	r5, r6
 800a40c:	d11a      	bne.n	800a444 <_printf_common+0xc8>
 800a40e:	2000      	movs	r0, #0
 800a410:	e008      	b.n	800a424 <_printf_common+0xa8>
 800a412:	2301      	movs	r3, #1
 800a414:	4652      	mov	r2, sl
 800a416:	4649      	mov	r1, r9
 800a418:	4638      	mov	r0, r7
 800a41a:	47c0      	blx	r8
 800a41c:	3001      	adds	r0, #1
 800a41e:	d103      	bne.n	800a428 <_printf_common+0xac>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a428:	3501      	adds	r5, #1
 800a42a:	e7c6      	b.n	800a3ba <_printf_common+0x3e>
 800a42c:	18e1      	adds	r1, r4, r3
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	2030      	movs	r0, #48	; 0x30
 800a432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a436:	4422      	add	r2, r4
 800a438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a440:	3302      	adds	r3, #2
 800a442:	e7c7      	b.n	800a3d4 <_printf_common+0x58>
 800a444:	2301      	movs	r3, #1
 800a446:	4622      	mov	r2, r4
 800a448:	4649      	mov	r1, r9
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c0      	blx	r8
 800a44e:	3001      	adds	r0, #1
 800a450:	d0e6      	beq.n	800a420 <_printf_common+0xa4>
 800a452:	3601      	adds	r6, #1
 800a454:	e7d9      	b.n	800a40a <_printf_common+0x8e>
	...

0800a458 <_printf_i>:
 800a458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	4691      	mov	r9, r2
 800a460:	7e27      	ldrb	r7, [r4, #24]
 800a462:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a464:	2f78      	cmp	r7, #120	; 0x78
 800a466:	4680      	mov	r8, r0
 800a468:	469a      	mov	sl, r3
 800a46a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a46e:	d807      	bhi.n	800a480 <_printf_i+0x28>
 800a470:	2f62      	cmp	r7, #98	; 0x62
 800a472:	d80a      	bhi.n	800a48a <_printf_i+0x32>
 800a474:	2f00      	cmp	r7, #0
 800a476:	f000 80d8 	beq.w	800a62a <_printf_i+0x1d2>
 800a47a:	2f58      	cmp	r7, #88	; 0x58
 800a47c:	f000 80a3 	beq.w	800a5c6 <_printf_i+0x16e>
 800a480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a488:	e03a      	b.n	800a500 <_printf_i+0xa8>
 800a48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a48e:	2b15      	cmp	r3, #21
 800a490:	d8f6      	bhi.n	800a480 <_printf_i+0x28>
 800a492:	a001      	add	r0, pc, #4	; (adr r0, 800a498 <_printf_i+0x40>)
 800a494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a481 	.word	0x0800a481
 800a4a4:	0800a481 	.word	0x0800a481
 800a4a8:	0800a481 	.word	0x0800a481
 800a4ac:	0800a481 	.word	0x0800a481
 800a4b0:	0800a505 	.word	0x0800a505
 800a4b4:	0800a481 	.word	0x0800a481
 800a4b8:	0800a481 	.word	0x0800a481
 800a4bc:	0800a481 	.word	0x0800a481
 800a4c0:	0800a481 	.word	0x0800a481
 800a4c4:	0800a611 	.word	0x0800a611
 800a4c8:	0800a535 	.word	0x0800a535
 800a4cc:	0800a5f3 	.word	0x0800a5f3
 800a4d0:	0800a481 	.word	0x0800a481
 800a4d4:	0800a481 	.word	0x0800a481
 800a4d8:	0800a633 	.word	0x0800a633
 800a4dc:	0800a481 	.word	0x0800a481
 800a4e0:	0800a535 	.word	0x0800a535
 800a4e4:	0800a481 	.word	0x0800a481
 800a4e8:	0800a481 	.word	0x0800a481
 800a4ec:	0800a5fb 	.word	0x0800a5fb
 800a4f0:	680b      	ldr	r3, [r1, #0]
 800a4f2:	1d1a      	adds	r2, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	600a      	str	r2, [r1, #0]
 800a4f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a500:	2301      	movs	r3, #1
 800a502:	e0a3      	b.n	800a64c <_printf_i+0x1f4>
 800a504:	6825      	ldr	r5, [r4, #0]
 800a506:	6808      	ldr	r0, [r1, #0]
 800a508:	062e      	lsls	r6, r5, #24
 800a50a:	f100 0304 	add.w	r3, r0, #4
 800a50e:	d50a      	bpl.n	800a526 <_printf_i+0xce>
 800a510:	6805      	ldr	r5, [r0, #0]
 800a512:	600b      	str	r3, [r1, #0]
 800a514:	2d00      	cmp	r5, #0
 800a516:	da03      	bge.n	800a520 <_printf_i+0xc8>
 800a518:	232d      	movs	r3, #45	; 0x2d
 800a51a:	426d      	negs	r5, r5
 800a51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a520:	485e      	ldr	r0, [pc, #376]	; (800a69c <_printf_i+0x244>)
 800a522:	230a      	movs	r3, #10
 800a524:	e019      	b.n	800a55a <_printf_i+0x102>
 800a526:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a52a:	6805      	ldr	r5, [r0, #0]
 800a52c:	600b      	str	r3, [r1, #0]
 800a52e:	bf18      	it	ne
 800a530:	b22d      	sxthne	r5, r5
 800a532:	e7ef      	b.n	800a514 <_printf_i+0xbc>
 800a534:	680b      	ldr	r3, [r1, #0]
 800a536:	6825      	ldr	r5, [r4, #0]
 800a538:	1d18      	adds	r0, r3, #4
 800a53a:	6008      	str	r0, [r1, #0]
 800a53c:	0628      	lsls	r0, r5, #24
 800a53e:	d501      	bpl.n	800a544 <_printf_i+0xec>
 800a540:	681d      	ldr	r5, [r3, #0]
 800a542:	e002      	b.n	800a54a <_printf_i+0xf2>
 800a544:	0669      	lsls	r1, r5, #25
 800a546:	d5fb      	bpl.n	800a540 <_printf_i+0xe8>
 800a548:	881d      	ldrh	r5, [r3, #0]
 800a54a:	4854      	ldr	r0, [pc, #336]	; (800a69c <_printf_i+0x244>)
 800a54c:	2f6f      	cmp	r7, #111	; 0x6f
 800a54e:	bf0c      	ite	eq
 800a550:	2308      	moveq	r3, #8
 800a552:	230a      	movne	r3, #10
 800a554:	2100      	movs	r1, #0
 800a556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a55a:	6866      	ldr	r6, [r4, #4]
 800a55c:	60a6      	str	r6, [r4, #8]
 800a55e:	2e00      	cmp	r6, #0
 800a560:	bfa2      	ittt	ge
 800a562:	6821      	ldrge	r1, [r4, #0]
 800a564:	f021 0104 	bicge.w	r1, r1, #4
 800a568:	6021      	strge	r1, [r4, #0]
 800a56a:	b90d      	cbnz	r5, 800a570 <_printf_i+0x118>
 800a56c:	2e00      	cmp	r6, #0
 800a56e:	d04d      	beq.n	800a60c <_printf_i+0x1b4>
 800a570:	4616      	mov	r6, r2
 800a572:	fbb5 f1f3 	udiv	r1, r5, r3
 800a576:	fb03 5711 	mls	r7, r3, r1, r5
 800a57a:	5dc7      	ldrb	r7, [r0, r7]
 800a57c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a580:	462f      	mov	r7, r5
 800a582:	42bb      	cmp	r3, r7
 800a584:	460d      	mov	r5, r1
 800a586:	d9f4      	bls.n	800a572 <_printf_i+0x11a>
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d10b      	bne.n	800a5a4 <_printf_i+0x14c>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	07df      	lsls	r7, r3, #31
 800a590:	d508      	bpl.n	800a5a4 <_printf_i+0x14c>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	6861      	ldr	r1, [r4, #4]
 800a596:	4299      	cmp	r1, r3
 800a598:	bfde      	ittt	le
 800a59a:	2330      	movle	r3, #48	; 0x30
 800a59c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5a4:	1b92      	subs	r2, r2, r6
 800a5a6:	6122      	str	r2, [r4, #16]
 800a5a8:	f8cd a000 	str.w	sl, [sp]
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	aa03      	add	r2, sp, #12
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f7ff fee2 	bl	800a37c <_printf_common>
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	d14c      	bne.n	800a656 <_printf_i+0x1fe>
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	b004      	add	sp, #16
 800a5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c6:	4835      	ldr	r0, [pc, #212]	; (800a69c <_printf_i+0x244>)
 800a5c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	680e      	ldr	r6, [r1, #0]
 800a5d0:	061f      	lsls	r7, r3, #24
 800a5d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5d6:	600e      	str	r6, [r1, #0]
 800a5d8:	d514      	bpl.n	800a604 <_printf_i+0x1ac>
 800a5da:	07d9      	lsls	r1, r3, #31
 800a5dc:	bf44      	itt	mi
 800a5de:	f043 0320 	orrmi.w	r3, r3, #32
 800a5e2:	6023      	strmi	r3, [r4, #0]
 800a5e4:	b91d      	cbnz	r5, 800a5ee <_printf_i+0x196>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	f023 0320 	bic.w	r3, r3, #32
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	2310      	movs	r3, #16
 800a5f0:	e7b0      	b.n	800a554 <_printf_i+0xfc>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	f043 0320 	orr.w	r3, r3, #32
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	2378      	movs	r3, #120	; 0x78
 800a5fc:	4828      	ldr	r0, [pc, #160]	; (800a6a0 <_printf_i+0x248>)
 800a5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a602:	e7e3      	b.n	800a5cc <_printf_i+0x174>
 800a604:	065e      	lsls	r6, r3, #25
 800a606:	bf48      	it	mi
 800a608:	b2ad      	uxthmi	r5, r5
 800a60a:	e7e6      	b.n	800a5da <_printf_i+0x182>
 800a60c:	4616      	mov	r6, r2
 800a60e:	e7bb      	b.n	800a588 <_printf_i+0x130>
 800a610:	680b      	ldr	r3, [r1, #0]
 800a612:	6826      	ldr	r6, [r4, #0]
 800a614:	6960      	ldr	r0, [r4, #20]
 800a616:	1d1d      	adds	r5, r3, #4
 800a618:	600d      	str	r5, [r1, #0]
 800a61a:	0635      	lsls	r5, r6, #24
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	d501      	bpl.n	800a624 <_printf_i+0x1cc>
 800a620:	6018      	str	r0, [r3, #0]
 800a622:	e002      	b.n	800a62a <_printf_i+0x1d2>
 800a624:	0671      	lsls	r1, r6, #25
 800a626:	d5fb      	bpl.n	800a620 <_printf_i+0x1c8>
 800a628:	8018      	strh	r0, [r3, #0]
 800a62a:	2300      	movs	r3, #0
 800a62c:	6123      	str	r3, [r4, #16]
 800a62e:	4616      	mov	r6, r2
 800a630:	e7ba      	b.n	800a5a8 <_printf_i+0x150>
 800a632:	680b      	ldr	r3, [r1, #0]
 800a634:	1d1a      	adds	r2, r3, #4
 800a636:	600a      	str	r2, [r1, #0]
 800a638:	681e      	ldr	r6, [r3, #0]
 800a63a:	6862      	ldr	r2, [r4, #4]
 800a63c:	2100      	movs	r1, #0
 800a63e:	4630      	mov	r0, r6
 800a640:	f7f5 fdce 	bl	80001e0 <memchr>
 800a644:	b108      	cbz	r0, 800a64a <_printf_i+0x1f2>
 800a646:	1b80      	subs	r0, r0, r6
 800a648:	6060      	str	r0, [r4, #4]
 800a64a:	6863      	ldr	r3, [r4, #4]
 800a64c:	6123      	str	r3, [r4, #16]
 800a64e:	2300      	movs	r3, #0
 800a650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a654:	e7a8      	b.n	800a5a8 <_printf_i+0x150>
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	4632      	mov	r2, r6
 800a65a:	4649      	mov	r1, r9
 800a65c:	4640      	mov	r0, r8
 800a65e:	47d0      	blx	sl
 800a660:	3001      	adds	r0, #1
 800a662:	d0ab      	beq.n	800a5bc <_printf_i+0x164>
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	079b      	lsls	r3, r3, #30
 800a668:	d413      	bmi.n	800a692 <_printf_i+0x23a>
 800a66a:	68e0      	ldr	r0, [r4, #12]
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	4298      	cmp	r0, r3
 800a670:	bfb8      	it	lt
 800a672:	4618      	movlt	r0, r3
 800a674:	e7a4      	b.n	800a5c0 <_printf_i+0x168>
 800a676:	2301      	movs	r3, #1
 800a678:	4632      	mov	r2, r6
 800a67a:	4649      	mov	r1, r9
 800a67c:	4640      	mov	r0, r8
 800a67e:	47d0      	blx	sl
 800a680:	3001      	adds	r0, #1
 800a682:	d09b      	beq.n	800a5bc <_printf_i+0x164>
 800a684:	3501      	adds	r5, #1
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	9903      	ldr	r1, [sp, #12]
 800a68a:	1a5b      	subs	r3, r3, r1
 800a68c:	42ab      	cmp	r3, r5
 800a68e:	dcf2      	bgt.n	800a676 <_printf_i+0x21e>
 800a690:	e7eb      	b.n	800a66a <_printf_i+0x212>
 800a692:	2500      	movs	r5, #0
 800a694:	f104 0619 	add.w	r6, r4, #25
 800a698:	e7f5      	b.n	800a686 <_printf_i+0x22e>
 800a69a:	bf00      	nop
 800a69c:	0800e552 	.word	0x0800e552
 800a6a0:	0800e563 	.word	0x0800e563

0800a6a4 <_scanf_float>:
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	b087      	sub	sp, #28
 800a6aa:	4617      	mov	r7, r2
 800a6ac:	9303      	str	r3, [sp, #12]
 800a6ae:	688b      	ldr	r3, [r1, #8]
 800a6b0:	1e5a      	subs	r2, r3, #1
 800a6b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a6b6:	bf83      	ittte	hi
 800a6b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a6bc:	195b      	addhi	r3, r3, r5
 800a6be:	9302      	strhi	r3, [sp, #8]
 800a6c0:	2300      	movls	r3, #0
 800a6c2:	bf86      	itte	hi
 800a6c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a6c8:	608b      	strhi	r3, [r1, #8]
 800a6ca:	9302      	strls	r3, [sp, #8]
 800a6cc:	680b      	ldr	r3, [r1, #0]
 800a6ce:	468b      	mov	fp, r1
 800a6d0:	2500      	movs	r5, #0
 800a6d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a6d6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a6da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6de:	4680      	mov	r8, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	465e      	mov	r6, fp
 800a6e4:	46aa      	mov	sl, r5
 800a6e6:	46a9      	mov	r9, r5
 800a6e8:	9501      	str	r5, [sp, #4]
 800a6ea:	68a2      	ldr	r2, [r4, #8]
 800a6ec:	b152      	cbz	r2, 800a704 <_scanf_float+0x60>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	2b4e      	cmp	r3, #78	; 0x4e
 800a6f4:	d864      	bhi.n	800a7c0 <_scanf_float+0x11c>
 800a6f6:	2b40      	cmp	r3, #64	; 0x40
 800a6f8:	d83c      	bhi.n	800a774 <_scanf_float+0xd0>
 800a6fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a6fe:	b2c8      	uxtb	r0, r1
 800a700:	280e      	cmp	r0, #14
 800a702:	d93a      	bls.n	800a77a <_scanf_float+0xd6>
 800a704:	f1b9 0f00 	cmp.w	r9, #0
 800a708:	d003      	beq.n	800a712 <_scanf_float+0x6e>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a716:	f1ba 0f01 	cmp.w	sl, #1
 800a71a:	f200 8113 	bhi.w	800a944 <_scanf_float+0x2a0>
 800a71e:	455e      	cmp	r6, fp
 800a720:	f200 8105 	bhi.w	800a92e <_scanf_float+0x28a>
 800a724:	2501      	movs	r5, #1
 800a726:	4628      	mov	r0, r5
 800a728:	b007      	add	sp, #28
 800a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a732:	2a0d      	cmp	r2, #13
 800a734:	d8e6      	bhi.n	800a704 <_scanf_float+0x60>
 800a736:	a101      	add	r1, pc, #4	; (adr r1, 800a73c <_scanf_float+0x98>)
 800a738:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a73c:	0800a87b 	.word	0x0800a87b
 800a740:	0800a705 	.word	0x0800a705
 800a744:	0800a705 	.word	0x0800a705
 800a748:	0800a705 	.word	0x0800a705
 800a74c:	0800a8db 	.word	0x0800a8db
 800a750:	0800a8b3 	.word	0x0800a8b3
 800a754:	0800a705 	.word	0x0800a705
 800a758:	0800a705 	.word	0x0800a705
 800a75c:	0800a889 	.word	0x0800a889
 800a760:	0800a705 	.word	0x0800a705
 800a764:	0800a705 	.word	0x0800a705
 800a768:	0800a705 	.word	0x0800a705
 800a76c:	0800a705 	.word	0x0800a705
 800a770:	0800a841 	.word	0x0800a841
 800a774:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a778:	e7db      	b.n	800a732 <_scanf_float+0x8e>
 800a77a:	290e      	cmp	r1, #14
 800a77c:	d8c2      	bhi.n	800a704 <_scanf_float+0x60>
 800a77e:	a001      	add	r0, pc, #4	; (adr r0, 800a784 <_scanf_float+0xe0>)
 800a780:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a784:	0800a833 	.word	0x0800a833
 800a788:	0800a705 	.word	0x0800a705
 800a78c:	0800a833 	.word	0x0800a833
 800a790:	0800a8c7 	.word	0x0800a8c7
 800a794:	0800a705 	.word	0x0800a705
 800a798:	0800a7e1 	.word	0x0800a7e1
 800a79c:	0800a81d 	.word	0x0800a81d
 800a7a0:	0800a81d 	.word	0x0800a81d
 800a7a4:	0800a81d 	.word	0x0800a81d
 800a7a8:	0800a81d 	.word	0x0800a81d
 800a7ac:	0800a81d 	.word	0x0800a81d
 800a7b0:	0800a81d 	.word	0x0800a81d
 800a7b4:	0800a81d 	.word	0x0800a81d
 800a7b8:	0800a81d 	.word	0x0800a81d
 800a7bc:	0800a81d 	.word	0x0800a81d
 800a7c0:	2b6e      	cmp	r3, #110	; 0x6e
 800a7c2:	d809      	bhi.n	800a7d8 <_scanf_float+0x134>
 800a7c4:	2b60      	cmp	r3, #96	; 0x60
 800a7c6:	d8b2      	bhi.n	800a72e <_scanf_float+0x8a>
 800a7c8:	2b54      	cmp	r3, #84	; 0x54
 800a7ca:	d077      	beq.n	800a8bc <_scanf_float+0x218>
 800a7cc:	2b59      	cmp	r3, #89	; 0x59
 800a7ce:	d199      	bne.n	800a704 <_scanf_float+0x60>
 800a7d0:	2d07      	cmp	r5, #7
 800a7d2:	d197      	bne.n	800a704 <_scanf_float+0x60>
 800a7d4:	2508      	movs	r5, #8
 800a7d6:	e029      	b.n	800a82c <_scanf_float+0x188>
 800a7d8:	2b74      	cmp	r3, #116	; 0x74
 800a7da:	d06f      	beq.n	800a8bc <_scanf_float+0x218>
 800a7dc:	2b79      	cmp	r3, #121	; 0x79
 800a7de:	e7f6      	b.n	800a7ce <_scanf_float+0x12a>
 800a7e0:	6821      	ldr	r1, [r4, #0]
 800a7e2:	05c8      	lsls	r0, r1, #23
 800a7e4:	d51a      	bpl.n	800a81c <_scanf_float+0x178>
 800a7e6:	9b02      	ldr	r3, [sp, #8]
 800a7e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a7ec:	6021      	str	r1, [r4, #0]
 800a7ee:	f109 0901 	add.w	r9, r9, #1
 800a7f2:	b11b      	cbz	r3, 800a7fc <_scanf_float+0x158>
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	3201      	adds	r2, #1
 800a7f8:	9302      	str	r3, [sp, #8]
 800a7fa:	60a2      	str	r2, [r4, #8]
 800a7fc:	68a3      	ldr	r3, [r4, #8]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	3301      	adds	r3, #1
 800a806:	6123      	str	r3, [r4, #16]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	f340 8084 	ble.w	800a91c <_scanf_float+0x278>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	3301      	adds	r3, #1
 800a818:	603b      	str	r3, [r7, #0]
 800a81a:	e766      	b.n	800a6ea <_scanf_float+0x46>
 800a81c:	eb1a 0f05 	cmn.w	sl, r5
 800a820:	f47f af70 	bne.w	800a704 <_scanf_float+0x60>
 800a824:	6822      	ldr	r2, [r4, #0]
 800a826:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a82a:	6022      	str	r2, [r4, #0]
 800a82c:	f806 3b01 	strb.w	r3, [r6], #1
 800a830:	e7e4      	b.n	800a7fc <_scanf_float+0x158>
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	0610      	lsls	r0, r2, #24
 800a836:	f57f af65 	bpl.w	800a704 <_scanf_float+0x60>
 800a83a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a83e:	e7f4      	b.n	800a82a <_scanf_float+0x186>
 800a840:	f1ba 0f00 	cmp.w	sl, #0
 800a844:	d10e      	bne.n	800a864 <_scanf_float+0x1c0>
 800a846:	f1b9 0f00 	cmp.w	r9, #0
 800a84a:	d10e      	bne.n	800a86a <_scanf_float+0x1c6>
 800a84c:	6822      	ldr	r2, [r4, #0]
 800a84e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a852:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a856:	d108      	bne.n	800a86a <_scanf_float+0x1c6>
 800a858:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a85c:	6022      	str	r2, [r4, #0]
 800a85e:	f04f 0a01 	mov.w	sl, #1
 800a862:	e7e3      	b.n	800a82c <_scanf_float+0x188>
 800a864:	f1ba 0f02 	cmp.w	sl, #2
 800a868:	d055      	beq.n	800a916 <_scanf_float+0x272>
 800a86a:	2d01      	cmp	r5, #1
 800a86c:	d002      	beq.n	800a874 <_scanf_float+0x1d0>
 800a86e:	2d04      	cmp	r5, #4
 800a870:	f47f af48 	bne.w	800a704 <_scanf_float+0x60>
 800a874:	3501      	adds	r5, #1
 800a876:	b2ed      	uxtb	r5, r5
 800a878:	e7d8      	b.n	800a82c <_scanf_float+0x188>
 800a87a:	f1ba 0f01 	cmp.w	sl, #1
 800a87e:	f47f af41 	bne.w	800a704 <_scanf_float+0x60>
 800a882:	f04f 0a02 	mov.w	sl, #2
 800a886:	e7d1      	b.n	800a82c <_scanf_float+0x188>
 800a888:	b97d      	cbnz	r5, 800a8aa <_scanf_float+0x206>
 800a88a:	f1b9 0f00 	cmp.w	r9, #0
 800a88e:	f47f af3c 	bne.w	800a70a <_scanf_float+0x66>
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a898:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a89c:	f47f af39 	bne.w	800a712 <_scanf_float+0x6e>
 800a8a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8a4:	6022      	str	r2, [r4, #0]
 800a8a6:	2501      	movs	r5, #1
 800a8a8:	e7c0      	b.n	800a82c <_scanf_float+0x188>
 800a8aa:	2d03      	cmp	r5, #3
 800a8ac:	d0e2      	beq.n	800a874 <_scanf_float+0x1d0>
 800a8ae:	2d05      	cmp	r5, #5
 800a8b0:	e7de      	b.n	800a870 <_scanf_float+0x1cc>
 800a8b2:	2d02      	cmp	r5, #2
 800a8b4:	f47f af26 	bne.w	800a704 <_scanf_float+0x60>
 800a8b8:	2503      	movs	r5, #3
 800a8ba:	e7b7      	b.n	800a82c <_scanf_float+0x188>
 800a8bc:	2d06      	cmp	r5, #6
 800a8be:	f47f af21 	bne.w	800a704 <_scanf_float+0x60>
 800a8c2:	2507      	movs	r5, #7
 800a8c4:	e7b2      	b.n	800a82c <_scanf_float+0x188>
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	0591      	lsls	r1, r2, #22
 800a8ca:	f57f af1b 	bpl.w	800a704 <_scanf_float+0x60>
 800a8ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a8d2:	6022      	str	r2, [r4, #0]
 800a8d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8d8:	e7a8      	b.n	800a82c <_scanf_float+0x188>
 800a8da:	6822      	ldr	r2, [r4, #0]
 800a8dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a8e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a8e4:	d006      	beq.n	800a8f4 <_scanf_float+0x250>
 800a8e6:	0550      	lsls	r0, r2, #21
 800a8e8:	f57f af0c 	bpl.w	800a704 <_scanf_float+0x60>
 800a8ec:	f1b9 0f00 	cmp.w	r9, #0
 800a8f0:	f43f af0f 	beq.w	800a712 <_scanf_float+0x6e>
 800a8f4:	0591      	lsls	r1, r2, #22
 800a8f6:	bf58      	it	pl
 800a8f8:	9901      	ldrpl	r1, [sp, #4]
 800a8fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8fe:	bf58      	it	pl
 800a900:	eba9 0101 	subpl.w	r1, r9, r1
 800a904:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a908:	bf58      	it	pl
 800a90a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a90e:	6022      	str	r2, [r4, #0]
 800a910:	f04f 0900 	mov.w	r9, #0
 800a914:	e78a      	b.n	800a82c <_scanf_float+0x188>
 800a916:	f04f 0a03 	mov.w	sl, #3
 800a91a:	e787      	b.n	800a82c <_scanf_float+0x188>
 800a91c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a920:	4639      	mov	r1, r7
 800a922:	4640      	mov	r0, r8
 800a924:	4798      	blx	r3
 800a926:	2800      	cmp	r0, #0
 800a928:	f43f aedf 	beq.w	800a6ea <_scanf_float+0x46>
 800a92c:	e6ea      	b.n	800a704 <_scanf_float+0x60>
 800a92e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a936:	463a      	mov	r2, r7
 800a938:	4640      	mov	r0, r8
 800a93a:	4798      	blx	r3
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	3b01      	subs	r3, #1
 800a940:	6123      	str	r3, [r4, #16]
 800a942:	e6ec      	b.n	800a71e <_scanf_float+0x7a>
 800a944:	1e6b      	subs	r3, r5, #1
 800a946:	2b06      	cmp	r3, #6
 800a948:	d825      	bhi.n	800a996 <_scanf_float+0x2f2>
 800a94a:	2d02      	cmp	r5, #2
 800a94c:	d836      	bhi.n	800a9bc <_scanf_float+0x318>
 800a94e:	455e      	cmp	r6, fp
 800a950:	f67f aee8 	bls.w	800a724 <_scanf_float+0x80>
 800a954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a958:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a95c:	463a      	mov	r2, r7
 800a95e:	4640      	mov	r0, r8
 800a960:	4798      	blx	r3
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	3b01      	subs	r3, #1
 800a966:	6123      	str	r3, [r4, #16]
 800a968:	e7f1      	b.n	800a94e <_scanf_float+0x2aa>
 800a96a:	9802      	ldr	r0, [sp, #8]
 800a96c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a970:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a974:	9002      	str	r0, [sp, #8]
 800a976:	463a      	mov	r2, r7
 800a978:	4640      	mov	r0, r8
 800a97a:	4798      	blx	r3
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	3b01      	subs	r3, #1
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a986:	fa5f fa8a 	uxtb.w	sl, sl
 800a98a:	f1ba 0f02 	cmp.w	sl, #2
 800a98e:	d1ec      	bne.n	800a96a <_scanf_float+0x2c6>
 800a990:	3d03      	subs	r5, #3
 800a992:	b2ed      	uxtb	r5, r5
 800a994:	1b76      	subs	r6, r6, r5
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	05da      	lsls	r2, r3, #23
 800a99a:	d52f      	bpl.n	800a9fc <_scanf_float+0x358>
 800a99c:	055b      	lsls	r3, r3, #21
 800a99e:	d510      	bpl.n	800a9c2 <_scanf_float+0x31e>
 800a9a0:	455e      	cmp	r6, fp
 800a9a2:	f67f aebf 	bls.w	800a724 <_scanf_float+0x80>
 800a9a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9ae:	463a      	mov	r2, r7
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	4798      	blx	r3
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	6123      	str	r3, [r4, #16]
 800a9ba:	e7f1      	b.n	800a9a0 <_scanf_float+0x2fc>
 800a9bc:	46aa      	mov	sl, r5
 800a9be:	9602      	str	r6, [sp, #8]
 800a9c0:	e7df      	b.n	800a982 <_scanf_float+0x2de>
 800a9c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a9c6:	6923      	ldr	r3, [r4, #16]
 800a9c8:	2965      	cmp	r1, #101	; 0x65
 800a9ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9ce:	f106 35ff 	add.w	r5, r6, #4294967295
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	d00c      	beq.n	800a9f0 <_scanf_float+0x34c>
 800a9d6:	2945      	cmp	r1, #69	; 0x45
 800a9d8:	d00a      	beq.n	800a9f0 <_scanf_float+0x34c>
 800a9da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9de:	463a      	mov	r2, r7
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	4798      	blx	r3
 800a9e4:	6923      	ldr	r3, [r4, #16]
 800a9e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	1eb5      	subs	r5, r6, #2
 800a9ee:	6123      	str	r3, [r4, #16]
 800a9f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9f4:	463a      	mov	r2, r7
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	4798      	blx	r3
 800a9fa:	462e      	mov	r6, r5
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	f015 0510 	ands.w	r5, r5, #16
 800aa02:	d158      	bne.n	800aab6 <_scanf_float+0x412>
 800aa04:	7035      	strb	r5, [r6, #0]
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa10:	d11c      	bne.n	800aa4c <_scanf_float+0x3a8>
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	454b      	cmp	r3, r9
 800aa16:	eba3 0209 	sub.w	r2, r3, r9
 800aa1a:	d124      	bne.n	800aa66 <_scanf_float+0x3c2>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4659      	mov	r1, fp
 800aa20:	4640      	mov	r0, r8
 800aa22:	f000 ffd7 	bl	800b9d4 <_strtod_r>
 800aa26:	9b03      	ldr	r3, [sp, #12]
 800aa28:	6821      	ldr	r1, [r4, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f011 0f02 	tst.w	r1, #2
 800aa30:	ec57 6b10 	vmov	r6, r7, d0
 800aa34:	f103 0204 	add.w	r2, r3, #4
 800aa38:	d020      	beq.n	800aa7c <_scanf_float+0x3d8>
 800aa3a:	9903      	ldr	r1, [sp, #12]
 800aa3c:	600a      	str	r2, [r1, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	e9c3 6700 	strd	r6, r7, [r3]
 800aa44:	68e3      	ldr	r3, [r4, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60e3      	str	r3, [r4, #12]
 800aa4a:	e66c      	b.n	800a726 <_scanf_float+0x82>
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0e4      	beq.n	800aa1c <_scanf_float+0x378>
 800aa52:	9905      	ldr	r1, [sp, #20]
 800aa54:	230a      	movs	r3, #10
 800aa56:	462a      	mov	r2, r5
 800aa58:	3101      	adds	r1, #1
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f001 f844 	bl	800bae8 <_strtol_r>
 800aa60:	9b04      	ldr	r3, [sp, #16]
 800aa62:	9e05      	ldr	r6, [sp, #20]
 800aa64:	1ac2      	subs	r2, r0, r3
 800aa66:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aa6a:	429e      	cmp	r6, r3
 800aa6c:	bf28      	it	cs
 800aa6e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aa72:	4912      	ldr	r1, [pc, #72]	; (800aabc <_scanf_float+0x418>)
 800aa74:	4630      	mov	r0, r6
 800aa76:	f000 f921 	bl	800acbc <siprintf>
 800aa7a:	e7cf      	b.n	800aa1c <_scanf_float+0x378>
 800aa7c:	f011 0f04 	tst.w	r1, #4
 800aa80:	9903      	ldr	r1, [sp, #12]
 800aa82:	600a      	str	r2, [r1, #0]
 800aa84:	d1db      	bne.n	800aa3e <_scanf_float+0x39a>
 800aa86:	f8d3 8000 	ldr.w	r8, [r3]
 800aa8a:	ee10 2a10 	vmov	r2, s0
 800aa8e:	ee10 0a10 	vmov	r0, s0
 800aa92:	463b      	mov	r3, r7
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f6 f849 	bl	8000b2c <__aeabi_dcmpun>
 800aa9a:	b128      	cbz	r0, 800aaa8 <_scanf_float+0x404>
 800aa9c:	4808      	ldr	r0, [pc, #32]	; (800aac0 <_scanf_float+0x41c>)
 800aa9e:	f000 f907 	bl	800acb0 <nanf>
 800aaa2:	ed88 0a00 	vstr	s0, [r8]
 800aaa6:	e7cd      	b.n	800aa44 <_scanf_float+0x3a0>
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4639      	mov	r1, r7
 800aaac:	f7f6 f89c 	bl	8000be8 <__aeabi_d2f>
 800aab0:	f8c8 0000 	str.w	r0, [r8]
 800aab4:	e7c6      	b.n	800aa44 <_scanf_float+0x3a0>
 800aab6:	2500      	movs	r5, #0
 800aab8:	e635      	b.n	800a726 <_scanf_float+0x82>
 800aaba:	bf00      	nop
 800aabc:	0800e574 	.word	0x0800e574
 800aac0:	0800e990 	.word	0x0800e990

0800aac4 <iprintf>:
 800aac4:	b40f      	push	{r0, r1, r2, r3}
 800aac6:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <iprintf+0x2c>)
 800aac8:	b513      	push	{r0, r1, r4, lr}
 800aaca:	681c      	ldr	r4, [r3, #0]
 800aacc:	b124      	cbz	r4, 800aad8 <iprintf+0x14>
 800aace:	69a3      	ldr	r3, [r4, #24]
 800aad0:	b913      	cbnz	r3, 800aad8 <iprintf+0x14>
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff f804 	bl	8009ae0 <__sinit>
 800aad8:	ab05      	add	r3, sp, #20
 800aada:	9a04      	ldr	r2, [sp, #16]
 800aadc:	68a1      	ldr	r1, [r4, #8]
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	4620      	mov	r0, r4
 800aae2:	f003 f90b 	bl	800dcfc <_vfiprintf_r>
 800aae6:	b002      	add	sp, #8
 800aae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaec:	b004      	add	sp, #16
 800aaee:	4770      	bx	lr
 800aaf0:	2000001c 	.word	0x2000001c

0800aaf4 <_sbrk_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d06      	ldr	r5, [pc, #24]	; (800ab10 <_sbrk_r+0x1c>)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4604      	mov	r4, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	602b      	str	r3, [r5, #0]
 800ab00:	f7f9 fbdc 	bl	80042bc <_sbrk>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_sbrk_r+0x1a>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_sbrk_r+0x1a>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	200017b4 	.word	0x200017b4

0800ab14 <setbuf>:
 800ab14:	2900      	cmp	r1, #0
 800ab16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab1a:	bf0c      	ite	eq
 800ab1c:	2202      	moveq	r2, #2
 800ab1e:	2200      	movne	r2, #0
 800ab20:	f000 b800 	b.w	800ab24 <setvbuf>

0800ab24 <setvbuf>:
 800ab24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	461d      	mov	r5, r3
 800ab2a:	4b5d      	ldr	r3, [pc, #372]	; (800aca0 <setvbuf+0x17c>)
 800ab2c:	681f      	ldr	r7, [r3, #0]
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460e      	mov	r6, r1
 800ab32:	4690      	mov	r8, r2
 800ab34:	b127      	cbz	r7, 800ab40 <setvbuf+0x1c>
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	b913      	cbnz	r3, 800ab40 <setvbuf+0x1c>
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	f7fe ffd0 	bl	8009ae0 <__sinit>
 800ab40:	4b58      	ldr	r3, [pc, #352]	; (800aca4 <setvbuf+0x180>)
 800ab42:	429c      	cmp	r4, r3
 800ab44:	d167      	bne.n	800ac16 <setvbuf+0xf2>
 800ab46:	687c      	ldr	r4, [r7, #4]
 800ab48:	f1b8 0f02 	cmp.w	r8, #2
 800ab4c:	d006      	beq.n	800ab5c <setvbuf+0x38>
 800ab4e:	f1b8 0f01 	cmp.w	r8, #1
 800ab52:	f200 809f 	bhi.w	800ac94 <setvbuf+0x170>
 800ab56:	2d00      	cmp	r5, #0
 800ab58:	f2c0 809c 	blt.w	800ac94 <setvbuf+0x170>
 800ab5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab5e:	07db      	lsls	r3, r3, #31
 800ab60:	d405      	bmi.n	800ab6e <setvbuf+0x4a>
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	0598      	lsls	r0, r3, #22
 800ab66:	d402      	bmi.n	800ab6e <setvbuf+0x4a>
 800ab68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab6a:	f7ff f87c 	bl	8009c66 <__retarget_lock_acquire_recursive>
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7fe ff0f 	bl	8009994 <_fflush_r>
 800ab76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab78:	b141      	cbz	r1, 800ab8c <setvbuf+0x68>
 800ab7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab7e:	4299      	cmp	r1, r3
 800ab80:	d002      	beq.n	800ab88 <setvbuf+0x64>
 800ab82:	4638      	mov	r0, r7
 800ab84:	f7ff f87a 	bl	8009c7c <_free_r>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	6363      	str	r3, [r4, #52]	; 0x34
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61a3      	str	r3, [r4, #24]
 800ab90:	6063      	str	r3, [r4, #4]
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	0619      	lsls	r1, r3, #24
 800ab96:	d503      	bpl.n	800aba0 <setvbuf+0x7c>
 800ab98:	6921      	ldr	r1, [r4, #16]
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	f7ff f86e 	bl	8009c7c <_free_r>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800aba6:	f023 0303 	bic.w	r3, r3, #3
 800abaa:	f1b8 0f02 	cmp.w	r8, #2
 800abae:	81a3      	strh	r3, [r4, #12]
 800abb0:	d06c      	beq.n	800ac8c <setvbuf+0x168>
 800abb2:	ab01      	add	r3, sp, #4
 800abb4:	466a      	mov	r2, sp
 800abb6:	4621      	mov	r1, r4
 800abb8:	4638      	mov	r0, r7
 800abba:	f002 f9b7 	bl	800cf2c <__swhatbuf_r>
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	4318      	orrs	r0, r3
 800abc2:	81a0      	strh	r0, [r4, #12]
 800abc4:	2d00      	cmp	r5, #0
 800abc6:	d130      	bne.n	800ac2a <setvbuf+0x106>
 800abc8:	9d00      	ldr	r5, [sp, #0]
 800abca:	4628      	mov	r0, r5
 800abcc:	f002 fa12 	bl	800cff4 <malloc>
 800abd0:	4606      	mov	r6, r0
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d155      	bne.n	800ac82 <setvbuf+0x15e>
 800abd6:	f8dd 9000 	ldr.w	r9, [sp]
 800abda:	45a9      	cmp	r9, r5
 800abdc:	d14a      	bne.n	800ac74 <setvbuf+0x150>
 800abde:	f04f 35ff 	mov.w	r5, #4294967295
 800abe2:	2200      	movs	r2, #0
 800abe4:	60a2      	str	r2, [r4, #8]
 800abe6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800abea:	6022      	str	r2, [r4, #0]
 800abec:	6122      	str	r2, [r4, #16]
 800abee:	2201      	movs	r2, #1
 800abf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf4:	6162      	str	r2, [r4, #20]
 800abf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abf8:	f043 0302 	orr.w	r3, r3, #2
 800abfc:	07d2      	lsls	r2, r2, #31
 800abfe:	81a3      	strh	r3, [r4, #12]
 800ac00:	d405      	bmi.n	800ac0e <setvbuf+0xea>
 800ac02:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ac06:	d102      	bne.n	800ac0e <setvbuf+0xea>
 800ac08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac0a:	f7ff f82d 	bl	8009c68 <__retarget_lock_release_recursive>
 800ac0e:	4628      	mov	r0, r5
 800ac10:	b003      	add	sp, #12
 800ac12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac16:	4b24      	ldr	r3, [pc, #144]	; (800aca8 <setvbuf+0x184>)
 800ac18:	429c      	cmp	r4, r3
 800ac1a:	d101      	bne.n	800ac20 <setvbuf+0xfc>
 800ac1c:	68bc      	ldr	r4, [r7, #8]
 800ac1e:	e793      	b.n	800ab48 <setvbuf+0x24>
 800ac20:	4b22      	ldr	r3, [pc, #136]	; (800acac <setvbuf+0x188>)
 800ac22:	429c      	cmp	r4, r3
 800ac24:	bf08      	it	eq
 800ac26:	68fc      	ldreq	r4, [r7, #12]
 800ac28:	e78e      	b.n	800ab48 <setvbuf+0x24>
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d0cd      	beq.n	800abca <setvbuf+0xa6>
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	b913      	cbnz	r3, 800ac38 <setvbuf+0x114>
 800ac32:	4638      	mov	r0, r7
 800ac34:	f7fe ff54 	bl	8009ae0 <__sinit>
 800ac38:	f1b8 0f01 	cmp.w	r8, #1
 800ac3c:	bf08      	it	eq
 800ac3e:	89a3      	ldrheq	r3, [r4, #12]
 800ac40:	6026      	str	r6, [r4, #0]
 800ac42:	bf04      	itt	eq
 800ac44:	f043 0301 	orreq.w	r3, r3, #1
 800ac48:	81a3      	strheq	r3, [r4, #12]
 800ac4a:	89a2      	ldrh	r2, [r4, #12]
 800ac4c:	f012 0308 	ands.w	r3, r2, #8
 800ac50:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ac54:	d01c      	beq.n	800ac90 <setvbuf+0x16c>
 800ac56:	07d3      	lsls	r3, r2, #31
 800ac58:	bf41      	itttt	mi
 800ac5a:	2300      	movmi	r3, #0
 800ac5c:	426d      	negmi	r5, r5
 800ac5e:	60a3      	strmi	r3, [r4, #8]
 800ac60:	61a5      	strmi	r5, [r4, #24]
 800ac62:	bf58      	it	pl
 800ac64:	60a5      	strpl	r5, [r4, #8]
 800ac66:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ac68:	f015 0501 	ands.w	r5, r5, #1
 800ac6c:	d115      	bne.n	800ac9a <setvbuf+0x176>
 800ac6e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ac72:	e7c8      	b.n	800ac06 <setvbuf+0xe2>
 800ac74:	4648      	mov	r0, r9
 800ac76:	f002 f9bd 	bl	800cff4 <malloc>
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d0ae      	beq.n	800abde <setvbuf+0xba>
 800ac80:	464d      	mov	r5, r9
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	e7d0      	b.n	800ac2e <setvbuf+0x10a>
 800ac8c:	2500      	movs	r5, #0
 800ac8e:	e7a8      	b.n	800abe2 <setvbuf+0xbe>
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	e7e8      	b.n	800ac66 <setvbuf+0x142>
 800ac94:	f04f 35ff 	mov.w	r5, #4294967295
 800ac98:	e7b9      	b.n	800ac0e <setvbuf+0xea>
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	e7b7      	b.n	800ac0e <setvbuf+0xea>
 800ac9e:	bf00      	nop
 800aca0:	2000001c 	.word	0x2000001c
 800aca4:	0800e4fc 	.word	0x0800e4fc
 800aca8:	0800e51c 	.word	0x0800e51c
 800acac:	0800e4dc 	.word	0x0800e4dc

0800acb0 <nanf>:
 800acb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800acb8 <nanf+0x8>
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	7fc00000 	.word	0x7fc00000

0800acbc <siprintf>:
 800acbc:	b40e      	push	{r1, r2, r3}
 800acbe:	b500      	push	{lr}
 800acc0:	b09c      	sub	sp, #112	; 0x70
 800acc2:	ab1d      	add	r3, sp, #116	; 0x74
 800acc4:	9002      	str	r0, [sp, #8]
 800acc6:	9006      	str	r0, [sp, #24]
 800acc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800accc:	4809      	ldr	r0, [pc, #36]	; (800acf4 <siprintf+0x38>)
 800acce:	9107      	str	r1, [sp, #28]
 800acd0:	9104      	str	r1, [sp, #16]
 800acd2:	4909      	ldr	r1, [pc, #36]	; (800acf8 <siprintf+0x3c>)
 800acd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd8:	9105      	str	r1, [sp, #20]
 800acda:	6800      	ldr	r0, [r0, #0]
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	a902      	add	r1, sp, #8
 800ace0:	f002 fee2 	bl	800daa8 <_svfiprintf_r>
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	b01c      	add	sp, #112	; 0x70
 800acec:	f85d eb04 	ldr.w	lr, [sp], #4
 800acf0:	b003      	add	sp, #12
 800acf2:	4770      	bx	lr
 800acf4:	2000001c 	.word	0x2000001c
 800acf8:	ffff0208 	.word	0xffff0208

0800acfc <__sread>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	460c      	mov	r4, r1
 800ad00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad04:	f003 f92a 	bl	800df5c <_read_r>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	bfab      	itete	ge
 800ad0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad10:	181b      	addge	r3, r3, r0
 800ad12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad16:	bfac      	ite	ge
 800ad18:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad1a:	81a3      	strhlt	r3, [r4, #12]
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <__swrite>:
 800ad1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad22:	461f      	mov	r7, r3
 800ad24:	898b      	ldrh	r3, [r1, #12]
 800ad26:	05db      	lsls	r3, r3, #23
 800ad28:	4605      	mov	r5, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	d505      	bpl.n	800ad3c <__swrite+0x1e>
 800ad30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad34:	2302      	movs	r3, #2
 800ad36:	2200      	movs	r2, #0
 800ad38:	f002 f8e6 	bl	800cf08 <_lseek_r>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	4632      	mov	r2, r6
 800ad4a:	463b      	mov	r3, r7
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad52:	f000 becb 	b.w	800baec <_write_r>

0800ad56 <__sseek>:
 800ad56:	b510      	push	{r4, lr}
 800ad58:	460c      	mov	r4, r1
 800ad5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5e:	f002 f8d3 	bl	800cf08 <_lseek_r>
 800ad62:	1c43      	adds	r3, r0, #1
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	bf15      	itete	ne
 800ad68:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad72:	81a3      	strheq	r3, [r4, #12]
 800ad74:	bf18      	it	ne
 800ad76:	81a3      	strhne	r3, [r4, #12]
 800ad78:	bd10      	pop	{r4, pc}

0800ad7a <__sclose>:
 800ad7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7e:	f000 bec7 	b.w	800bb10 <_close_r>

0800ad82 <sulp>:
 800ad82:	b570      	push	{r4, r5, r6, lr}
 800ad84:	4604      	mov	r4, r0
 800ad86:	460d      	mov	r5, r1
 800ad88:	ec45 4b10 	vmov	d0, r4, r5
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	f002 fcd1 	bl	800d734 <__ulp>
 800ad92:	ec51 0b10 	vmov	r0, r1, d0
 800ad96:	b17e      	cbz	r6, 800adb8 <sulp+0x36>
 800ad98:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd09      	ble.n	800adb8 <sulp+0x36>
 800ada4:	051b      	lsls	r3, r3, #20
 800ada6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800adaa:	2400      	movs	r4, #0
 800adac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800adb0:	4622      	mov	r2, r4
 800adb2:	462b      	mov	r3, r5
 800adb4:	f7f5 fc20 	bl	80005f8 <__aeabi_dmul>
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	0000      	movs	r0, r0
 800adbc:	0000      	movs	r0, r0
	...

0800adc0 <_strtod_l>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	b0a3      	sub	sp, #140	; 0x8c
 800adc6:	461f      	mov	r7, r3
 800adc8:	2300      	movs	r3, #0
 800adca:	931e      	str	r3, [sp, #120]	; 0x78
 800adcc:	4ba4      	ldr	r3, [pc, #656]	; (800b060 <_strtod_l+0x2a0>)
 800adce:	9219      	str	r2, [sp, #100]	; 0x64
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	9307      	str	r3, [sp, #28]
 800add4:	4604      	mov	r4, r0
 800add6:	4618      	mov	r0, r3
 800add8:	4688      	mov	r8, r1
 800adda:	f7f5 f9f9 	bl	80001d0 <strlen>
 800adde:	f04f 0a00 	mov.w	sl, #0
 800ade2:	4605      	mov	r5, r0
 800ade4:	f04f 0b00 	mov.w	fp, #0
 800ade8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800adec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adee:	781a      	ldrb	r2, [r3, #0]
 800adf0:	2a2b      	cmp	r2, #43	; 0x2b
 800adf2:	d04c      	beq.n	800ae8e <_strtod_l+0xce>
 800adf4:	d839      	bhi.n	800ae6a <_strtod_l+0xaa>
 800adf6:	2a0d      	cmp	r2, #13
 800adf8:	d832      	bhi.n	800ae60 <_strtod_l+0xa0>
 800adfa:	2a08      	cmp	r2, #8
 800adfc:	d832      	bhi.n	800ae64 <_strtod_l+0xa4>
 800adfe:	2a00      	cmp	r2, #0
 800ae00:	d03c      	beq.n	800ae7c <_strtod_l+0xbc>
 800ae02:	2300      	movs	r3, #0
 800ae04:	930e      	str	r3, [sp, #56]	; 0x38
 800ae06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ae08:	7833      	ldrb	r3, [r6, #0]
 800ae0a:	2b30      	cmp	r3, #48	; 0x30
 800ae0c:	f040 80b4 	bne.w	800af78 <_strtod_l+0x1b8>
 800ae10:	7873      	ldrb	r3, [r6, #1]
 800ae12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae16:	2b58      	cmp	r3, #88	; 0x58
 800ae18:	d16c      	bne.n	800aef4 <_strtod_l+0x134>
 800ae1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	ab1e      	add	r3, sp, #120	; 0x78
 800ae20:	9702      	str	r7, [sp, #8]
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	4a8f      	ldr	r2, [pc, #572]	; (800b064 <_strtod_l+0x2a4>)
 800ae26:	ab1f      	add	r3, sp, #124	; 0x7c
 800ae28:	a91d      	add	r1, sp, #116	; 0x74
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f001 fd60 	bl	800c8f0 <__gethex>
 800ae30:	f010 0707 	ands.w	r7, r0, #7
 800ae34:	4605      	mov	r5, r0
 800ae36:	d005      	beq.n	800ae44 <_strtod_l+0x84>
 800ae38:	2f06      	cmp	r7, #6
 800ae3a:	d12a      	bne.n	800ae92 <_strtod_l+0xd2>
 800ae3c:	3601      	adds	r6, #1
 800ae3e:	2300      	movs	r3, #0
 800ae40:	961d      	str	r6, [sp, #116]	; 0x74
 800ae42:	930e      	str	r3, [sp, #56]	; 0x38
 800ae44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f040 8596 	bne.w	800b978 <_strtod_l+0xbb8>
 800ae4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae4e:	b1db      	cbz	r3, 800ae88 <_strtod_l+0xc8>
 800ae50:	4652      	mov	r2, sl
 800ae52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae56:	ec43 2b10 	vmov	d0, r2, r3
 800ae5a:	b023      	add	sp, #140	; 0x8c
 800ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae60:	2a20      	cmp	r2, #32
 800ae62:	d1ce      	bne.n	800ae02 <_strtod_l+0x42>
 800ae64:	3301      	adds	r3, #1
 800ae66:	931d      	str	r3, [sp, #116]	; 0x74
 800ae68:	e7c0      	b.n	800adec <_strtod_l+0x2c>
 800ae6a:	2a2d      	cmp	r2, #45	; 0x2d
 800ae6c:	d1c9      	bne.n	800ae02 <_strtod_l+0x42>
 800ae6e:	2201      	movs	r2, #1
 800ae70:	920e      	str	r2, [sp, #56]	; 0x38
 800ae72:	1c5a      	adds	r2, r3, #1
 800ae74:	921d      	str	r2, [sp, #116]	; 0x74
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1c4      	bne.n	800ae06 <_strtod_l+0x46>
 800ae7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae7e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f040 8576 	bne.w	800b974 <_strtod_l+0xbb4>
 800ae88:	4652      	mov	r2, sl
 800ae8a:	465b      	mov	r3, fp
 800ae8c:	e7e3      	b.n	800ae56 <_strtod_l+0x96>
 800ae8e:	2200      	movs	r2, #0
 800ae90:	e7ee      	b.n	800ae70 <_strtod_l+0xb0>
 800ae92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae94:	b13a      	cbz	r2, 800aea6 <_strtod_l+0xe6>
 800ae96:	2135      	movs	r1, #53	; 0x35
 800ae98:	a820      	add	r0, sp, #128	; 0x80
 800ae9a:	f002 fd56 	bl	800d94a <__copybits>
 800ae9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aea0:	4620      	mov	r0, r4
 800aea2:	f002 f91b 	bl	800d0dc <_Bfree>
 800aea6:	3f01      	subs	r7, #1
 800aea8:	2f05      	cmp	r7, #5
 800aeaa:	d807      	bhi.n	800aebc <_strtod_l+0xfc>
 800aeac:	e8df f007 	tbb	[pc, r7]
 800aeb0:	1d180b0e 	.word	0x1d180b0e
 800aeb4:	030e      	.short	0x030e
 800aeb6:	f04f 0b00 	mov.w	fp, #0
 800aeba:	46da      	mov	sl, fp
 800aebc:	0728      	lsls	r0, r5, #28
 800aebe:	d5c1      	bpl.n	800ae44 <_strtod_l+0x84>
 800aec0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aec4:	e7be      	b.n	800ae44 <_strtod_l+0x84>
 800aec6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800aeca:	e7f7      	b.n	800aebc <_strtod_l+0xfc>
 800aecc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800aed0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aed2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aed6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aeda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aede:	e7ed      	b.n	800aebc <_strtod_l+0xfc>
 800aee0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b068 <_strtod_l+0x2a8>
 800aee4:	f04f 0a00 	mov.w	sl, #0
 800aee8:	e7e8      	b.n	800aebc <_strtod_l+0xfc>
 800aeea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aeee:	f04f 3aff 	mov.w	sl, #4294967295
 800aef2:	e7e3      	b.n	800aebc <_strtod_l+0xfc>
 800aef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	921d      	str	r2, [sp, #116]	; 0x74
 800aefa:	785b      	ldrb	r3, [r3, #1]
 800aefc:	2b30      	cmp	r3, #48	; 0x30
 800aefe:	d0f9      	beq.n	800aef4 <_strtod_l+0x134>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d09f      	beq.n	800ae44 <_strtod_l+0x84>
 800af04:	2301      	movs	r3, #1
 800af06:	f04f 0900 	mov.w	r9, #0
 800af0a:	9304      	str	r3, [sp, #16]
 800af0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af0e:	930a      	str	r3, [sp, #40]	; 0x28
 800af10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800af14:	464f      	mov	r7, r9
 800af16:	220a      	movs	r2, #10
 800af18:	981d      	ldr	r0, [sp, #116]	; 0x74
 800af1a:	7806      	ldrb	r6, [r0, #0]
 800af1c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800af20:	b2d9      	uxtb	r1, r3
 800af22:	2909      	cmp	r1, #9
 800af24:	d92a      	bls.n	800af7c <_strtod_l+0x1bc>
 800af26:	9907      	ldr	r1, [sp, #28]
 800af28:	462a      	mov	r2, r5
 800af2a:	f003 f831 	bl	800df90 <strncmp>
 800af2e:	b398      	cbz	r0, 800af98 <_strtod_l+0x1d8>
 800af30:	2000      	movs	r0, #0
 800af32:	4633      	mov	r3, r6
 800af34:	463d      	mov	r5, r7
 800af36:	9007      	str	r0, [sp, #28]
 800af38:	4602      	mov	r2, r0
 800af3a:	2b65      	cmp	r3, #101	; 0x65
 800af3c:	d001      	beq.n	800af42 <_strtod_l+0x182>
 800af3e:	2b45      	cmp	r3, #69	; 0x45
 800af40:	d118      	bne.n	800af74 <_strtod_l+0x1b4>
 800af42:	b91d      	cbnz	r5, 800af4c <_strtod_l+0x18c>
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	4303      	orrs	r3, r0
 800af48:	d098      	beq.n	800ae7c <_strtod_l+0xbc>
 800af4a:	2500      	movs	r5, #0
 800af4c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800af50:	f108 0301 	add.w	r3, r8, #1
 800af54:	931d      	str	r3, [sp, #116]	; 0x74
 800af56:	f898 3001 	ldrb.w	r3, [r8, #1]
 800af5a:	2b2b      	cmp	r3, #43	; 0x2b
 800af5c:	d075      	beq.n	800b04a <_strtod_l+0x28a>
 800af5e:	2b2d      	cmp	r3, #45	; 0x2d
 800af60:	d07b      	beq.n	800b05a <_strtod_l+0x29a>
 800af62:	f04f 0c00 	mov.w	ip, #0
 800af66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800af6a:	2909      	cmp	r1, #9
 800af6c:	f240 8082 	bls.w	800b074 <_strtod_l+0x2b4>
 800af70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800af74:	2600      	movs	r6, #0
 800af76:	e09d      	b.n	800b0b4 <_strtod_l+0x2f4>
 800af78:	2300      	movs	r3, #0
 800af7a:	e7c4      	b.n	800af06 <_strtod_l+0x146>
 800af7c:	2f08      	cmp	r7, #8
 800af7e:	bfd8      	it	le
 800af80:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800af82:	f100 0001 	add.w	r0, r0, #1
 800af86:	bfda      	itte	le
 800af88:	fb02 3301 	mlale	r3, r2, r1, r3
 800af8c:	9309      	strle	r3, [sp, #36]	; 0x24
 800af8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800af92:	3701      	adds	r7, #1
 800af94:	901d      	str	r0, [sp, #116]	; 0x74
 800af96:	e7bf      	b.n	800af18 <_strtod_l+0x158>
 800af98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af9a:	195a      	adds	r2, r3, r5
 800af9c:	921d      	str	r2, [sp, #116]	; 0x74
 800af9e:	5d5b      	ldrb	r3, [r3, r5]
 800afa0:	2f00      	cmp	r7, #0
 800afa2:	d037      	beq.n	800b014 <_strtod_l+0x254>
 800afa4:	9007      	str	r0, [sp, #28]
 800afa6:	463d      	mov	r5, r7
 800afa8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800afac:	2a09      	cmp	r2, #9
 800afae:	d912      	bls.n	800afd6 <_strtod_l+0x216>
 800afb0:	2201      	movs	r2, #1
 800afb2:	e7c2      	b.n	800af3a <_strtod_l+0x17a>
 800afb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	921d      	str	r2, [sp, #116]	; 0x74
 800afba:	785b      	ldrb	r3, [r3, #1]
 800afbc:	3001      	adds	r0, #1
 800afbe:	2b30      	cmp	r3, #48	; 0x30
 800afc0:	d0f8      	beq.n	800afb4 <_strtod_l+0x1f4>
 800afc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800afc6:	2a08      	cmp	r2, #8
 800afc8:	f200 84db 	bhi.w	800b982 <_strtod_l+0xbc2>
 800afcc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afce:	9007      	str	r0, [sp, #28]
 800afd0:	2000      	movs	r0, #0
 800afd2:	920a      	str	r2, [sp, #40]	; 0x28
 800afd4:	4605      	mov	r5, r0
 800afd6:	3b30      	subs	r3, #48	; 0x30
 800afd8:	f100 0201 	add.w	r2, r0, #1
 800afdc:	d014      	beq.n	800b008 <_strtod_l+0x248>
 800afde:	9907      	ldr	r1, [sp, #28]
 800afe0:	4411      	add	r1, r2
 800afe2:	9107      	str	r1, [sp, #28]
 800afe4:	462a      	mov	r2, r5
 800afe6:	eb00 0e05 	add.w	lr, r0, r5
 800afea:	210a      	movs	r1, #10
 800afec:	4572      	cmp	r2, lr
 800afee:	d113      	bne.n	800b018 <_strtod_l+0x258>
 800aff0:	182a      	adds	r2, r5, r0
 800aff2:	2a08      	cmp	r2, #8
 800aff4:	f105 0501 	add.w	r5, r5, #1
 800aff8:	4405      	add	r5, r0
 800affa:	dc1c      	bgt.n	800b036 <_strtod_l+0x276>
 800affc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800affe:	220a      	movs	r2, #10
 800b000:	fb02 3301 	mla	r3, r2, r1, r3
 800b004:	9309      	str	r3, [sp, #36]	; 0x24
 800b006:	2200      	movs	r2, #0
 800b008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b00a:	1c59      	adds	r1, r3, #1
 800b00c:	911d      	str	r1, [sp, #116]	; 0x74
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	4610      	mov	r0, r2
 800b012:	e7c9      	b.n	800afa8 <_strtod_l+0x1e8>
 800b014:	4638      	mov	r0, r7
 800b016:	e7d2      	b.n	800afbe <_strtod_l+0x1fe>
 800b018:	2a08      	cmp	r2, #8
 800b01a:	dc04      	bgt.n	800b026 <_strtod_l+0x266>
 800b01c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b01e:	434e      	muls	r6, r1
 800b020:	9609      	str	r6, [sp, #36]	; 0x24
 800b022:	3201      	adds	r2, #1
 800b024:	e7e2      	b.n	800afec <_strtod_l+0x22c>
 800b026:	f102 0c01 	add.w	ip, r2, #1
 800b02a:	f1bc 0f10 	cmp.w	ip, #16
 800b02e:	bfd8      	it	le
 800b030:	fb01 f909 	mulle.w	r9, r1, r9
 800b034:	e7f5      	b.n	800b022 <_strtod_l+0x262>
 800b036:	2d10      	cmp	r5, #16
 800b038:	bfdc      	itt	le
 800b03a:	220a      	movle	r2, #10
 800b03c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b040:	e7e1      	b.n	800b006 <_strtod_l+0x246>
 800b042:	2300      	movs	r3, #0
 800b044:	9307      	str	r3, [sp, #28]
 800b046:	2201      	movs	r2, #1
 800b048:	e77c      	b.n	800af44 <_strtod_l+0x184>
 800b04a:	f04f 0c00 	mov.w	ip, #0
 800b04e:	f108 0302 	add.w	r3, r8, #2
 800b052:	931d      	str	r3, [sp, #116]	; 0x74
 800b054:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b058:	e785      	b.n	800af66 <_strtod_l+0x1a6>
 800b05a:	f04f 0c01 	mov.w	ip, #1
 800b05e:	e7f6      	b.n	800b04e <_strtod_l+0x28e>
 800b060:	0800e7d0 	.word	0x0800e7d0
 800b064:	0800e57c 	.word	0x0800e57c
 800b068:	7ff00000 	.word	0x7ff00000
 800b06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b06e:	1c59      	adds	r1, r3, #1
 800b070:	911d      	str	r1, [sp, #116]	; 0x74
 800b072:	785b      	ldrb	r3, [r3, #1]
 800b074:	2b30      	cmp	r3, #48	; 0x30
 800b076:	d0f9      	beq.n	800b06c <_strtod_l+0x2ac>
 800b078:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b07c:	2908      	cmp	r1, #8
 800b07e:	f63f af79 	bhi.w	800af74 <_strtod_l+0x1b4>
 800b082:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b088:	9308      	str	r3, [sp, #32]
 800b08a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b08c:	1c59      	adds	r1, r3, #1
 800b08e:	911d      	str	r1, [sp, #116]	; 0x74
 800b090:	785b      	ldrb	r3, [r3, #1]
 800b092:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b096:	2e09      	cmp	r6, #9
 800b098:	d937      	bls.n	800b10a <_strtod_l+0x34a>
 800b09a:	9e08      	ldr	r6, [sp, #32]
 800b09c:	1b89      	subs	r1, r1, r6
 800b09e:	2908      	cmp	r1, #8
 800b0a0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b0a4:	dc02      	bgt.n	800b0ac <_strtod_l+0x2ec>
 800b0a6:	4576      	cmp	r6, lr
 800b0a8:	bfa8      	it	ge
 800b0aa:	4676      	movge	r6, lr
 800b0ac:	f1bc 0f00 	cmp.w	ip, #0
 800b0b0:	d000      	beq.n	800b0b4 <_strtod_l+0x2f4>
 800b0b2:	4276      	negs	r6, r6
 800b0b4:	2d00      	cmp	r5, #0
 800b0b6:	d14f      	bne.n	800b158 <_strtod_l+0x398>
 800b0b8:	9904      	ldr	r1, [sp, #16]
 800b0ba:	4301      	orrs	r1, r0
 800b0bc:	f47f aec2 	bne.w	800ae44 <_strtod_l+0x84>
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	f47f aedb 	bne.w	800ae7c <_strtod_l+0xbc>
 800b0c6:	2b69      	cmp	r3, #105	; 0x69
 800b0c8:	d027      	beq.n	800b11a <_strtod_l+0x35a>
 800b0ca:	dc24      	bgt.n	800b116 <_strtod_l+0x356>
 800b0cc:	2b49      	cmp	r3, #73	; 0x49
 800b0ce:	d024      	beq.n	800b11a <_strtod_l+0x35a>
 800b0d0:	2b4e      	cmp	r3, #78	; 0x4e
 800b0d2:	f47f aed3 	bne.w	800ae7c <_strtod_l+0xbc>
 800b0d6:	499e      	ldr	r1, [pc, #632]	; (800b350 <_strtod_l+0x590>)
 800b0d8:	a81d      	add	r0, sp, #116	; 0x74
 800b0da:	f001 fe61 	bl	800cda0 <__match>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f43f aecc 	beq.w	800ae7c <_strtod_l+0xbc>
 800b0e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b28      	cmp	r3, #40	; 0x28
 800b0ea:	d12d      	bne.n	800b148 <_strtod_l+0x388>
 800b0ec:	4999      	ldr	r1, [pc, #612]	; (800b354 <_strtod_l+0x594>)
 800b0ee:	aa20      	add	r2, sp, #128	; 0x80
 800b0f0:	a81d      	add	r0, sp, #116	; 0x74
 800b0f2:	f001 fe69 	bl	800cdc8 <__hexnan>
 800b0f6:	2805      	cmp	r0, #5
 800b0f8:	d126      	bne.n	800b148 <_strtod_l+0x388>
 800b0fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0fc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b100:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b104:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b108:	e69c      	b.n	800ae44 <_strtod_l+0x84>
 800b10a:	210a      	movs	r1, #10
 800b10c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b110:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b114:	e7b9      	b.n	800b08a <_strtod_l+0x2ca>
 800b116:	2b6e      	cmp	r3, #110	; 0x6e
 800b118:	e7db      	b.n	800b0d2 <_strtod_l+0x312>
 800b11a:	498f      	ldr	r1, [pc, #572]	; (800b358 <_strtod_l+0x598>)
 800b11c:	a81d      	add	r0, sp, #116	; 0x74
 800b11e:	f001 fe3f 	bl	800cda0 <__match>
 800b122:	2800      	cmp	r0, #0
 800b124:	f43f aeaa 	beq.w	800ae7c <_strtod_l+0xbc>
 800b128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b12a:	498c      	ldr	r1, [pc, #560]	; (800b35c <_strtod_l+0x59c>)
 800b12c:	3b01      	subs	r3, #1
 800b12e:	a81d      	add	r0, sp, #116	; 0x74
 800b130:	931d      	str	r3, [sp, #116]	; 0x74
 800b132:	f001 fe35 	bl	800cda0 <__match>
 800b136:	b910      	cbnz	r0, 800b13e <_strtod_l+0x37e>
 800b138:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b13a:	3301      	adds	r3, #1
 800b13c:	931d      	str	r3, [sp, #116]	; 0x74
 800b13e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b36c <_strtod_l+0x5ac>
 800b142:	f04f 0a00 	mov.w	sl, #0
 800b146:	e67d      	b.n	800ae44 <_strtod_l+0x84>
 800b148:	4885      	ldr	r0, [pc, #532]	; (800b360 <_strtod_l+0x5a0>)
 800b14a:	f002 ff19 	bl	800df80 <nan>
 800b14e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b152:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b156:	e675      	b.n	800ae44 <_strtod_l+0x84>
 800b158:	9b07      	ldr	r3, [sp, #28]
 800b15a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b15c:	1af3      	subs	r3, r6, r3
 800b15e:	2f00      	cmp	r7, #0
 800b160:	bf08      	it	eq
 800b162:	462f      	moveq	r7, r5
 800b164:	2d10      	cmp	r5, #16
 800b166:	9308      	str	r3, [sp, #32]
 800b168:	46a8      	mov	r8, r5
 800b16a:	bfa8      	it	ge
 800b16c:	f04f 0810 	movge.w	r8, #16
 800b170:	f7f5 f9c8 	bl	8000504 <__aeabi_ui2d>
 800b174:	2d09      	cmp	r5, #9
 800b176:	4682      	mov	sl, r0
 800b178:	468b      	mov	fp, r1
 800b17a:	dd13      	ble.n	800b1a4 <_strtod_l+0x3e4>
 800b17c:	4b79      	ldr	r3, [pc, #484]	; (800b364 <_strtod_l+0x5a4>)
 800b17e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b182:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b186:	f7f5 fa37 	bl	80005f8 <__aeabi_dmul>
 800b18a:	4682      	mov	sl, r0
 800b18c:	4648      	mov	r0, r9
 800b18e:	468b      	mov	fp, r1
 800b190:	f7f5 f9b8 	bl	8000504 <__aeabi_ui2d>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4650      	mov	r0, sl
 800b19a:	4659      	mov	r1, fp
 800b19c:	f7f5 f876 	bl	800028c <__adddf3>
 800b1a0:	4682      	mov	sl, r0
 800b1a2:	468b      	mov	fp, r1
 800b1a4:	2d0f      	cmp	r5, #15
 800b1a6:	dc38      	bgt.n	800b21a <_strtod_l+0x45a>
 800b1a8:	9b08      	ldr	r3, [sp, #32]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f43f ae4a 	beq.w	800ae44 <_strtod_l+0x84>
 800b1b0:	dd24      	ble.n	800b1fc <_strtod_l+0x43c>
 800b1b2:	2b16      	cmp	r3, #22
 800b1b4:	dc0b      	bgt.n	800b1ce <_strtod_l+0x40e>
 800b1b6:	4d6b      	ldr	r5, [pc, #428]	; (800b364 <_strtod_l+0x5a4>)
 800b1b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b1bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b1c0:	4652      	mov	r2, sl
 800b1c2:	465b      	mov	r3, fp
 800b1c4:	f7f5 fa18 	bl	80005f8 <__aeabi_dmul>
 800b1c8:	4682      	mov	sl, r0
 800b1ca:	468b      	mov	fp, r1
 800b1cc:	e63a      	b.n	800ae44 <_strtod_l+0x84>
 800b1ce:	9a08      	ldr	r2, [sp, #32]
 800b1d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	db20      	blt.n	800b21a <_strtod_l+0x45a>
 800b1d8:	4c62      	ldr	r4, [pc, #392]	; (800b364 <_strtod_l+0x5a4>)
 800b1da:	f1c5 050f 	rsb	r5, r5, #15
 800b1de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	465b      	mov	r3, fp
 800b1e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ea:	f7f5 fa05 	bl	80005f8 <__aeabi_dmul>
 800b1ee:	9b08      	ldr	r3, [sp, #32]
 800b1f0:	1b5d      	subs	r5, r3, r5
 800b1f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b1f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1fa:	e7e3      	b.n	800b1c4 <_strtod_l+0x404>
 800b1fc:	9b08      	ldr	r3, [sp, #32]
 800b1fe:	3316      	adds	r3, #22
 800b200:	db0b      	blt.n	800b21a <_strtod_l+0x45a>
 800b202:	9b07      	ldr	r3, [sp, #28]
 800b204:	4a57      	ldr	r2, [pc, #348]	; (800b364 <_strtod_l+0x5a4>)
 800b206:	1b9e      	subs	r6, r3, r6
 800b208:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b20c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b210:	4650      	mov	r0, sl
 800b212:	4659      	mov	r1, fp
 800b214:	f7f5 fb1a 	bl	800084c <__aeabi_ddiv>
 800b218:	e7d6      	b.n	800b1c8 <_strtod_l+0x408>
 800b21a:	9b08      	ldr	r3, [sp, #32]
 800b21c:	eba5 0808 	sub.w	r8, r5, r8
 800b220:	4498      	add	r8, r3
 800b222:	f1b8 0f00 	cmp.w	r8, #0
 800b226:	dd71      	ble.n	800b30c <_strtod_l+0x54c>
 800b228:	f018 030f 	ands.w	r3, r8, #15
 800b22c:	d00a      	beq.n	800b244 <_strtod_l+0x484>
 800b22e:	494d      	ldr	r1, [pc, #308]	; (800b364 <_strtod_l+0x5a4>)
 800b230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b234:	4652      	mov	r2, sl
 800b236:	465b      	mov	r3, fp
 800b238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b23c:	f7f5 f9dc 	bl	80005f8 <__aeabi_dmul>
 800b240:	4682      	mov	sl, r0
 800b242:	468b      	mov	fp, r1
 800b244:	f038 080f 	bics.w	r8, r8, #15
 800b248:	d04d      	beq.n	800b2e6 <_strtod_l+0x526>
 800b24a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b24e:	dd22      	ble.n	800b296 <_strtod_l+0x4d6>
 800b250:	2500      	movs	r5, #0
 800b252:	462e      	mov	r6, r5
 800b254:	9509      	str	r5, [sp, #36]	; 0x24
 800b256:	9507      	str	r5, [sp, #28]
 800b258:	2322      	movs	r3, #34	; 0x22
 800b25a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b36c <_strtod_l+0x5ac>
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	f04f 0a00 	mov.w	sl, #0
 800b264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b266:	2b00      	cmp	r3, #0
 800b268:	f43f adec 	beq.w	800ae44 <_strtod_l+0x84>
 800b26c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b26e:	4620      	mov	r0, r4
 800b270:	f001 ff34 	bl	800d0dc <_Bfree>
 800b274:	9907      	ldr	r1, [sp, #28]
 800b276:	4620      	mov	r0, r4
 800b278:	f001 ff30 	bl	800d0dc <_Bfree>
 800b27c:	4631      	mov	r1, r6
 800b27e:	4620      	mov	r0, r4
 800b280:	f001 ff2c 	bl	800d0dc <_Bfree>
 800b284:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b286:	4620      	mov	r0, r4
 800b288:	f001 ff28 	bl	800d0dc <_Bfree>
 800b28c:	4629      	mov	r1, r5
 800b28e:	4620      	mov	r0, r4
 800b290:	f001 ff24 	bl	800d0dc <_Bfree>
 800b294:	e5d6      	b.n	800ae44 <_strtod_l+0x84>
 800b296:	2300      	movs	r3, #0
 800b298:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b29c:	4650      	mov	r0, sl
 800b29e:	4659      	mov	r1, fp
 800b2a0:	4699      	mov	r9, r3
 800b2a2:	f1b8 0f01 	cmp.w	r8, #1
 800b2a6:	dc21      	bgt.n	800b2ec <_strtod_l+0x52c>
 800b2a8:	b10b      	cbz	r3, 800b2ae <_strtod_l+0x4ee>
 800b2aa:	4682      	mov	sl, r0
 800b2ac:	468b      	mov	fp, r1
 800b2ae:	4b2e      	ldr	r3, [pc, #184]	; (800b368 <_strtod_l+0x5a8>)
 800b2b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b2b4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	465b      	mov	r3, fp
 800b2bc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b2c0:	f7f5 f99a 	bl	80005f8 <__aeabi_dmul>
 800b2c4:	4b29      	ldr	r3, [pc, #164]	; (800b36c <_strtod_l+0x5ac>)
 800b2c6:	460a      	mov	r2, r1
 800b2c8:	400b      	ands	r3, r1
 800b2ca:	4929      	ldr	r1, [pc, #164]	; (800b370 <_strtod_l+0x5b0>)
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	4682      	mov	sl, r0
 800b2d0:	d8be      	bhi.n	800b250 <_strtod_l+0x490>
 800b2d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b2d6:	428b      	cmp	r3, r1
 800b2d8:	bf86      	itte	hi
 800b2da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b374 <_strtod_l+0x5b4>
 800b2de:	f04f 3aff 	movhi.w	sl, #4294967295
 800b2e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	e081      	b.n	800b3f0 <_strtod_l+0x630>
 800b2ec:	f018 0f01 	tst.w	r8, #1
 800b2f0:	d007      	beq.n	800b302 <_strtod_l+0x542>
 800b2f2:	4b1d      	ldr	r3, [pc, #116]	; (800b368 <_strtod_l+0x5a8>)
 800b2f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	f7f5 f97c 	bl	80005f8 <__aeabi_dmul>
 800b300:	2301      	movs	r3, #1
 800b302:	f109 0901 	add.w	r9, r9, #1
 800b306:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b30a:	e7ca      	b.n	800b2a2 <_strtod_l+0x4e2>
 800b30c:	d0eb      	beq.n	800b2e6 <_strtod_l+0x526>
 800b30e:	f1c8 0800 	rsb	r8, r8, #0
 800b312:	f018 020f 	ands.w	r2, r8, #15
 800b316:	d00a      	beq.n	800b32e <_strtod_l+0x56e>
 800b318:	4b12      	ldr	r3, [pc, #72]	; (800b364 <_strtod_l+0x5a4>)
 800b31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b31e:	4650      	mov	r0, sl
 800b320:	4659      	mov	r1, fp
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	f7f5 fa91 	bl	800084c <__aeabi_ddiv>
 800b32a:	4682      	mov	sl, r0
 800b32c:	468b      	mov	fp, r1
 800b32e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b332:	d0d8      	beq.n	800b2e6 <_strtod_l+0x526>
 800b334:	f1b8 0f1f 	cmp.w	r8, #31
 800b338:	dd1e      	ble.n	800b378 <_strtod_l+0x5b8>
 800b33a:	2500      	movs	r5, #0
 800b33c:	462e      	mov	r6, r5
 800b33e:	9509      	str	r5, [sp, #36]	; 0x24
 800b340:	9507      	str	r5, [sp, #28]
 800b342:	2322      	movs	r3, #34	; 0x22
 800b344:	f04f 0a00 	mov.w	sl, #0
 800b348:	f04f 0b00 	mov.w	fp, #0
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	e789      	b.n	800b264 <_strtod_l+0x4a4>
 800b350:	0800e54d 	.word	0x0800e54d
 800b354:	0800e590 	.word	0x0800e590
 800b358:	0800e545 	.word	0x0800e545
 800b35c:	0800e6d4 	.word	0x0800e6d4
 800b360:	0800e990 	.word	0x0800e990
 800b364:	0800e870 	.word	0x0800e870
 800b368:	0800e848 	.word	0x0800e848
 800b36c:	7ff00000 	.word	0x7ff00000
 800b370:	7ca00000 	.word	0x7ca00000
 800b374:	7fefffff 	.word	0x7fefffff
 800b378:	f018 0310 	ands.w	r3, r8, #16
 800b37c:	bf18      	it	ne
 800b37e:	236a      	movne	r3, #106	; 0x6a
 800b380:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b738 <_strtod_l+0x978>
 800b384:	9304      	str	r3, [sp, #16]
 800b386:	4650      	mov	r0, sl
 800b388:	4659      	mov	r1, fp
 800b38a:	2300      	movs	r3, #0
 800b38c:	f018 0f01 	tst.w	r8, #1
 800b390:	d004      	beq.n	800b39c <_strtod_l+0x5dc>
 800b392:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b396:	f7f5 f92f 	bl	80005f8 <__aeabi_dmul>
 800b39a:	2301      	movs	r3, #1
 800b39c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b3a0:	f109 0908 	add.w	r9, r9, #8
 800b3a4:	d1f2      	bne.n	800b38c <_strtod_l+0x5cc>
 800b3a6:	b10b      	cbz	r3, 800b3ac <_strtod_l+0x5ec>
 800b3a8:	4682      	mov	sl, r0
 800b3aa:	468b      	mov	fp, r1
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	b1bb      	cbz	r3, 800b3e0 <_strtod_l+0x620>
 800b3b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b3b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	4659      	mov	r1, fp
 800b3bc:	dd10      	ble.n	800b3e0 <_strtod_l+0x620>
 800b3be:	2b1f      	cmp	r3, #31
 800b3c0:	f340 8128 	ble.w	800b614 <_strtod_l+0x854>
 800b3c4:	2b34      	cmp	r3, #52	; 0x34
 800b3c6:	bfde      	ittt	le
 800b3c8:	3b20      	suble	r3, #32
 800b3ca:	f04f 32ff 	movle.w	r2, #4294967295
 800b3ce:	fa02 f303 	lslle.w	r3, r2, r3
 800b3d2:	f04f 0a00 	mov.w	sl, #0
 800b3d6:	bfcc      	ite	gt
 800b3d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b3dc:	ea03 0b01 	andle.w	fp, r3, r1
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	4659      	mov	r1, fp
 800b3e8:	f7f5 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d1a4      	bne.n	800b33a <_strtod_l+0x57a>
 800b3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3f6:	462b      	mov	r3, r5
 800b3f8:	463a      	mov	r2, r7
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f001 feda 	bl	800d1b4 <__s2b>
 800b400:	9009      	str	r0, [sp, #36]	; 0x24
 800b402:	2800      	cmp	r0, #0
 800b404:	f43f af24 	beq.w	800b250 <_strtod_l+0x490>
 800b408:	9b07      	ldr	r3, [sp, #28]
 800b40a:	1b9e      	subs	r6, r3, r6
 800b40c:	9b08      	ldr	r3, [sp, #32]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bfb4      	ite	lt
 800b412:	4633      	movlt	r3, r6
 800b414:	2300      	movge	r3, #0
 800b416:	9310      	str	r3, [sp, #64]	; 0x40
 800b418:	9b08      	ldr	r3, [sp, #32]
 800b41a:	2500      	movs	r5, #0
 800b41c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b420:	9318      	str	r3, [sp, #96]	; 0x60
 800b422:	462e      	mov	r6, r5
 800b424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b426:	4620      	mov	r0, r4
 800b428:	6859      	ldr	r1, [r3, #4]
 800b42a:	f001 fe17 	bl	800d05c <_Balloc>
 800b42e:	9007      	str	r0, [sp, #28]
 800b430:	2800      	cmp	r0, #0
 800b432:	f43f af11 	beq.w	800b258 <_strtod_l+0x498>
 800b436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b438:	691a      	ldr	r2, [r3, #16]
 800b43a:	3202      	adds	r2, #2
 800b43c:	f103 010c 	add.w	r1, r3, #12
 800b440:	0092      	lsls	r2, r2, #2
 800b442:	300c      	adds	r0, #12
 800b444:	f001 fdf0 	bl	800d028 <memcpy>
 800b448:	ec4b ab10 	vmov	d0, sl, fp
 800b44c:	aa20      	add	r2, sp, #128	; 0x80
 800b44e:	a91f      	add	r1, sp, #124	; 0x7c
 800b450:	4620      	mov	r0, r4
 800b452:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b456:	f002 f9e9 	bl	800d82c <__d2b>
 800b45a:	901e      	str	r0, [sp, #120]	; 0x78
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f43f aefb 	beq.w	800b258 <_strtod_l+0x498>
 800b462:	2101      	movs	r1, #1
 800b464:	4620      	mov	r0, r4
 800b466:	f001 ff3f 	bl	800d2e8 <__i2b>
 800b46a:	4606      	mov	r6, r0
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f43f aef3 	beq.w	800b258 <_strtod_l+0x498>
 800b472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b474:	9904      	ldr	r1, [sp, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfab      	itete	ge
 800b47a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b47c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b47e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b480:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b484:	bfac      	ite	ge
 800b486:	eb03 0902 	addge.w	r9, r3, r2
 800b48a:	1ad7      	sublt	r7, r2, r3
 800b48c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b48e:	eba3 0801 	sub.w	r8, r3, r1
 800b492:	4490      	add	r8, r2
 800b494:	4ba3      	ldr	r3, [pc, #652]	; (800b724 <_strtod_l+0x964>)
 800b496:	f108 38ff 	add.w	r8, r8, #4294967295
 800b49a:	4598      	cmp	r8, r3
 800b49c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b4a0:	f280 80cc 	bge.w	800b63c <_strtod_l+0x87c>
 800b4a4:	eba3 0308 	sub.w	r3, r3, r8
 800b4a8:	2b1f      	cmp	r3, #31
 800b4aa:	eba2 0203 	sub.w	r2, r2, r3
 800b4ae:	f04f 0101 	mov.w	r1, #1
 800b4b2:	f300 80b6 	bgt.w	800b622 <_strtod_l+0x862>
 800b4b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ba:	9311      	str	r3, [sp, #68]	; 0x44
 800b4bc:	2300      	movs	r3, #0
 800b4be:	930c      	str	r3, [sp, #48]	; 0x30
 800b4c0:	eb09 0802 	add.w	r8, r9, r2
 800b4c4:	9b04      	ldr	r3, [sp, #16]
 800b4c6:	45c1      	cmp	r9, r8
 800b4c8:	4417      	add	r7, r2
 800b4ca:	441f      	add	r7, r3
 800b4cc:	464b      	mov	r3, r9
 800b4ce:	bfa8      	it	ge
 800b4d0:	4643      	movge	r3, r8
 800b4d2:	42bb      	cmp	r3, r7
 800b4d4:	bfa8      	it	ge
 800b4d6:	463b      	movge	r3, r7
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	bfc2      	ittt	gt
 800b4dc:	eba8 0803 	subgt.w	r8, r8, r3
 800b4e0:	1aff      	subgt	r7, r7, r3
 800b4e2:	eba9 0903 	subgt.w	r9, r9, r3
 800b4e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dd17      	ble.n	800b51c <_strtod_l+0x75c>
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f001 ffb5 	bl	800d460 <__pow5mult>
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	f43f aead 	beq.w	800b258 <_strtod_l+0x498>
 800b4fe:	4601      	mov	r1, r0
 800b500:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b502:	4620      	mov	r0, r4
 800b504:	f001 ff06 	bl	800d314 <__multiply>
 800b508:	900f      	str	r0, [sp, #60]	; 0x3c
 800b50a:	2800      	cmp	r0, #0
 800b50c:	f43f aea4 	beq.w	800b258 <_strtod_l+0x498>
 800b510:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b512:	4620      	mov	r0, r4
 800b514:	f001 fde2 	bl	800d0dc <_Bfree>
 800b518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b51a:	931e      	str	r3, [sp, #120]	; 0x78
 800b51c:	f1b8 0f00 	cmp.w	r8, #0
 800b520:	f300 8091 	bgt.w	800b646 <_strtod_l+0x886>
 800b524:	9b08      	ldr	r3, [sp, #32]
 800b526:	2b00      	cmp	r3, #0
 800b528:	dd08      	ble.n	800b53c <_strtod_l+0x77c>
 800b52a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b52c:	9907      	ldr	r1, [sp, #28]
 800b52e:	4620      	mov	r0, r4
 800b530:	f001 ff96 	bl	800d460 <__pow5mult>
 800b534:	9007      	str	r0, [sp, #28]
 800b536:	2800      	cmp	r0, #0
 800b538:	f43f ae8e 	beq.w	800b258 <_strtod_l+0x498>
 800b53c:	2f00      	cmp	r7, #0
 800b53e:	dd08      	ble.n	800b552 <_strtod_l+0x792>
 800b540:	9907      	ldr	r1, [sp, #28]
 800b542:	463a      	mov	r2, r7
 800b544:	4620      	mov	r0, r4
 800b546:	f001 ffe5 	bl	800d514 <__lshift>
 800b54a:	9007      	str	r0, [sp, #28]
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f43f ae83 	beq.w	800b258 <_strtod_l+0x498>
 800b552:	f1b9 0f00 	cmp.w	r9, #0
 800b556:	dd08      	ble.n	800b56a <_strtod_l+0x7aa>
 800b558:	4631      	mov	r1, r6
 800b55a:	464a      	mov	r2, r9
 800b55c:	4620      	mov	r0, r4
 800b55e:	f001 ffd9 	bl	800d514 <__lshift>
 800b562:	4606      	mov	r6, r0
 800b564:	2800      	cmp	r0, #0
 800b566:	f43f ae77 	beq.w	800b258 <_strtod_l+0x498>
 800b56a:	9a07      	ldr	r2, [sp, #28]
 800b56c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b56e:	4620      	mov	r0, r4
 800b570:	f002 f858 	bl	800d624 <__mdiff>
 800b574:	4605      	mov	r5, r0
 800b576:	2800      	cmp	r0, #0
 800b578:	f43f ae6e 	beq.w	800b258 <_strtod_l+0x498>
 800b57c:	68c3      	ldr	r3, [r0, #12]
 800b57e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b580:	2300      	movs	r3, #0
 800b582:	60c3      	str	r3, [r0, #12]
 800b584:	4631      	mov	r1, r6
 800b586:	f002 f831 	bl	800d5ec <__mcmp>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	da65      	bge.n	800b65a <_strtod_l+0x89a>
 800b58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b590:	ea53 030a 	orrs.w	r3, r3, sl
 800b594:	f040 8087 	bne.w	800b6a6 <_strtod_l+0x8e6>
 800b598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 8082 	bne.w	800b6a6 <_strtod_l+0x8e6>
 800b5a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5a6:	0d1b      	lsrs	r3, r3, #20
 800b5a8:	051b      	lsls	r3, r3, #20
 800b5aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b5ae:	d97a      	bls.n	800b6a6 <_strtod_l+0x8e6>
 800b5b0:	696b      	ldr	r3, [r5, #20]
 800b5b2:	b913      	cbnz	r3, 800b5ba <_strtod_l+0x7fa>
 800b5b4:	692b      	ldr	r3, [r5, #16]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	dd75      	ble.n	800b6a6 <_strtod_l+0x8e6>
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	2201      	movs	r2, #1
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f001 ffa8 	bl	800d514 <__lshift>
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	f002 f810 	bl	800d5ec <__mcmp>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	dd6a      	ble.n	800b6a6 <_strtod_l+0x8e6>
 800b5d0:	9904      	ldr	r1, [sp, #16]
 800b5d2:	4a55      	ldr	r2, [pc, #340]	; (800b728 <_strtod_l+0x968>)
 800b5d4:	465b      	mov	r3, fp
 800b5d6:	2900      	cmp	r1, #0
 800b5d8:	f000 8085 	beq.w	800b6e6 <_strtod_l+0x926>
 800b5dc:	ea02 010b 	and.w	r1, r2, fp
 800b5e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b5e4:	dc7f      	bgt.n	800b6e6 <_strtod_l+0x926>
 800b5e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b5ea:	f77f aeaa 	ble.w	800b342 <_strtod_l+0x582>
 800b5ee:	4a4f      	ldr	r2, [pc, #316]	; (800b72c <_strtod_l+0x96c>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b5f6:	4650      	mov	r0, sl
 800b5f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b5fc:	4659      	mov	r1, fp
 800b5fe:	f7f4 fffb 	bl	80005f8 <__aeabi_dmul>
 800b602:	460b      	mov	r3, r1
 800b604:	4303      	orrs	r3, r0
 800b606:	bf08      	it	eq
 800b608:	2322      	moveq	r3, #34	; 0x22
 800b60a:	4682      	mov	sl, r0
 800b60c:	468b      	mov	fp, r1
 800b60e:	bf08      	it	eq
 800b610:	6023      	streq	r3, [r4, #0]
 800b612:	e62b      	b.n	800b26c <_strtod_l+0x4ac>
 800b614:	f04f 32ff 	mov.w	r2, #4294967295
 800b618:	fa02 f303 	lsl.w	r3, r2, r3
 800b61c:	ea03 0a0a 	and.w	sl, r3, sl
 800b620:	e6de      	b.n	800b3e0 <_strtod_l+0x620>
 800b622:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b626:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b62a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b62e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b632:	fa01 f308 	lsl.w	r3, r1, r8
 800b636:	930c      	str	r3, [sp, #48]	; 0x30
 800b638:	9111      	str	r1, [sp, #68]	; 0x44
 800b63a:	e741      	b.n	800b4c0 <_strtod_l+0x700>
 800b63c:	2300      	movs	r3, #0
 800b63e:	930c      	str	r3, [sp, #48]	; 0x30
 800b640:	2301      	movs	r3, #1
 800b642:	9311      	str	r3, [sp, #68]	; 0x44
 800b644:	e73c      	b.n	800b4c0 <_strtod_l+0x700>
 800b646:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b648:	4642      	mov	r2, r8
 800b64a:	4620      	mov	r0, r4
 800b64c:	f001 ff62 	bl	800d514 <__lshift>
 800b650:	901e      	str	r0, [sp, #120]	; 0x78
 800b652:	2800      	cmp	r0, #0
 800b654:	f47f af66 	bne.w	800b524 <_strtod_l+0x764>
 800b658:	e5fe      	b.n	800b258 <_strtod_l+0x498>
 800b65a:	465f      	mov	r7, fp
 800b65c:	d16e      	bne.n	800b73c <_strtod_l+0x97c>
 800b65e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b660:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b664:	b342      	cbz	r2, 800b6b8 <_strtod_l+0x8f8>
 800b666:	4a32      	ldr	r2, [pc, #200]	; (800b730 <_strtod_l+0x970>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d128      	bne.n	800b6be <_strtod_l+0x8fe>
 800b66c:	9b04      	ldr	r3, [sp, #16]
 800b66e:	4650      	mov	r0, sl
 800b670:	b1eb      	cbz	r3, 800b6ae <_strtod_l+0x8ee>
 800b672:	4a2d      	ldr	r2, [pc, #180]	; (800b728 <_strtod_l+0x968>)
 800b674:	403a      	ands	r2, r7
 800b676:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b67a:	f04f 31ff 	mov.w	r1, #4294967295
 800b67e:	d819      	bhi.n	800b6b4 <_strtod_l+0x8f4>
 800b680:	0d12      	lsrs	r2, r2, #20
 800b682:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b686:	fa01 f303 	lsl.w	r3, r1, r3
 800b68a:	4298      	cmp	r0, r3
 800b68c:	d117      	bne.n	800b6be <_strtod_l+0x8fe>
 800b68e:	4b29      	ldr	r3, [pc, #164]	; (800b734 <_strtod_l+0x974>)
 800b690:	429f      	cmp	r7, r3
 800b692:	d102      	bne.n	800b69a <_strtod_l+0x8da>
 800b694:	3001      	adds	r0, #1
 800b696:	f43f addf 	beq.w	800b258 <_strtod_l+0x498>
 800b69a:	4b23      	ldr	r3, [pc, #140]	; (800b728 <_strtod_l+0x968>)
 800b69c:	403b      	ands	r3, r7
 800b69e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b6a2:	f04f 0a00 	mov.w	sl, #0
 800b6a6:	9b04      	ldr	r3, [sp, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1a0      	bne.n	800b5ee <_strtod_l+0x82e>
 800b6ac:	e5de      	b.n	800b26c <_strtod_l+0x4ac>
 800b6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b2:	e7ea      	b.n	800b68a <_strtod_l+0x8ca>
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	e7e8      	b.n	800b68a <_strtod_l+0x8ca>
 800b6b8:	ea53 030a 	orrs.w	r3, r3, sl
 800b6bc:	d088      	beq.n	800b5d0 <_strtod_l+0x810>
 800b6be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6c0:	b1db      	cbz	r3, 800b6fa <_strtod_l+0x93a>
 800b6c2:	423b      	tst	r3, r7
 800b6c4:	d0ef      	beq.n	800b6a6 <_strtod_l+0x8e6>
 800b6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c8:	9a04      	ldr	r2, [sp, #16]
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	4659      	mov	r1, fp
 800b6ce:	b1c3      	cbz	r3, 800b702 <_strtod_l+0x942>
 800b6d0:	f7ff fb57 	bl	800ad82 <sulp>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6dc:	f7f4 fdd6 	bl	800028c <__adddf3>
 800b6e0:	4682      	mov	sl, r0
 800b6e2:	468b      	mov	fp, r1
 800b6e4:	e7df      	b.n	800b6a6 <_strtod_l+0x8e6>
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b6ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b6f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b6f4:	f04f 3aff 	mov.w	sl, #4294967295
 800b6f8:	e7d5      	b.n	800b6a6 <_strtod_l+0x8e6>
 800b6fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6fc:	ea13 0f0a 	tst.w	r3, sl
 800b700:	e7e0      	b.n	800b6c4 <_strtod_l+0x904>
 800b702:	f7ff fb3e 	bl	800ad82 <sulp>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b70e:	f7f4 fdbb 	bl	8000288 <__aeabi_dsub>
 800b712:	2200      	movs	r2, #0
 800b714:	2300      	movs	r3, #0
 800b716:	4682      	mov	sl, r0
 800b718:	468b      	mov	fp, r1
 800b71a:	f7f5 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0c1      	beq.n	800b6a6 <_strtod_l+0x8e6>
 800b722:	e60e      	b.n	800b342 <_strtod_l+0x582>
 800b724:	fffffc02 	.word	0xfffffc02
 800b728:	7ff00000 	.word	0x7ff00000
 800b72c:	39500000 	.word	0x39500000
 800b730:	000fffff 	.word	0x000fffff
 800b734:	7fefffff 	.word	0x7fefffff
 800b738:	0800e5a8 	.word	0x0800e5a8
 800b73c:	4631      	mov	r1, r6
 800b73e:	4628      	mov	r0, r5
 800b740:	f002 f8d0 	bl	800d8e4 <__ratio>
 800b744:	ec59 8b10 	vmov	r8, r9, d0
 800b748:	ee10 0a10 	vmov	r0, s0
 800b74c:	2200      	movs	r2, #0
 800b74e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b752:	4649      	mov	r1, r9
 800b754:	f7f5 f9cc 	bl	8000af0 <__aeabi_dcmple>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d07c      	beq.n	800b856 <_strtod_l+0xa96>
 800b75c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d04c      	beq.n	800b7fc <_strtod_l+0xa3c>
 800b762:	4b95      	ldr	r3, [pc, #596]	; (800b9b8 <_strtod_l+0xbf8>)
 800b764:	2200      	movs	r2, #0
 800b766:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b76a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b9b8 <_strtod_l+0xbf8>
 800b76e:	f04f 0800 	mov.w	r8, #0
 800b772:	4b92      	ldr	r3, [pc, #584]	; (800b9bc <_strtod_l+0xbfc>)
 800b774:	403b      	ands	r3, r7
 800b776:	9311      	str	r3, [sp, #68]	; 0x44
 800b778:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b77a:	4b91      	ldr	r3, [pc, #580]	; (800b9c0 <_strtod_l+0xc00>)
 800b77c:	429a      	cmp	r2, r3
 800b77e:	f040 80b2 	bne.w	800b8e6 <_strtod_l+0xb26>
 800b782:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b78a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b78e:	ec4b ab10 	vmov	d0, sl, fp
 800b792:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b796:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b79a:	f001 ffcb 	bl	800d734 <__ulp>
 800b79e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7a2:	ec53 2b10 	vmov	r2, r3, d0
 800b7a6:	f7f4 ff27 	bl	80005f8 <__aeabi_dmul>
 800b7aa:	4652      	mov	r2, sl
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	f7f4 fd6d 	bl	800028c <__adddf3>
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4981      	ldr	r1, [pc, #516]	; (800b9bc <_strtod_l+0xbfc>)
 800b7b6:	4a83      	ldr	r2, [pc, #524]	; (800b9c4 <_strtod_l+0xc04>)
 800b7b8:	4019      	ands	r1, r3
 800b7ba:	4291      	cmp	r1, r2
 800b7bc:	4682      	mov	sl, r0
 800b7be:	d95e      	bls.n	800b87e <_strtod_l+0xabe>
 800b7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d103      	bne.n	800b7d2 <_strtod_l+0xa12>
 800b7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	f43f ad43 	beq.w	800b258 <_strtod_l+0x498>
 800b7d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b9d0 <_strtod_l+0xc10>
 800b7d6:	f04f 3aff 	mov.w	sl, #4294967295
 800b7da:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f001 fc7d 	bl	800d0dc <_Bfree>
 800b7e2:	9907      	ldr	r1, [sp, #28]
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f001 fc79 	bl	800d0dc <_Bfree>
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f001 fc75 	bl	800d0dc <_Bfree>
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f001 fc71 	bl	800d0dc <_Bfree>
 800b7fa:	e613      	b.n	800b424 <_strtod_l+0x664>
 800b7fc:	f1ba 0f00 	cmp.w	sl, #0
 800b800:	d11b      	bne.n	800b83a <_strtod_l+0xa7a>
 800b802:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b806:	b9f3      	cbnz	r3, 800b846 <_strtod_l+0xa86>
 800b808:	4b6b      	ldr	r3, [pc, #428]	; (800b9b8 <_strtod_l+0xbf8>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	4640      	mov	r0, r8
 800b80e:	4649      	mov	r1, r9
 800b810:	f7f5 f964 	bl	8000adc <__aeabi_dcmplt>
 800b814:	b9d0      	cbnz	r0, 800b84c <_strtod_l+0xa8c>
 800b816:	4640      	mov	r0, r8
 800b818:	4649      	mov	r1, r9
 800b81a:	4b6b      	ldr	r3, [pc, #428]	; (800b9c8 <_strtod_l+0xc08>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	f7f4 feeb 	bl	80005f8 <__aeabi_dmul>
 800b822:	4680      	mov	r8, r0
 800b824:	4689      	mov	r9, r1
 800b826:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b82a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b82e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b830:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b834:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b838:	e79b      	b.n	800b772 <_strtod_l+0x9b2>
 800b83a:	f1ba 0f01 	cmp.w	sl, #1
 800b83e:	d102      	bne.n	800b846 <_strtod_l+0xa86>
 800b840:	2f00      	cmp	r7, #0
 800b842:	f43f ad7e 	beq.w	800b342 <_strtod_l+0x582>
 800b846:	4b61      	ldr	r3, [pc, #388]	; (800b9cc <_strtod_l+0xc0c>)
 800b848:	2200      	movs	r2, #0
 800b84a:	e78c      	b.n	800b766 <_strtod_l+0x9a6>
 800b84c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b9c8 <_strtod_l+0xc08>
 800b850:	f04f 0800 	mov.w	r8, #0
 800b854:	e7e7      	b.n	800b826 <_strtod_l+0xa66>
 800b856:	4b5c      	ldr	r3, [pc, #368]	; (800b9c8 <_strtod_l+0xc08>)
 800b858:	4640      	mov	r0, r8
 800b85a:	4649      	mov	r1, r9
 800b85c:	2200      	movs	r2, #0
 800b85e:	f7f4 fecb 	bl	80005f8 <__aeabi_dmul>
 800b862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b864:	4680      	mov	r8, r0
 800b866:	4689      	mov	r9, r1
 800b868:	b933      	cbnz	r3, 800b878 <_strtod_l+0xab8>
 800b86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b86e:	9012      	str	r0, [sp, #72]	; 0x48
 800b870:	9313      	str	r3, [sp, #76]	; 0x4c
 800b872:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b876:	e7dd      	b.n	800b834 <_strtod_l+0xa74>
 800b878:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b87c:	e7f9      	b.n	800b872 <_strtod_l+0xab2>
 800b87e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b882:	9b04      	ldr	r3, [sp, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1a8      	bne.n	800b7da <_strtod_l+0xa1a>
 800b888:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b88c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b88e:	0d1b      	lsrs	r3, r3, #20
 800b890:	051b      	lsls	r3, r3, #20
 800b892:	429a      	cmp	r2, r3
 800b894:	d1a1      	bne.n	800b7da <_strtod_l+0xa1a>
 800b896:	4640      	mov	r0, r8
 800b898:	4649      	mov	r1, r9
 800b89a:	f7f5 f9f5 	bl	8000c88 <__aeabi_d2lz>
 800b89e:	f7f4 fe7d 	bl	800059c <__aeabi_l2d>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	f7f4 fced 	bl	8000288 <__aeabi_dsub>
 800b8ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8b4:	ea43 030a 	orr.w	r3, r3, sl
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	4689      	mov	r9, r1
 800b8be:	d053      	beq.n	800b968 <_strtod_l+0xba8>
 800b8c0:	a335      	add	r3, pc, #212	; (adr r3, 800b998 <_strtod_l+0xbd8>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f5 f909 	bl	8000adc <__aeabi_dcmplt>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f47f acce 	bne.w	800b26c <_strtod_l+0x4ac>
 800b8d0:	a333      	add	r3, pc, #204	; (adr r3, 800b9a0 <_strtod_l+0xbe0>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	4649      	mov	r1, r9
 800b8da:	f7f5 f91d 	bl	8000b18 <__aeabi_dcmpgt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f43f af7b 	beq.w	800b7da <_strtod_l+0xa1a>
 800b8e4:	e4c2      	b.n	800b26c <_strtod_l+0x4ac>
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	b333      	cbz	r3, 800b938 <_strtod_l+0xb78>
 800b8ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8f0:	d822      	bhi.n	800b938 <_strtod_l+0xb78>
 800b8f2:	a32d      	add	r3, pc, #180	; (adr r3, 800b9a8 <_strtod_l+0xbe8>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	f7f5 f8f8 	bl	8000af0 <__aeabi_dcmple>
 800b900:	b1a0      	cbz	r0, 800b92c <_strtod_l+0xb6c>
 800b902:	4649      	mov	r1, r9
 800b904:	4640      	mov	r0, r8
 800b906:	f7f5 f94f 	bl	8000ba8 <__aeabi_d2uiz>
 800b90a:	2801      	cmp	r0, #1
 800b90c:	bf38      	it	cc
 800b90e:	2001      	movcc	r0, #1
 800b910:	f7f4 fdf8 	bl	8000504 <__aeabi_ui2d>
 800b914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b916:	4680      	mov	r8, r0
 800b918:	4689      	mov	r9, r1
 800b91a:	bb13      	cbnz	r3, 800b962 <_strtod_l+0xba2>
 800b91c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b920:	9014      	str	r0, [sp, #80]	; 0x50
 800b922:	9315      	str	r3, [sp, #84]	; 0x54
 800b924:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b928:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b92e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b930:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b934:	1a9b      	subs	r3, r3, r2
 800b936:	930d      	str	r3, [sp, #52]	; 0x34
 800b938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b93c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b940:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b944:	f001 fef6 	bl	800d734 <__ulp>
 800b948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b94c:	ec53 2b10 	vmov	r2, r3, d0
 800b950:	f7f4 fe52 	bl	80005f8 <__aeabi_dmul>
 800b954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b958:	f7f4 fc98 	bl	800028c <__adddf3>
 800b95c:	4682      	mov	sl, r0
 800b95e:	468b      	mov	fp, r1
 800b960:	e78f      	b.n	800b882 <_strtod_l+0xac2>
 800b962:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b966:	e7dd      	b.n	800b924 <_strtod_l+0xb64>
 800b968:	a311      	add	r3, pc, #68	; (adr r3, 800b9b0 <_strtod_l+0xbf0>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f7f5 f8b5 	bl	8000adc <__aeabi_dcmplt>
 800b972:	e7b4      	b.n	800b8de <_strtod_l+0xb1e>
 800b974:	2300      	movs	r3, #0
 800b976:	930e      	str	r3, [sp, #56]	; 0x38
 800b978:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b97a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	f7ff ba65 	b.w	800ae4c <_strtod_l+0x8c>
 800b982:	2b65      	cmp	r3, #101	; 0x65
 800b984:	f43f ab5d 	beq.w	800b042 <_strtod_l+0x282>
 800b988:	2b45      	cmp	r3, #69	; 0x45
 800b98a:	f43f ab5a 	beq.w	800b042 <_strtod_l+0x282>
 800b98e:	2201      	movs	r2, #1
 800b990:	f7ff bb92 	b.w	800b0b8 <_strtod_l+0x2f8>
 800b994:	f3af 8000 	nop.w
 800b998:	94a03595 	.word	0x94a03595
 800b99c:	3fdfffff 	.word	0x3fdfffff
 800b9a0:	35afe535 	.word	0x35afe535
 800b9a4:	3fe00000 	.word	0x3fe00000
 800b9a8:	ffc00000 	.word	0xffc00000
 800b9ac:	41dfffff 	.word	0x41dfffff
 800b9b0:	94a03595 	.word	0x94a03595
 800b9b4:	3fcfffff 	.word	0x3fcfffff
 800b9b8:	3ff00000 	.word	0x3ff00000
 800b9bc:	7ff00000 	.word	0x7ff00000
 800b9c0:	7fe00000 	.word	0x7fe00000
 800b9c4:	7c9fffff 	.word	0x7c9fffff
 800b9c8:	3fe00000 	.word	0x3fe00000
 800b9cc:	bff00000 	.word	0xbff00000
 800b9d0:	7fefffff 	.word	0x7fefffff

0800b9d4 <_strtod_r>:
 800b9d4:	4b01      	ldr	r3, [pc, #4]	; (800b9dc <_strtod_r+0x8>)
 800b9d6:	f7ff b9f3 	b.w	800adc0 <_strtod_l>
 800b9da:	bf00      	nop
 800b9dc:	20000084 	.word	0x20000084

0800b9e0 <_strtol_l.isra.0>:
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e6:	d001      	beq.n	800b9ec <_strtol_l.isra.0+0xc>
 800b9e8:	2b24      	cmp	r3, #36	; 0x24
 800b9ea:	d906      	bls.n	800b9fa <_strtol_l.isra.0+0x1a>
 800b9ec:	f7fd ff46 	bl	800987c <__errno>
 800b9f0:	2316      	movs	r3, #22
 800b9f2:	6003      	str	r3, [r0, #0]
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fa:	4f3a      	ldr	r7, [pc, #232]	; (800bae4 <_strtol_l.isra.0+0x104>)
 800b9fc:	468e      	mov	lr, r1
 800b9fe:	4676      	mov	r6, lr
 800ba00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ba04:	5de5      	ldrb	r5, [r4, r7]
 800ba06:	f015 0508 	ands.w	r5, r5, #8
 800ba0a:	d1f8      	bne.n	800b9fe <_strtol_l.isra.0+0x1e>
 800ba0c:	2c2d      	cmp	r4, #45	; 0x2d
 800ba0e:	d134      	bne.n	800ba7a <_strtol_l.isra.0+0x9a>
 800ba10:	f89e 4000 	ldrb.w	r4, [lr]
 800ba14:	f04f 0801 	mov.w	r8, #1
 800ba18:	f106 0e02 	add.w	lr, r6, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d05c      	beq.n	800bada <_strtol_l.isra.0+0xfa>
 800ba20:	2b10      	cmp	r3, #16
 800ba22:	d10c      	bne.n	800ba3e <_strtol_l.isra.0+0x5e>
 800ba24:	2c30      	cmp	r4, #48	; 0x30
 800ba26:	d10a      	bne.n	800ba3e <_strtol_l.isra.0+0x5e>
 800ba28:	f89e 4000 	ldrb.w	r4, [lr]
 800ba2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba30:	2c58      	cmp	r4, #88	; 0x58
 800ba32:	d14d      	bne.n	800bad0 <_strtol_l.isra.0+0xf0>
 800ba34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ba38:	2310      	movs	r3, #16
 800ba3a:	f10e 0e02 	add.w	lr, lr, #2
 800ba3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ba42:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ba46:	2600      	movs	r6, #0
 800ba48:	fbbc f9f3 	udiv	r9, ip, r3
 800ba4c:	4635      	mov	r5, r6
 800ba4e:	fb03 ca19 	mls	sl, r3, r9, ip
 800ba52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ba56:	2f09      	cmp	r7, #9
 800ba58:	d818      	bhi.n	800ba8c <_strtol_l.isra.0+0xac>
 800ba5a:	463c      	mov	r4, r7
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	dd24      	ble.n	800baaa <_strtol_l.isra.0+0xca>
 800ba60:	2e00      	cmp	r6, #0
 800ba62:	db1f      	blt.n	800baa4 <_strtol_l.isra.0+0xc4>
 800ba64:	45a9      	cmp	r9, r5
 800ba66:	d31d      	bcc.n	800baa4 <_strtol_l.isra.0+0xc4>
 800ba68:	d101      	bne.n	800ba6e <_strtol_l.isra.0+0x8e>
 800ba6a:	45a2      	cmp	sl, r4
 800ba6c:	db1a      	blt.n	800baa4 <_strtol_l.isra.0+0xc4>
 800ba6e:	fb05 4503 	mla	r5, r5, r3, r4
 800ba72:	2601      	movs	r6, #1
 800ba74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ba78:	e7eb      	b.n	800ba52 <_strtol_l.isra.0+0x72>
 800ba7a:	2c2b      	cmp	r4, #43	; 0x2b
 800ba7c:	bf08      	it	eq
 800ba7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ba82:	46a8      	mov	r8, r5
 800ba84:	bf08      	it	eq
 800ba86:	f106 0e02 	addeq.w	lr, r6, #2
 800ba8a:	e7c7      	b.n	800ba1c <_strtol_l.isra.0+0x3c>
 800ba8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ba90:	2f19      	cmp	r7, #25
 800ba92:	d801      	bhi.n	800ba98 <_strtol_l.isra.0+0xb8>
 800ba94:	3c37      	subs	r4, #55	; 0x37
 800ba96:	e7e1      	b.n	800ba5c <_strtol_l.isra.0+0x7c>
 800ba98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ba9c:	2f19      	cmp	r7, #25
 800ba9e:	d804      	bhi.n	800baaa <_strtol_l.isra.0+0xca>
 800baa0:	3c57      	subs	r4, #87	; 0x57
 800baa2:	e7db      	b.n	800ba5c <_strtol_l.isra.0+0x7c>
 800baa4:	f04f 36ff 	mov.w	r6, #4294967295
 800baa8:	e7e4      	b.n	800ba74 <_strtol_l.isra.0+0x94>
 800baaa:	2e00      	cmp	r6, #0
 800baac:	da05      	bge.n	800baba <_strtol_l.isra.0+0xda>
 800baae:	2322      	movs	r3, #34	; 0x22
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	4665      	mov	r5, ip
 800bab4:	b942      	cbnz	r2, 800bac8 <_strtol_l.isra.0+0xe8>
 800bab6:	4628      	mov	r0, r5
 800bab8:	e79d      	b.n	800b9f6 <_strtol_l.isra.0+0x16>
 800baba:	f1b8 0f00 	cmp.w	r8, #0
 800babe:	d000      	beq.n	800bac2 <_strtol_l.isra.0+0xe2>
 800bac0:	426d      	negs	r5, r5
 800bac2:	2a00      	cmp	r2, #0
 800bac4:	d0f7      	beq.n	800bab6 <_strtol_l.isra.0+0xd6>
 800bac6:	b10e      	cbz	r6, 800bacc <_strtol_l.isra.0+0xec>
 800bac8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bacc:	6011      	str	r1, [r2, #0]
 800bace:	e7f2      	b.n	800bab6 <_strtol_l.isra.0+0xd6>
 800bad0:	2430      	movs	r4, #48	; 0x30
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1b3      	bne.n	800ba3e <_strtol_l.isra.0+0x5e>
 800bad6:	2308      	movs	r3, #8
 800bad8:	e7b1      	b.n	800ba3e <_strtol_l.isra.0+0x5e>
 800bada:	2c30      	cmp	r4, #48	; 0x30
 800badc:	d0a4      	beq.n	800ba28 <_strtol_l.isra.0+0x48>
 800bade:	230a      	movs	r3, #10
 800bae0:	e7ad      	b.n	800ba3e <_strtol_l.isra.0+0x5e>
 800bae2:	bf00      	nop
 800bae4:	0800e5d1 	.word	0x0800e5d1

0800bae8 <_strtol_r>:
 800bae8:	f7ff bf7a 	b.w	800b9e0 <_strtol_l.isra.0>

0800baec <_write_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	; (800bb0c <_write_r+0x20>)
 800baf0:	4604      	mov	r4, r0
 800baf2:	4608      	mov	r0, r1
 800baf4:	4611      	mov	r1, r2
 800baf6:	2200      	movs	r2, #0
 800baf8:	602a      	str	r2, [r5, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	f7f8 fb8d 	bl	800421a <_write>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_write_r+0x1e>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_write_r+0x1e>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	200017b4 	.word	0x200017b4

0800bb10 <_close_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d06      	ldr	r5, [pc, #24]	; (800bb2c <_close_r+0x1c>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	602b      	str	r3, [r5, #0]
 800bb1c:	f7f8 fb99 	bl	8004252 <_close>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_close_r+0x1a>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_close_r+0x1a>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	200017b4 	.word	0x200017b4

0800bb30 <quorem>:
 800bb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	6903      	ldr	r3, [r0, #16]
 800bb36:	690c      	ldr	r4, [r1, #16]
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	4607      	mov	r7, r0
 800bb3c:	f2c0 8081 	blt.w	800bc42 <quorem+0x112>
 800bb40:	3c01      	subs	r4, #1
 800bb42:	f101 0814 	add.w	r8, r1, #20
 800bb46:	f100 0514 	add.w	r5, r0, #20
 800bb4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb64:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb68:	d331      	bcc.n	800bbce <quorem+0x9e>
 800bb6a:	f04f 0e00 	mov.w	lr, #0
 800bb6e:	4640      	mov	r0, r8
 800bb70:	46ac      	mov	ip, r5
 800bb72:	46f2      	mov	sl, lr
 800bb74:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb78:	b293      	uxth	r3, r2
 800bb7a:	fb06 e303 	mla	r3, r6, r3, lr
 800bb7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	ebaa 0303 	sub.w	r3, sl, r3
 800bb88:	0c12      	lsrs	r2, r2, #16
 800bb8a:	f8dc a000 	ldr.w	sl, [ip]
 800bb8e:	fb06 e202 	mla	r2, r6, r2, lr
 800bb92:	fa13 f38a 	uxtah	r3, r3, sl
 800bb96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb9a:	fa1f fa82 	uxth.w	sl, r2
 800bb9e:	f8dc 2000 	ldr.w	r2, [ip]
 800bba2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bba6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbb0:	4581      	cmp	r9, r0
 800bbb2:	f84c 3b04 	str.w	r3, [ip], #4
 800bbb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbba:	d2db      	bcs.n	800bb74 <quorem+0x44>
 800bbbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbc0:	b92b      	cbnz	r3, 800bbce <quorem+0x9e>
 800bbc2:	9b01      	ldr	r3, [sp, #4]
 800bbc4:	3b04      	subs	r3, #4
 800bbc6:	429d      	cmp	r5, r3
 800bbc8:	461a      	mov	r2, r3
 800bbca:	d32e      	bcc.n	800bc2a <quorem+0xfa>
 800bbcc:	613c      	str	r4, [r7, #16]
 800bbce:	4638      	mov	r0, r7
 800bbd0:	f001 fd0c 	bl	800d5ec <__mcmp>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	db24      	blt.n	800bc22 <quorem+0xf2>
 800bbd8:	3601      	adds	r6, #1
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f04f 0c00 	mov.w	ip, #0
 800bbe0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbe4:	f8d0 e000 	ldr.w	lr, [r0]
 800bbe8:	b293      	uxth	r3, r2
 800bbea:	ebac 0303 	sub.w	r3, ip, r3
 800bbee:	0c12      	lsrs	r2, r2, #16
 800bbf0:	fa13 f38e 	uxtah	r3, r3, lr
 800bbf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bbf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc02:	45c1      	cmp	r9, r8
 800bc04:	f840 3b04 	str.w	r3, [r0], #4
 800bc08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc0c:	d2e8      	bcs.n	800bbe0 <quorem+0xb0>
 800bc0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc16:	b922      	cbnz	r2, 800bc22 <quorem+0xf2>
 800bc18:	3b04      	subs	r3, #4
 800bc1a:	429d      	cmp	r5, r3
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	d30a      	bcc.n	800bc36 <quorem+0x106>
 800bc20:	613c      	str	r4, [r7, #16]
 800bc22:	4630      	mov	r0, r6
 800bc24:	b003      	add	sp, #12
 800bc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2a:	6812      	ldr	r2, [r2, #0]
 800bc2c:	3b04      	subs	r3, #4
 800bc2e:	2a00      	cmp	r2, #0
 800bc30:	d1cc      	bne.n	800bbcc <quorem+0x9c>
 800bc32:	3c01      	subs	r4, #1
 800bc34:	e7c7      	b.n	800bbc6 <quorem+0x96>
 800bc36:	6812      	ldr	r2, [r2, #0]
 800bc38:	3b04      	subs	r3, #4
 800bc3a:	2a00      	cmp	r2, #0
 800bc3c:	d1f0      	bne.n	800bc20 <quorem+0xf0>
 800bc3e:	3c01      	subs	r4, #1
 800bc40:	e7eb      	b.n	800bc1a <quorem+0xea>
 800bc42:	2000      	movs	r0, #0
 800bc44:	e7ee      	b.n	800bc24 <quorem+0xf4>
	...

0800bc48 <_dtoa_r>:
 800bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4c:	ed2d 8b02 	vpush	{d8}
 800bc50:	ec57 6b10 	vmov	r6, r7, d0
 800bc54:	b095      	sub	sp, #84	; 0x54
 800bc56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bc58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc5c:	9105      	str	r1, [sp, #20]
 800bc5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bc62:	4604      	mov	r4, r0
 800bc64:	9209      	str	r2, [sp, #36]	; 0x24
 800bc66:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc68:	b975      	cbnz	r5, 800bc88 <_dtoa_r+0x40>
 800bc6a:	2010      	movs	r0, #16
 800bc6c:	f001 f9c2 	bl	800cff4 <malloc>
 800bc70:	4602      	mov	r2, r0
 800bc72:	6260      	str	r0, [r4, #36]	; 0x24
 800bc74:	b920      	cbnz	r0, 800bc80 <_dtoa_r+0x38>
 800bc76:	4bb2      	ldr	r3, [pc, #712]	; (800bf40 <_dtoa_r+0x2f8>)
 800bc78:	21ea      	movs	r1, #234	; 0xea
 800bc7a:	48b2      	ldr	r0, [pc, #712]	; (800bf44 <_dtoa_r+0x2fc>)
 800bc7c:	f002 fa68 	bl	800e150 <__assert_func>
 800bc80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc84:	6005      	str	r5, [r0, #0]
 800bc86:	60c5      	str	r5, [r0, #12]
 800bc88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc8a:	6819      	ldr	r1, [r3, #0]
 800bc8c:	b151      	cbz	r1, 800bca4 <_dtoa_r+0x5c>
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	604a      	str	r2, [r1, #4]
 800bc92:	2301      	movs	r3, #1
 800bc94:	4093      	lsls	r3, r2
 800bc96:	608b      	str	r3, [r1, #8]
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f001 fa1f 	bl	800d0dc <_Bfree>
 800bc9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bca0:	2200      	movs	r2, #0
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	1e3b      	subs	r3, r7, #0
 800bca6:	bfb9      	ittee	lt
 800bca8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcac:	9303      	strlt	r3, [sp, #12]
 800bcae:	2300      	movge	r3, #0
 800bcb0:	f8c8 3000 	strge.w	r3, [r8]
 800bcb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bcb8:	4ba3      	ldr	r3, [pc, #652]	; (800bf48 <_dtoa_r+0x300>)
 800bcba:	bfbc      	itt	lt
 800bcbc:	2201      	movlt	r2, #1
 800bcbe:	f8c8 2000 	strlt.w	r2, [r8]
 800bcc2:	ea33 0309 	bics.w	r3, r3, r9
 800bcc6:	d11b      	bne.n	800bd00 <_dtoa_r+0xb8>
 800bcc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bcca:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcd4:	4333      	orrs	r3, r6
 800bcd6:	f000 857a 	beq.w	800c7ce <_dtoa_r+0xb86>
 800bcda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcdc:	b963      	cbnz	r3, 800bcf8 <_dtoa_r+0xb0>
 800bcde:	4b9b      	ldr	r3, [pc, #620]	; (800bf4c <_dtoa_r+0x304>)
 800bce0:	e024      	b.n	800bd2c <_dtoa_r+0xe4>
 800bce2:	4b9b      	ldr	r3, [pc, #620]	; (800bf50 <_dtoa_r+0x308>)
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	3308      	adds	r3, #8
 800bce8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	9800      	ldr	r0, [sp, #0]
 800bcee:	b015      	add	sp, #84	; 0x54
 800bcf0:	ecbd 8b02 	vpop	{d8}
 800bcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf8:	4b94      	ldr	r3, [pc, #592]	; (800bf4c <_dtoa_r+0x304>)
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	3303      	adds	r3, #3
 800bcfe:	e7f3      	b.n	800bce8 <_dtoa_r+0xa0>
 800bd00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd04:	2200      	movs	r2, #0
 800bd06:	ec51 0b17 	vmov	r0, r1, d7
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bd10:	f7f4 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd14:	4680      	mov	r8, r0
 800bd16:	b158      	cbz	r0, 800bd30 <_dtoa_r+0xe8>
 800bd18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	6013      	str	r3, [r2, #0]
 800bd1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f000 8551 	beq.w	800c7c8 <_dtoa_r+0xb80>
 800bd26:	488b      	ldr	r0, [pc, #556]	; (800bf54 <_dtoa_r+0x30c>)
 800bd28:	6018      	str	r0, [r3, #0]
 800bd2a:	1e43      	subs	r3, r0, #1
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	e7dd      	b.n	800bcec <_dtoa_r+0xa4>
 800bd30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bd34:	aa12      	add	r2, sp, #72	; 0x48
 800bd36:	a913      	add	r1, sp, #76	; 0x4c
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f001 fd77 	bl	800d82c <__d2b>
 800bd3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd42:	4683      	mov	fp, r0
 800bd44:	2d00      	cmp	r5, #0
 800bd46:	d07c      	beq.n	800be42 <_dtoa_r+0x1fa>
 800bd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bd4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bd56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bd5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bd5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd62:	4b7d      	ldr	r3, [pc, #500]	; (800bf58 <_dtoa_r+0x310>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	4630      	mov	r0, r6
 800bd68:	4639      	mov	r1, r7
 800bd6a:	f7f4 fa8d 	bl	8000288 <__aeabi_dsub>
 800bd6e:	a36e      	add	r3, pc, #440	; (adr r3, 800bf28 <_dtoa_r+0x2e0>)
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	f7f4 fc40 	bl	80005f8 <__aeabi_dmul>
 800bd78:	a36d      	add	r3, pc, #436	; (adr r3, 800bf30 <_dtoa_r+0x2e8>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	f7f4 fa85 	bl	800028c <__adddf3>
 800bd82:	4606      	mov	r6, r0
 800bd84:	4628      	mov	r0, r5
 800bd86:	460f      	mov	r7, r1
 800bd88:	f7f4 fbcc 	bl	8000524 <__aeabi_i2d>
 800bd8c:	a36a      	add	r3, pc, #424	; (adr r3, 800bf38 <_dtoa_r+0x2f0>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fc31 	bl	80005f8 <__aeabi_dmul>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	f7f4 fa75 	bl	800028c <__adddf3>
 800bda2:	4606      	mov	r6, r0
 800bda4:	460f      	mov	r7, r1
 800bda6:	f7f4 fed7 	bl	8000b58 <__aeabi_d2iz>
 800bdaa:	2200      	movs	r2, #0
 800bdac:	4682      	mov	sl, r0
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	f7f4 fe92 	bl	8000adc <__aeabi_dcmplt>
 800bdb8:	b148      	cbz	r0, 800bdce <_dtoa_r+0x186>
 800bdba:	4650      	mov	r0, sl
 800bdbc:	f7f4 fbb2 	bl	8000524 <__aeabi_i2d>
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	f7f4 fe80 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdc8:	b908      	cbnz	r0, 800bdce <_dtoa_r+0x186>
 800bdca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdce:	f1ba 0f16 	cmp.w	sl, #22
 800bdd2:	d854      	bhi.n	800be7e <_dtoa_r+0x236>
 800bdd4:	4b61      	ldr	r3, [pc, #388]	; (800bf5c <_dtoa_r+0x314>)
 800bdd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bde2:	f7f4 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d04b      	beq.n	800be82 <_dtoa_r+0x23a>
 800bdea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdee:	2300      	movs	r3, #0
 800bdf0:	930e      	str	r3, [sp, #56]	; 0x38
 800bdf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdf4:	1b5d      	subs	r5, r3, r5
 800bdf6:	1e6b      	subs	r3, r5, #1
 800bdf8:	9304      	str	r3, [sp, #16]
 800bdfa:	bf43      	ittte	mi
 800bdfc:	2300      	movmi	r3, #0
 800bdfe:	f1c5 0801 	rsbmi	r8, r5, #1
 800be02:	9304      	strmi	r3, [sp, #16]
 800be04:	f04f 0800 	movpl.w	r8, #0
 800be08:	f1ba 0f00 	cmp.w	sl, #0
 800be0c:	db3b      	blt.n	800be86 <_dtoa_r+0x23e>
 800be0e:	9b04      	ldr	r3, [sp, #16]
 800be10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800be14:	4453      	add	r3, sl
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	2300      	movs	r3, #0
 800be1a:	9306      	str	r3, [sp, #24]
 800be1c:	9b05      	ldr	r3, [sp, #20]
 800be1e:	2b09      	cmp	r3, #9
 800be20:	d869      	bhi.n	800bef6 <_dtoa_r+0x2ae>
 800be22:	2b05      	cmp	r3, #5
 800be24:	bfc4      	itt	gt
 800be26:	3b04      	subgt	r3, #4
 800be28:	9305      	strgt	r3, [sp, #20]
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	f1a3 0302 	sub.w	r3, r3, #2
 800be30:	bfcc      	ite	gt
 800be32:	2500      	movgt	r5, #0
 800be34:	2501      	movle	r5, #1
 800be36:	2b03      	cmp	r3, #3
 800be38:	d869      	bhi.n	800bf0e <_dtoa_r+0x2c6>
 800be3a:	e8df f003 	tbb	[pc, r3]
 800be3e:	4e2c      	.short	0x4e2c
 800be40:	5a4c      	.short	0x5a4c
 800be42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800be46:	441d      	add	r5, r3
 800be48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be4c:	2b20      	cmp	r3, #32
 800be4e:	bfc1      	itttt	gt
 800be50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800be58:	fa09 f303 	lslgt.w	r3, r9, r3
 800be5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800be60:	bfda      	itte	le
 800be62:	f1c3 0320 	rsble	r3, r3, #32
 800be66:	fa06 f003 	lslle.w	r0, r6, r3
 800be6a:	4318      	orrgt	r0, r3
 800be6c:	f7f4 fb4a 	bl	8000504 <__aeabi_ui2d>
 800be70:	2301      	movs	r3, #1
 800be72:	4606      	mov	r6, r0
 800be74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800be78:	3d01      	subs	r5, #1
 800be7a:	9310      	str	r3, [sp, #64]	; 0x40
 800be7c:	e771      	b.n	800bd62 <_dtoa_r+0x11a>
 800be7e:	2301      	movs	r3, #1
 800be80:	e7b6      	b.n	800bdf0 <_dtoa_r+0x1a8>
 800be82:	900e      	str	r0, [sp, #56]	; 0x38
 800be84:	e7b5      	b.n	800bdf2 <_dtoa_r+0x1aa>
 800be86:	f1ca 0300 	rsb	r3, sl, #0
 800be8a:	9306      	str	r3, [sp, #24]
 800be8c:	2300      	movs	r3, #0
 800be8e:	eba8 080a 	sub.w	r8, r8, sl
 800be92:	930d      	str	r3, [sp, #52]	; 0x34
 800be94:	e7c2      	b.n	800be1c <_dtoa_r+0x1d4>
 800be96:	2300      	movs	r3, #0
 800be98:	9308      	str	r3, [sp, #32]
 800be9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dc39      	bgt.n	800bf14 <_dtoa_r+0x2cc>
 800bea0:	f04f 0901 	mov.w	r9, #1
 800bea4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bea8:	464b      	mov	r3, r9
 800beaa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800beae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800beb0:	2200      	movs	r2, #0
 800beb2:	6042      	str	r2, [r0, #4]
 800beb4:	2204      	movs	r2, #4
 800beb6:	f102 0614 	add.w	r6, r2, #20
 800beba:	429e      	cmp	r6, r3
 800bebc:	6841      	ldr	r1, [r0, #4]
 800bebe:	d92f      	bls.n	800bf20 <_dtoa_r+0x2d8>
 800bec0:	4620      	mov	r0, r4
 800bec2:	f001 f8cb 	bl	800d05c <_Balloc>
 800bec6:	9000      	str	r0, [sp, #0]
 800bec8:	2800      	cmp	r0, #0
 800beca:	d14b      	bne.n	800bf64 <_dtoa_r+0x31c>
 800becc:	4b24      	ldr	r3, [pc, #144]	; (800bf60 <_dtoa_r+0x318>)
 800bece:	4602      	mov	r2, r0
 800bed0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bed4:	e6d1      	b.n	800bc7a <_dtoa_r+0x32>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e7de      	b.n	800be98 <_dtoa_r+0x250>
 800beda:	2300      	movs	r3, #0
 800bedc:	9308      	str	r3, [sp, #32]
 800bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee0:	eb0a 0903 	add.w	r9, sl, r3
 800bee4:	f109 0301 	add.w	r3, r9, #1
 800bee8:	2b01      	cmp	r3, #1
 800beea:	9301      	str	r3, [sp, #4]
 800beec:	bfb8      	it	lt
 800beee:	2301      	movlt	r3, #1
 800bef0:	e7dd      	b.n	800beae <_dtoa_r+0x266>
 800bef2:	2301      	movs	r3, #1
 800bef4:	e7f2      	b.n	800bedc <_dtoa_r+0x294>
 800bef6:	2501      	movs	r5, #1
 800bef8:	2300      	movs	r3, #0
 800befa:	9305      	str	r3, [sp, #20]
 800befc:	9508      	str	r5, [sp, #32]
 800befe:	f04f 39ff 	mov.w	r9, #4294967295
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf08:	2312      	movs	r3, #18
 800bf0a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf0c:	e7cf      	b.n	800beae <_dtoa_r+0x266>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	9308      	str	r3, [sp, #32]
 800bf12:	e7f4      	b.n	800befe <_dtoa_r+0x2b6>
 800bf14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bf18:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	e7c6      	b.n	800beae <_dtoa_r+0x266>
 800bf20:	3101      	adds	r1, #1
 800bf22:	6041      	str	r1, [r0, #4]
 800bf24:	0052      	lsls	r2, r2, #1
 800bf26:	e7c6      	b.n	800beb6 <_dtoa_r+0x26e>
 800bf28:	636f4361 	.word	0x636f4361
 800bf2c:	3fd287a7 	.word	0x3fd287a7
 800bf30:	8b60c8b3 	.word	0x8b60c8b3
 800bf34:	3fc68a28 	.word	0x3fc68a28
 800bf38:	509f79fb 	.word	0x509f79fb
 800bf3c:	3fd34413 	.word	0x3fd34413
 800bf40:	0800e6de 	.word	0x0800e6de
 800bf44:	0800e6f5 	.word	0x0800e6f5
 800bf48:	7ff00000 	.word	0x7ff00000
 800bf4c:	0800e6da 	.word	0x0800e6da
 800bf50:	0800e6d1 	.word	0x0800e6d1
 800bf54:	0800e551 	.word	0x0800e551
 800bf58:	3ff80000 	.word	0x3ff80000
 800bf5c:	0800e870 	.word	0x0800e870
 800bf60:	0800e754 	.word	0x0800e754
 800bf64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf66:	9a00      	ldr	r2, [sp, #0]
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	9b01      	ldr	r3, [sp, #4]
 800bf6c:	2b0e      	cmp	r3, #14
 800bf6e:	f200 80ad 	bhi.w	800c0cc <_dtoa_r+0x484>
 800bf72:	2d00      	cmp	r5, #0
 800bf74:	f000 80aa 	beq.w	800c0cc <_dtoa_r+0x484>
 800bf78:	f1ba 0f00 	cmp.w	sl, #0
 800bf7c:	dd36      	ble.n	800bfec <_dtoa_r+0x3a4>
 800bf7e:	4ac3      	ldr	r2, [pc, #780]	; (800c28c <_dtoa_r+0x644>)
 800bf80:	f00a 030f 	and.w	r3, sl, #15
 800bf84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf88:	ed93 7b00 	vldr	d7, [r3]
 800bf8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bf90:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bf94:	eeb0 8a47 	vmov.f32	s16, s14
 800bf98:	eef0 8a67 	vmov.f32	s17, s15
 800bf9c:	d016      	beq.n	800bfcc <_dtoa_r+0x384>
 800bf9e:	4bbc      	ldr	r3, [pc, #752]	; (800c290 <_dtoa_r+0x648>)
 800bfa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bfa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfa8:	f7f4 fc50 	bl	800084c <__aeabi_ddiv>
 800bfac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfb0:	f007 070f 	and.w	r7, r7, #15
 800bfb4:	2503      	movs	r5, #3
 800bfb6:	4eb6      	ldr	r6, [pc, #728]	; (800c290 <_dtoa_r+0x648>)
 800bfb8:	b957      	cbnz	r7, 800bfd0 <_dtoa_r+0x388>
 800bfba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfbe:	ec53 2b18 	vmov	r2, r3, d8
 800bfc2:	f7f4 fc43 	bl	800084c <__aeabi_ddiv>
 800bfc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfca:	e029      	b.n	800c020 <_dtoa_r+0x3d8>
 800bfcc:	2502      	movs	r5, #2
 800bfce:	e7f2      	b.n	800bfb6 <_dtoa_r+0x36e>
 800bfd0:	07f9      	lsls	r1, r7, #31
 800bfd2:	d508      	bpl.n	800bfe6 <_dtoa_r+0x39e>
 800bfd4:	ec51 0b18 	vmov	r0, r1, d8
 800bfd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	ec41 0b18 	vmov	d8, r0, r1
 800bfe4:	3501      	adds	r5, #1
 800bfe6:	107f      	asrs	r7, r7, #1
 800bfe8:	3608      	adds	r6, #8
 800bfea:	e7e5      	b.n	800bfb8 <_dtoa_r+0x370>
 800bfec:	f000 80a6 	beq.w	800c13c <_dtoa_r+0x4f4>
 800bff0:	f1ca 0600 	rsb	r6, sl, #0
 800bff4:	4ba5      	ldr	r3, [pc, #660]	; (800c28c <_dtoa_r+0x644>)
 800bff6:	4fa6      	ldr	r7, [pc, #664]	; (800c290 <_dtoa_r+0x648>)
 800bff8:	f006 020f 	and.w	r2, r6, #15
 800bffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c008:	f7f4 faf6 	bl	80005f8 <__aeabi_dmul>
 800c00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c010:	1136      	asrs	r6, r6, #4
 800c012:	2300      	movs	r3, #0
 800c014:	2502      	movs	r5, #2
 800c016:	2e00      	cmp	r6, #0
 800c018:	f040 8085 	bne.w	800c126 <_dtoa_r+0x4de>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1d2      	bne.n	800bfc6 <_dtoa_r+0x37e>
 800c020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c022:	2b00      	cmp	r3, #0
 800c024:	f000 808c 	beq.w	800c140 <_dtoa_r+0x4f8>
 800c028:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c02c:	4b99      	ldr	r3, [pc, #612]	; (800c294 <_dtoa_r+0x64c>)
 800c02e:	2200      	movs	r2, #0
 800c030:	4630      	mov	r0, r6
 800c032:	4639      	mov	r1, r7
 800c034:	f7f4 fd52 	bl	8000adc <__aeabi_dcmplt>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f000 8081 	beq.w	800c140 <_dtoa_r+0x4f8>
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d07d      	beq.n	800c140 <_dtoa_r+0x4f8>
 800c044:	f1b9 0f00 	cmp.w	r9, #0
 800c048:	dd3c      	ble.n	800c0c4 <_dtoa_r+0x47c>
 800c04a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c04e:	9307      	str	r3, [sp, #28]
 800c050:	2200      	movs	r2, #0
 800c052:	4b91      	ldr	r3, [pc, #580]	; (800c298 <_dtoa_r+0x650>)
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 face 	bl	80005f8 <__aeabi_dmul>
 800c05c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c060:	3501      	adds	r5, #1
 800c062:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c066:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c06a:	4628      	mov	r0, r5
 800c06c:	f7f4 fa5a 	bl	8000524 <__aeabi_i2d>
 800c070:	4632      	mov	r2, r6
 800c072:	463b      	mov	r3, r7
 800c074:	f7f4 fac0 	bl	80005f8 <__aeabi_dmul>
 800c078:	4b88      	ldr	r3, [pc, #544]	; (800c29c <_dtoa_r+0x654>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	f7f4 f906 	bl	800028c <__adddf3>
 800c080:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c088:	9303      	str	r3, [sp, #12]
 800c08a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d15c      	bne.n	800c14a <_dtoa_r+0x502>
 800c090:	4b83      	ldr	r3, [pc, #524]	; (800c2a0 <_dtoa_r+0x658>)
 800c092:	2200      	movs	r2, #0
 800c094:	4630      	mov	r0, r6
 800c096:	4639      	mov	r1, r7
 800c098:	f7f4 f8f6 	bl	8000288 <__aeabi_dsub>
 800c09c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	f7f4 fd38 	bl	8000b18 <__aeabi_dcmpgt>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	f040 8296 	bne.w	800c5da <_dtoa_r+0x992>
 800c0ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	f7f4 fd0f 	bl	8000adc <__aeabi_dcmplt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f040 8288 	bne.w	800c5d4 <_dtoa_r+0x98c>
 800c0c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c0c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f2c0 8158 	blt.w	800c384 <_dtoa_r+0x73c>
 800c0d4:	f1ba 0f0e 	cmp.w	sl, #14
 800c0d8:	f300 8154 	bgt.w	800c384 <_dtoa_r+0x73c>
 800c0dc:	4b6b      	ldr	r3, [pc, #428]	; (800c28c <_dtoa_r+0x644>)
 800c0de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c0e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f280 80e3 	bge.w	800c2b4 <_dtoa_r+0x66c>
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f300 80df 	bgt.w	800c2b4 <_dtoa_r+0x66c>
 800c0f6:	f040 826d 	bne.w	800c5d4 <_dtoa_r+0x98c>
 800c0fa:	4b69      	ldr	r3, [pc, #420]	; (800c2a0 <_dtoa_r+0x658>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4640      	mov	r0, r8
 800c100:	4649      	mov	r1, r9
 800c102:	f7f4 fa79 	bl	80005f8 <__aeabi_dmul>
 800c106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c10a:	f7f4 fcfb 	bl	8000b04 <__aeabi_dcmpge>
 800c10e:	9e01      	ldr	r6, [sp, #4]
 800c110:	4637      	mov	r7, r6
 800c112:	2800      	cmp	r0, #0
 800c114:	f040 8243 	bne.w	800c59e <_dtoa_r+0x956>
 800c118:	9d00      	ldr	r5, [sp, #0]
 800c11a:	2331      	movs	r3, #49	; 0x31
 800c11c:	f805 3b01 	strb.w	r3, [r5], #1
 800c120:	f10a 0a01 	add.w	sl, sl, #1
 800c124:	e23f      	b.n	800c5a6 <_dtoa_r+0x95e>
 800c126:	07f2      	lsls	r2, r6, #31
 800c128:	d505      	bpl.n	800c136 <_dtoa_r+0x4ee>
 800c12a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c12e:	f7f4 fa63 	bl	80005f8 <__aeabi_dmul>
 800c132:	3501      	adds	r5, #1
 800c134:	2301      	movs	r3, #1
 800c136:	1076      	asrs	r6, r6, #1
 800c138:	3708      	adds	r7, #8
 800c13a:	e76c      	b.n	800c016 <_dtoa_r+0x3ce>
 800c13c:	2502      	movs	r5, #2
 800c13e:	e76f      	b.n	800c020 <_dtoa_r+0x3d8>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	f8cd a01c 	str.w	sl, [sp, #28]
 800c146:	930c      	str	r3, [sp, #48]	; 0x30
 800c148:	e78d      	b.n	800c066 <_dtoa_r+0x41e>
 800c14a:	9900      	ldr	r1, [sp, #0]
 800c14c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c14e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c150:	4b4e      	ldr	r3, [pc, #312]	; (800c28c <_dtoa_r+0x644>)
 800c152:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c156:	4401      	add	r1, r0
 800c158:	9102      	str	r1, [sp, #8]
 800c15a:	9908      	ldr	r1, [sp, #32]
 800c15c:	eeb0 8a47 	vmov.f32	s16, s14
 800c160:	eef0 8a67 	vmov.f32	s17, s15
 800c164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c168:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c16c:	2900      	cmp	r1, #0
 800c16e:	d045      	beq.n	800c1fc <_dtoa_r+0x5b4>
 800c170:	494c      	ldr	r1, [pc, #304]	; (800c2a4 <_dtoa_r+0x65c>)
 800c172:	2000      	movs	r0, #0
 800c174:	f7f4 fb6a 	bl	800084c <__aeabi_ddiv>
 800c178:	ec53 2b18 	vmov	r2, r3, d8
 800c17c:	f7f4 f884 	bl	8000288 <__aeabi_dsub>
 800c180:	9d00      	ldr	r5, [sp, #0]
 800c182:	ec41 0b18 	vmov	d8, r0, r1
 800c186:	4639      	mov	r1, r7
 800c188:	4630      	mov	r0, r6
 800c18a:	f7f4 fce5 	bl	8000b58 <__aeabi_d2iz>
 800c18e:	900c      	str	r0, [sp, #48]	; 0x30
 800c190:	f7f4 f9c8 	bl	8000524 <__aeabi_i2d>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f7f4 f874 	bl	8000288 <__aeabi_dsub>
 800c1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1a2:	3330      	adds	r3, #48	; 0x30
 800c1a4:	f805 3b01 	strb.w	r3, [r5], #1
 800c1a8:	ec53 2b18 	vmov	r2, r3, d8
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	f7f4 fc94 	bl	8000adc <__aeabi_dcmplt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d165      	bne.n	800c284 <_dtoa_r+0x63c>
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	4935      	ldr	r1, [pc, #212]	; (800c294 <_dtoa_r+0x64c>)
 800c1be:	2000      	movs	r0, #0
 800c1c0:	f7f4 f862 	bl	8000288 <__aeabi_dsub>
 800c1c4:	ec53 2b18 	vmov	r2, r3, d8
 800c1c8:	f7f4 fc88 	bl	8000adc <__aeabi_dcmplt>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	f040 80b9 	bne.w	800c344 <_dtoa_r+0x6fc>
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	429d      	cmp	r5, r3
 800c1d6:	f43f af75 	beq.w	800c0c4 <_dtoa_r+0x47c>
 800c1da:	4b2f      	ldr	r3, [pc, #188]	; (800c298 <_dtoa_r+0x650>)
 800c1dc:	ec51 0b18 	vmov	r0, r1, d8
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f7f4 fa09 	bl	80005f8 <__aeabi_dmul>
 800c1e6:	4b2c      	ldr	r3, [pc, #176]	; (800c298 <_dtoa_r+0x650>)
 800c1e8:	ec41 0b18 	vmov	d8, r0, r1
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	4639      	mov	r1, r7
 800c1f2:	f7f4 fa01 	bl	80005f8 <__aeabi_dmul>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	e7c4      	b.n	800c186 <_dtoa_r+0x53e>
 800c1fc:	ec51 0b17 	vmov	r0, r1, d7
 800c200:	f7f4 f9fa 	bl	80005f8 <__aeabi_dmul>
 800c204:	9b02      	ldr	r3, [sp, #8]
 800c206:	9d00      	ldr	r5, [sp, #0]
 800c208:	930c      	str	r3, [sp, #48]	; 0x30
 800c20a:	ec41 0b18 	vmov	d8, r0, r1
 800c20e:	4639      	mov	r1, r7
 800c210:	4630      	mov	r0, r6
 800c212:	f7f4 fca1 	bl	8000b58 <__aeabi_d2iz>
 800c216:	9011      	str	r0, [sp, #68]	; 0x44
 800c218:	f7f4 f984 	bl	8000524 <__aeabi_i2d>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4630      	mov	r0, r6
 800c222:	4639      	mov	r1, r7
 800c224:	f7f4 f830 	bl	8000288 <__aeabi_dsub>
 800c228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c22a:	3330      	adds	r3, #48	; 0x30
 800c22c:	f805 3b01 	strb.w	r3, [r5], #1
 800c230:	9b02      	ldr	r3, [sp, #8]
 800c232:	429d      	cmp	r5, r3
 800c234:	4606      	mov	r6, r0
 800c236:	460f      	mov	r7, r1
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	d134      	bne.n	800c2a8 <_dtoa_r+0x660>
 800c23e:	4b19      	ldr	r3, [pc, #100]	; (800c2a4 <_dtoa_r+0x65c>)
 800c240:	ec51 0b18 	vmov	r0, r1, d8
 800c244:	f7f4 f822 	bl	800028c <__adddf3>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4630      	mov	r0, r6
 800c24e:	4639      	mov	r1, r7
 800c250:	f7f4 fc62 	bl	8000b18 <__aeabi_dcmpgt>
 800c254:	2800      	cmp	r0, #0
 800c256:	d175      	bne.n	800c344 <_dtoa_r+0x6fc>
 800c258:	ec53 2b18 	vmov	r2, r3, d8
 800c25c:	4911      	ldr	r1, [pc, #68]	; (800c2a4 <_dtoa_r+0x65c>)
 800c25e:	2000      	movs	r0, #0
 800c260:	f7f4 f812 	bl	8000288 <__aeabi_dsub>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4630      	mov	r0, r6
 800c26a:	4639      	mov	r1, r7
 800c26c:	f7f4 fc36 	bl	8000adc <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	f43f af27 	beq.w	800c0c4 <_dtoa_r+0x47c>
 800c276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c278:	1e6b      	subs	r3, r5, #1
 800c27a:	930c      	str	r3, [sp, #48]	; 0x30
 800c27c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c280:	2b30      	cmp	r3, #48	; 0x30
 800c282:	d0f8      	beq.n	800c276 <_dtoa_r+0x62e>
 800c284:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c288:	e04a      	b.n	800c320 <_dtoa_r+0x6d8>
 800c28a:	bf00      	nop
 800c28c:	0800e870 	.word	0x0800e870
 800c290:	0800e848 	.word	0x0800e848
 800c294:	3ff00000 	.word	0x3ff00000
 800c298:	40240000 	.word	0x40240000
 800c29c:	401c0000 	.word	0x401c0000
 800c2a0:	40140000 	.word	0x40140000
 800c2a4:	3fe00000 	.word	0x3fe00000
 800c2a8:	4baf      	ldr	r3, [pc, #700]	; (800c568 <_dtoa_r+0x920>)
 800c2aa:	f7f4 f9a5 	bl	80005f8 <__aeabi_dmul>
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	460f      	mov	r7, r1
 800c2b2:	e7ac      	b.n	800c20e <_dtoa_r+0x5c6>
 800c2b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2b8:	9d00      	ldr	r5, [sp, #0]
 800c2ba:	4642      	mov	r2, r8
 800c2bc:	464b      	mov	r3, r9
 800c2be:	4630      	mov	r0, r6
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	f7f4 fac3 	bl	800084c <__aeabi_ddiv>
 800c2c6:	f7f4 fc47 	bl	8000b58 <__aeabi_d2iz>
 800c2ca:	9002      	str	r0, [sp, #8]
 800c2cc:	f7f4 f92a 	bl	8000524 <__aeabi_i2d>
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	464b      	mov	r3, r9
 800c2d4:	f7f4 f990 	bl	80005f8 <__aeabi_dmul>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4630      	mov	r0, r6
 800c2de:	4639      	mov	r1, r7
 800c2e0:	f7f3 ffd2 	bl	8000288 <__aeabi_dsub>
 800c2e4:	9e02      	ldr	r6, [sp, #8]
 800c2e6:	9f01      	ldr	r7, [sp, #4]
 800c2e8:	3630      	adds	r6, #48	; 0x30
 800c2ea:	f805 6b01 	strb.w	r6, [r5], #1
 800c2ee:	9e00      	ldr	r6, [sp, #0]
 800c2f0:	1bae      	subs	r6, r5, r6
 800c2f2:	42b7      	cmp	r7, r6
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	d137      	bne.n	800c36a <_dtoa_r+0x722>
 800c2fa:	f7f3 ffc7 	bl	800028c <__adddf3>
 800c2fe:	4642      	mov	r2, r8
 800c300:	464b      	mov	r3, r9
 800c302:	4606      	mov	r6, r0
 800c304:	460f      	mov	r7, r1
 800c306:	f7f4 fc07 	bl	8000b18 <__aeabi_dcmpgt>
 800c30a:	b9c8      	cbnz	r0, 800c340 <_dtoa_r+0x6f8>
 800c30c:	4642      	mov	r2, r8
 800c30e:	464b      	mov	r3, r9
 800c310:	4630      	mov	r0, r6
 800c312:	4639      	mov	r1, r7
 800c314:	f7f4 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c318:	b110      	cbz	r0, 800c320 <_dtoa_r+0x6d8>
 800c31a:	9b02      	ldr	r3, [sp, #8]
 800c31c:	07d9      	lsls	r1, r3, #31
 800c31e:	d40f      	bmi.n	800c340 <_dtoa_r+0x6f8>
 800c320:	4620      	mov	r0, r4
 800c322:	4659      	mov	r1, fp
 800c324:	f000 feda 	bl	800d0dc <_Bfree>
 800c328:	2300      	movs	r3, #0
 800c32a:	702b      	strb	r3, [r5, #0]
 800c32c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c32e:	f10a 0001 	add.w	r0, sl, #1
 800c332:	6018      	str	r0, [r3, #0]
 800c334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c336:	2b00      	cmp	r3, #0
 800c338:	f43f acd8 	beq.w	800bcec <_dtoa_r+0xa4>
 800c33c:	601d      	str	r5, [r3, #0]
 800c33e:	e4d5      	b.n	800bcec <_dtoa_r+0xa4>
 800c340:	f8cd a01c 	str.w	sl, [sp, #28]
 800c344:	462b      	mov	r3, r5
 800c346:	461d      	mov	r5, r3
 800c348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c34c:	2a39      	cmp	r2, #57	; 0x39
 800c34e:	d108      	bne.n	800c362 <_dtoa_r+0x71a>
 800c350:	9a00      	ldr	r2, [sp, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d1f7      	bne.n	800c346 <_dtoa_r+0x6fe>
 800c356:	9a07      	ldr	r2, [sp, #28]
 800c358:	9900      	ldr	r1, [sp, #0]
 800c35a:	3201      	adds	r2, #1
 800c35c:	9207      	str	r2, [sp, #28]
 800c35e:	2230      	movs	r2, #48	; 0x30
 800c360:	700a      	strb	r2, [r1, #0]
 800c362:	781a      	ldrb	r2, [r3, #0]
 800c364:	3201      	adds	r2, #1
 800c366:	701a      	strb	r2, [r3, #0]
 800c368:	e78c      	b.n	800c284 <_dtoa_r+0x63c>
 800c36a:	4b7f      	ldr	r3, [pc, #508]	; (800c568 <_dtoa_r+0x920>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	f7f4 f943 	bl	80005f8 <__aeabi_dmul>
 800c372:	2200      	movs	r2, #0
 800c374:	2300      	movs	r3, #0
 800c376:	4606      	mov	r6, r0
 800c378:	460f      	mov	r7, r1
 800c37a:	f7f4 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d09b      	beq.n	800c2ba <_dtoa_r+0x672>
 800c382:	e7cd      	b.n	800c320 <_dtoa_r+0x6d8>
 800c384:	9a08      	ldr	r2, [sp, #32]
 800c386:	2a00      	cmp	r2, #0
 800c388:	f000 80c4 	beq.w	800c514 <_dtoa_r+0x8cc>
 800c38c:	9a05      	ldr	r2, [sp, #20]
 800c38e:	2a01      	cmp	r2, #1
 800c390:	f300 80a8 	bgt.w	800c4e4 <_dtoa_r+0x89c>
 800c394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c396:	2a00      	cmp	r2, #0
 800c398:	f000 80a0 	beq.w	800c4dc <_dtoa_r+0x894>
 800c39c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3a0:	9e06      	ldr	r6, [sp, #24]
 800c3a2:	4645      	mov	r5, r8
 800c3a4:	9a04      	ldr	r2, [sp, #16]
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	441a      	add	r2, r3
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4498      	add	r8, r3
 800c3ae:	9204      	str	r2, [sp, #16]
 800c3b0:	f000 ff9a 	bl	800d2e8 <__i2b>
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	dd0b      	ble.n	800c3d2 <_dtoa_r+0x78a>
 800c3ba:	9b04      	ldr	r3, [sp, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dd08      	ble.n	800c3d2 <_dtoa_r+0x78a>
 800c3c0:	42ab      	cmp	r3, r5
 800c3c2:	9a04      	ldr	r2, [sp, #16]
 800c3c4:	bfa8      	it	ge
 800c3c6:	462b      	movge	r3, r5
 800c3c8:	eba8 0803 	sub.w	r8, r8, r3
 800c3cc:	1aed      	subs	r5, r5, r3
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	9b06      	ldr	r3, [sp, #24]
 800c3d4:	b1fb      	cbz	r3, 800c416 <_dtoa_r+0x7ce>
 800c3d6:	9b08      	ldr	r3, [sp, #32]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 809f 	beq.w	800c51c <_dtoa_r+0x8d4>
 800c3de:	2e00      	cmp	r6, #0
 800c3e0:	dd11      	ble.n	800c406 <_dtoa_r+0x7be>
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	4632      	mov	r2, r6
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f001 f83a 	bl	800d460 <__pow5mult>
 800c3ec:	465a      	mov	r2, fp
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f000 ff8e 	bl	800d314 <__multiply>
 800c3f8:	4659      	mov	r1, fp
 800c3fa:	9007      	str	r0, [sp, #28]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 fe6d 	bl	800d0dc <_Bfree>
 800c402:	9b07      	ldr	r3, [sp, #28]
 800c404:	469b      	mov	fp, r3
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	1b9a      	subs	r2, r3, r6
 800c40a:	d004      	beq.n	800c416 <_dtoa_r+0x7ce>
 800c40c:	4659      	mov	r1, fp
 800c40e:	4620      	mov	r0, r4
 800c410:	f001 f826 	bl	800d460 <__pow5mult>
 800c414:	4683      	mov	fp, r0
 800c416:	2101      	movs	r1, #1
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 ff65 	bl	800d2e8 <__i2b>
 800c41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c420:	2b00      	cmp	r3, #0
 800c422:	4606      	mov	r6, r0
 800c424:	dd7c      	ble.n	800c520 <_dtoa_r+0x8d8>
 800c426:	461a      	mov	r2, r3
 800c428:	4601      	mov	r1, r0
 800c42a:	4620      	mov	r0, r4
 800c42c:	f001 f818 	bl	800d460 <__pow5mult>
 800c430:	9b05      	ldr	r3, [sp, #20]
 800c432:	2b01      	cmp	r3, #1
 800c434:	4606      	mov	r6, r0
 800c436:	dd76      	ble.n	800c526 <_dtoa_r+0x8de>
 800c438:	2300      	movs	r3, #0
 800c43a:	9306      	str	r3, [sp, #24]
 800c43c:	6933      	ldr	r3, [r6, #16]
 800c43e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c442:	6918      	ldr	r0, [r3, #16]
 800c444:	f000 ff00 	bl	800d248 <__hi0bits>
 800c448:	f1c0 0020 	rsb	r0, r0, #32
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	4418      	add	r0, r3
 800c450:	f010 001f 	ands.w	r0, r0, #31
 800c454:	f000 8086 	beq.w	800c564 <_dtoa_r+0x91c>
 800c458:	f1c0 0320 	rsb	r3, r0, #32
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	dd7f      	ble.n	800c560 <_dtoa_r+0x918>
 800c460:	f1c0 001c 	rsb	r0, r0, #28
 800c464:	9b04      	ldr	r3, [sp, #16]
 800c466:	4403      	add	r3, r0
 800c468:	4480      	add	r8, r0
 800c46a:	4405      	add	r5, r0
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	f1b8 0f00 	cmp.w	r8, #0
 800c472:	dd05      	ble.n	800c480 <_dtoa_r+0x838>
 800c474:	4659      	mov	r1, fp
 800c476:	4642      	mov	r2, r8
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 f84b 	bl	800d514 <__lshift>
 800c47e:	4683      	mov	fp, r0
 800c480:	9b04      	ldr	r3, [sp, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	dd05      	ble.n	800c492 <_dtoa_r+0x84a>
 800c486:	4631      	mov	r1, r6
 800c488:	461a      	mov	r2, r3
 800c48a:	4620      	mov	r0, r4
 800c48c:	f001 f842 	bl	800d514 <__lshift>
 800c490:	4606      	mov	r6, r0
 800c492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c494:	2b00      	cmp	r3, #0
 800c496:	d069      	beq.n	800c56c <_dtoa_r+0x924>
 800c498:	4631      	mov	r1, r6
 800c49a:	4658      	mov	r0, fp
 800c49c:	f001 f8a6 	bl	800d5ec <__mcmp>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	da63      	bge.n	800c56c <_dtoa_r+0x924>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	4659      	mov	r1, fp
 800c4a8:	220a      	movs	r2, #10
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 fe38 	bl	800d120 <__multadd>
 800c4b0:	9b08      	ldr	r3, [sp, #32]
 800c4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4b6:	4683      	mov	fp, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 818f 	beq.w	800c7dc <_dtoa_r+0xb94>
 800c4be:	4639      	mov	r1, r7
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	220a      	movs	r2, #10
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f000 fe2b 	bl	800d120 <__multadd>
 800c4ca:	f1b9 0f00 	cmp.w	r9, #0
 800c4ce:	4607      	mov	r7, r0
 800c4d0:	f300 808e 	bgt.w	800c5f0 <_dtoa_r+0x9a8>
 800c4d4:	9b05      	ldr	r3, [sp, #20]
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	dc50      	bgt.n	800c57c <_dtoa_r+0x934>
 800c4da:	e089      	b.n	800c5f0 <_dtoa_r+0x9a8>
 800c4dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4e2:	e75d      	b.n	800c3a0 <_dtoa_r+0x758>
 800c4e4:	9b01      	ldr	r3, [sp, #4]
 800c4e6:	1e5e      	subs	r6, r3, #1
 800c4e8:	9b06      	ldr	r3, [sp, #24]
 800c4ea:	42b3      	cmp	r3, r6
 800c4ec:	bfbf      	itttt	lt
 800c4ee:	9b06      	ldrlt	r3, [sp, #24]
 800c4f0:	9606      	strlt	r6, [sp, #24]
 800c4f2:	1af2      	sublt	r2, r6, r3
 800c4f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c4f6:	bfb6      	itet	lt
 800c4f8:	189b      	addlt	r3, r3, r2
 800c4fa:	1b9e      	subge	r6, r3, r6
 800c4fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c4fe:	9b01      	ldr	r3, [sp, #4]
 800c500:	bfb8      	it	lt
 800c502:	2600      	movlt	r6, #0
 800c504:	2b00      	cmp	r3, #0
 800c506:	bfb5      	itete	lt
 800c508:	eba8 0503 	sublt.w	r5, r8, r3
 800c50c:	9b01      	ldrge	r3, [sp, #4]
 800c50e:	2300      	movlt	r3, #0
 800c510:	4645      	movge	r5, r8
 800c512:	e747      	b.n	800c3a4 <_dtoa_r+0x75c>
 800c514:	9e06      	ldr	r6, [sp, #24]
 800c516:	9f08      	ldr	r7, [sp, #32]
 800c518:	4645      	mov	r5, r8
 800c51a:	e74c      	b.n	800c3b6 <_dtoa_r+0x76e>
 800c51c:	9a06      	ldr	r2, [sp, #24]
 800c51e:	e775      	b.n	800c40c <_dtoa_r+0x7c4>
 800c520:	9b05      	ldr	r3, [sp, #20]
 800c522:	2b01      	cmp	r3, #1
 800c524:	dc18      	bgt.n	800c558 <_dtoa_r+0x910>
 800c526:	9b02      	ldr	r3, [sp, #8]
 800c528:	b9b3      	cbnz	r3, 800c558 <_dtoa_r+0x910>
 800c52a:	9b03      	ldr	r3, [sp, #12]
 800c52c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c530:	b9a3      	cbnz	r3, 800c55c <_dtoa_r+0x914>
 800c532:	9b03      	ldr	r3, [sp, #12]
 800c534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c538:	0d1b      	lsrs	r3, r3, #20
 800c53a:	051b      	lsls	r3, r3, #20
 800c53c:	b12b      	cbz	r3, 800c54a <_dtoa_r+0x902>
 800c53e:	9b04      	ldr	r3, [sp, #16]
 800c540:	3301      	adds	r3, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	f108 0801 	add.w	r8, r8, #1
 800c548:	2301      	movs	r3, #1
 800c54a:	9306      	str	r3, [sp, #24]
 800c54c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f47f af74 	bne.w	800c43c <_dtoa_r+0x7f4>
 800c554:	2001      	movs	r0, #1
 800c556:	e779      	b.n	800c44c <_dtoa_r+0x804>
 800c558:	2300      	movs	r3, #0
 800c55a:	e7f6      	b.n	800c54a <_dtoa_r+0x902>
 800c55c:	9b02      	ldr	r3, [sp, #8]
 800c55e:	e7f4      	b.n	800c54a <_dtoa_r+0x902>
 800c560:	d085      	beq.n	800c46e <_dtoa_r+0x826>
 800c562:	4618      	mov	r0, r3
 800c564:	301c      	adds	r0, #28
 800c566:	e77d      	b.n	800c464 <_dtoa_r+0x81c>
 800c568:	40240000 	.word	0x40240000
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	dc38      	bgt.n	800c5e4 <_dtoa_r+0x99c>
 800c572:	9b05      	ldr	r3, [sp, #20]
 800c574:	2b02      	cmp	r3, #2
 800c576:	dd35      	ble.n	800c5e4 <_dtoa_r+0x99c>
 800c578:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c57c:	f1b9 0f00 	cmp.w	r9, #0
 800c580:	d10d      	bne.n	800c59e <_dtoa_r+0x956>
 800c582:	4631      	mov	r1, r6
 800c584:	464b      	mov	r3, r9
 800c586:	2205      	movs	r2, #5
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fdc9 	bl	800d120 <__multadd>
 800c58e:	4601      	mov	r1, r0
 800c590:	4606      	mov	r6, r0
 800c592:	4658      	mov	r0, fp
 800c594:	f001 f82a 	bl	800d5ec <__mcmp>
 800c598:	2800      	cmp	r0, #0
 800c59a:	f73f adbd 	bgt.w	800c118 <_dtoa_r+0x4d0>
 800c59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a0:	9d00      	ldr	r5, [sp, #0]
 800c5a2:	ea6f 0a03 	mvn.w	sl, r3
 800c5a6:	f04f 0800 	mov.w	r8, #0
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f000 fd95 	bl	800d0dc <_Bfree>
 800c5b2:	2f00      	cmp	r7, #0
 800c5b4:	f43f aeb4 	beq.w	800c320 <_dtoa_r+0x6d8>
 800c5b8:	f1b8 0f00 	cmp.w	r8, #0
 800c5bc:	d005      	beq.n	800c5ca <_dtoa_r+0x982>
 800c5be:	45b8      	cmp	r8, r7
 800c5c0:	d003      	beq.n	800c5ca <_dtoa_r+0x982>
 800c5c2:	4641      	mov	r1, r8
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f000 fd89 	bl	800d0dc <_Bfree>
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 fd85 	bl	800d0dc <_Bfree>
 800c5d2:	e6a5      	b.n	800c320 <_dtoa_r+0x6d8>
 800c5d4:	2600      	movs	r6, #0
 800c5d6:	4637      	mov	r7, r6
 800c5d8:	e7e1      	b.n	800c59e <_dtoa_r+0x956>
 800c5da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c5dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c5e0:	4637      	mov	r7, r6
 800c5e2:	e599      	b.n	800c118 <_dtoa_r+0x4d0>
 800c5e4:	9b08      	ldr	r3, [sp, #32]
 800c5e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80fd 	beq.w	800c7ea <_dtoa_r+0xba2>
 800c5f0:	2d00      	cmp	r5, #0
 800c5f2:	dd05      	ble.n	800c600 <_dtoa_r+0x9b8>
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f000 ff8b 	bl	800d514 <__lshift>
 800c5fe:	4607      	mov	r7, r0
 800c600:	9b06      	ldr	r3, [sp, #24]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d05c      	beq.n	800c6c0 <_dtoa_r+0xa78>
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	4620      	mov	r0, r4
 800c60a:	f000 fd27 	bl	800d05c <_Balloc>
 800c60e:	4605      	mov	r5, r0
 800c610:	b928      	cbnz	r0, 800c61e <_dtoa_r+0x9d6>
 800c612:	4b80      	ldr	r3, [pc, #512]	; (800c814 <_dtoa_r+0xbcc>)
 800c614:	4602      	mov	r2, r0
 800c616:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c61a:	f7ff bb2e 	b.w	800bc7a <_dtoa_r+0x32>
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	3202      	adds	r2, #2
 800c622:	0092      	lsls	r2, r2, #2
 800c624:	f107 010c 	add.w	r1, r7, #12
 800c628:	300c      	adds	r0, #12
 800c62a:	f000 fcfd 	bl	800d028 <memcpy>
 800c62e:	2201      	movs	r2, #1
 800c630:	4629      	mov	r1, r5
 800c632:	4620      	mov	r0, r4
 800c634:	f000 ff6e 	bl	800d514 <__lshift>
 800c638:	9b00      	ldr	r3, [sp, #0]
 800c63a:	3301      	adds	r3, #1
 800c63c:	9301      	str	r3, [sp, #4]
 800c63e:	9b00      	ldr	r3, [sp, #0]
 800c640:	444b      	add	r3, r9
 800c642:	9307      	str	r3, [sp, #28]
 800c644:	9b02      	ldr	r3, [sp, #8]
 800c646:	f003 0301 	and.w	r3, r3, #1
 800c64a:	46b8      	mov	r8, r7
 800c64c:	9306      	str	r3, [sp, #24]
 800c64e:	4607      	mov	r7, r0
 800c650:	9b01      	ldr	r3, [sp, #4]
 800c652:	4631      	mov	r1, r6
 800c654:	3b01      	subs	r3, #1
 800c656:	4658      	mov	r0, fp
 800c658:	9302      	str	r3, [sp, #8]
 800c65a:	f7ff fa69 	bl	800bb30 <quorem>
 800c65e:	4603      	mov	r3, r0
 800c660:	3330      	adds	r3, #48	; 0x30
 800c662:	9004      	str	r0, [sp, #16]
 800c664:	4641      	mov	r1, r8
 800c666:	4658      	mov	r0, fp
 800c668:	9308      	str	r3, [sp, #32]
 800c66a:	f000 ffbf 	bl	800d5ec <__mcmp>
 800c66e:	463a      	mov	r2, r7
 800c670:	4681      	mov	r9, r0
 800c672:	4631      	mov	r1, r6
 800c674:	4620      	mov	r0, r4
 800c676:	f000 ffd5 	bl	800d624 <__mdiff>
 800c67a:	68c2      	ldr	r2, [r0, #12]
 800c67c:	9b08      	ldr	r3, [sp, #32]
 800c67e:	4605      	mov	r5, r0
 800c680:	bb02      	cbnz	r2, 800c6c4 <_dtoa_r+0xa7c>
 800c682:	4601      	mov	r1, r0
 800c684:	4658      	mov	r0, fp
 800c686:	f000 ffb1 	bl	800d5ec <__mcmp>
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	4602      	mov	r2, r0
 800c68e:	4629      	mov	r1, r5
 800c690:	4620      	mov	r0, r4
 800c692:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c696:	f000 fd21 	bl	800d0dc <_Bfree>
 800c69a:	9b05      	ldr	r3, [sp, #20]
 800c69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c69e:	9d01      	ldr	r5, [sp, #4]
 800c6a0:	ea43 0102 	orr.w	r1, r3, r2
 800c6a4:	9b06      	ldr	r3, [sp, #24]
 800c6a6:	430b      	orrs	r3, r1
 800c6a8:	9b08      	ldr	r3, [sp, #32]
 800c6aa:	d10d      	bne.n	800c6c8 <_dtoa_r+0xa80>
 800c6ac:	2b39      	cmp	r3, #57	; 0x39
 800c6ae:	d029      	beq.n	800c704 <_dtoa_r+0xabc>
 800c6b0:	f1b9 0f00 	cmp.w	r9, #0
 800c6b4:	dd01      	ble.n	800c6ba <_dtoa_r+0xa72>
 800c6b6:	9b04      	ldr	r3, [sp, #16]
 800c6b8:	3331      	adds	r3, #49	; 0x31
 800c6ba:	9a02      	ldr	r2, [sp, #8]
 800c6bc:	7013      	strb	r3, [r2, #0]
 800c6be:	e774      	b.n	800c5aa <_dtoa_r+0x962>
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	e7b9      	b.n	800c638 <_dtoa_r+0x9f0>
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	e7e2      	b.n	800c68e <_dtoa_r+0xa46>
 800c6c8:	f1b9 0f00 	cmp.w	r9, #0
 800c6cc:	db06      	blt.n	800c6dc <_dtoa_r+0xa94>
 800c6ce:	9905      	ldr	r1, [sp, #20]
 800c6d0:	ea41 0909 	orr.w	r9, r1, r9
 800c6d4:	9906      	ldr	r1, [sp, #24]
 800c6d6:	ea59 0101 	orrs.w	r1, r9, r1
 800c6da:	d120      	bne.n	800c71e <_dtoa_r+0xad6>
 800c6dc:	2a00      	cmp	r2, #0
 800c6de:	ddec      	ble.n	800c6ba <_dtoa_r+0xa72>
 800c6e0:	4659      	mov	r1, fp
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	f000 ff14 	bl	800d514 <__lshift>
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	4683      	mov	fp, r0
 800c6f0:	f000 ff7c 	bl	800d5ec <__mcmp>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	dc02      	bgt.n	800c700 <_dtoa_r+0xab8>
 800c6fa:	d1de      	bne.n	800c6ba <_dtoa_r+0xa72>
 800c6fc:	07da      	lsls	r2, r3, #31
 800c6fe:	d5dc      	bpl.n	800c6ba <_dtoa_r+0xa72>
 800c700:	2b39      	cmp	r3, #57	; 0x39
 800c702:	d1d8      	bne.n	800c6b6 <_dtoa_r+0xa6e>
 800c704:	9a02      	ldr	r2, [sp, #8]
 800c706:	2339      	movs	r3, #57	; 0x39
 800c708:	7013      	strb	r3, [r2, #0]
 800c70a:	462b      	mov	r3, r5
 800c70c:	461d      	mov	r5, r3
 800c70e:	3b01      	subs	r3, #1
 800c710:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c714:	2a39      	cmp	r2, #57	; 0x39
 800c716:	d050      	beq.n	800c7ba <_dtoa_r+0xb72>
 800c718:	3201      	adds	r2, #1
 800c71a:	701a      	strb	r2, [r3, #0]
 800c71c:	e745      	b.n	800c5aa <_dtoa_r+0x962>
 800c71e:	2a00      	cmp	r2, #0
 800c720:	dd03      	ble.n	800c72a <_dtoa_r+0xae2>
 800c722:	2b39      	cmp	r3, #57	; 0x39
 800c724:	d0ee      	beq.n	800c704 <_dtoa_r+0xabc>
 800c726:	3301      	adds	r3, #1
 800c728:	e7c7      	b.n	800c6ba <_dtoa_r+0xa72>
 800c72a:	9a01      	ldr	r2, [sp, #4]
 800c72c:	9907      	ldr	r1, [sp, #28]
 800c72e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c732:	428a      	cmp	r2, r1
 800c734:	d02a      	beq.n	800c78c <_dtoa_r+0xb44>
 800c736:	4659      	mov	r1, fp
 800c738:	2300      	movs	r3, #0
 800c73a:	220a      	movs	r2, #10
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 fcef 	bl	800d120 <__multadd>
 800c742:	45b8      	cmp	r8, r7
 800c744:	4683      	mov	fp, r0
 800c746:	f04f 0300 	mov.w	r3, #0
 800c74a:	f04f 020a 	mov.w	r2, #10
 800c74e:	4641      	mov	r1, r8
 800c750:	4620      	mov	r0, r4
 800c752:	d107      	bne.n	800c764 <_dtoa_r+0xb1c>
 800c754:	f000 fce4 	bl	800d120 <__multadd>
 800c758:	4680      	mov	r8, r0
 800c75a:	4607      	mov	r7, r0
 800c75c:	9b01      	ldr	r3, [sp, #4]
 800c75e:	3301      	adds	r3, #1
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	e775      	b.n	800c650 <_dtoa_r+0xa08>
 800c764:	f000 fcdc 	bl	800d120 <__multadd>
 800c768:	4639      	mov	r1, r7
 800c76a:	4680      	mov	r8, r0
 800c76c:	2300      	movs	r3, #0
 800c76e:	220a      	movs	r2, #10
 800c770:	4620      	mov	r0, r4
 800c772:	f000 fcd5 	bl	800d120 <__multadd>
 800c776:	4607      	mov	r7, r0
 800c778:	e7f0      	b.n	800c75c <_dtoa_r+0xb14>
 800c77a:	f1b9 0f00 	cmp.w	r9, #0
 800c77e:	9a00      	ldr	r2, [sp, #0]
 800c780:	bfcc      	ite	gt
 800c782:	464d      	movgt	r5, r9
 800c784:	2501      	movle	r5, #1
 800c786:	4415      	add	r5, r2
 800c788:	f04f 0800 	mov.w	r8, #0
 800c78c:	4659      	mov	r1, fp
 800c78e:	2201      	movs	r2, #1
 800c790:	4620      	mov	r0, r4
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	f000 febe 	bl	800d514 <__lshift>
 800c798:	4631      	mov	r1, r6
 800c79a:	4683      	mov	fp, r0
 800c79c:	f000 ff26 	bl	800d5ec <__mcmp>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	dcb2      	bgt.n	800c70a <_dtoa_r+0xac2>
 800c7a4:	d102      	bne.n	800c7ac <_dtoa_r+0xb64>
 800c7a6:	9b01      	ldr	r3, [sp, #4]
 800c7a8:	07db      	lsls	r3, r3, #31
 800c7aa:	d4ae      	bmi.n	800c70a <_dtoa_r+0xac2>
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	461d      	mov	r5, r3
 800c7b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7b4:	2a30      	cmp	r2, #48	; 0x30
 800c7b6:	d0fa      	beq.n	800c7ae <_dtoa_r+0xb66>
 800c7b8:	e6f7      	b.n	800c5aa <_dtoa_r+0x962>
 800c7ba:	9a00      	ldr	r2, [sp, #0]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d1a5      	bne.n	800c70c <_dtoa_r+0xac4>
 800c7c0:	f10a 0a01 	add.w	sl, sl, #1
 800c7c4:	2331      	movs	r3, #49	; 0x31
 800c7c6:	e779      	b.n	800c6bc <_dtoa_r+0xa74>
 800c7c8:	4b13      	ldr	r3, [pc, #76]	; (800c818 <_dtoa_r+0xbd0>)
 800c7ca:	f7ff baaf 	b.w	800bd2c <_dtoa_r+0xe4>
 800c7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f47f aa86 	bne.w	800bce2 <_dtoa_r+0x9a>
 800c7d6:	4b11      	ldr	r3, [pc, #68]	; (800c81c <_dtoa_r+0xbd4>)
 800c7d8:	f7ff baa8 	b.w	800bd2c <_dtoa_r+0xe4>
 800c7dc:	f1b9 0f00 	cmp.w	r9, #0
 800c7e0:	dc03      	bgt.n	800c7ea <_dtoa_r+0xba2>
 800c7e2:	9b05      	ldr	r3, [sp, #20]
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	f73f aec9 	bgt.w	800c57c <_dtoa_r+0x934>
 800c7ea:	9d00      	ldr	r5, [sp, #0]
 800c7ec:	4631      	mov	r1, r6
 800c7ee:	4658      	mov	r0, fp
 800c7f0:	f7ff f99e 	bl	800bb30 <quorem>
 800c7f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c7f8:	f805 3b01 	strb.w	r3, [r5], #1
 800c7fc:	9a00      	ldr	r2, [sp, #0]
 800c7fe:	1aaa      	subs	r2, r5, r2
 800c800:	4591      	cmp	r9, r2
 800c802:	ddba      	ble.n	800c77a <_dtoa_r+0xb32>
 800c804:	4659      	mov	r1, fp
 800c806:	2300      	movs	r3, #0
 800c808:	220a      	movs	r2, #10
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 fc88 	bl	800d120 <__multadd>
 800c810:	4683      	mov	fp, r0
 800c812:	e7eb      	b.n	800c7ec <_dtoa_r+0xba4>
 800c814:	0800e754 	.word	0x0800e754
 800c818:	0800e550 	.word	0x0800e550
 800c81c:	0800e6d1 	.word	0x0800e6d1

0800c820 <rshift>:
 800c820:	6903      	ldr	r3, [r0, #16]
 800c822:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c82a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c82e:	f100 0414 	add.w	r4, r0, #20
 800c832:	dd45      	ble.n	800c8c0 <rshift+0xa0>
 800c834:	f011 011f 	ands.w	r1, r1, #31
 800c838:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c83c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c840:	d10c      	bne.n	800c85c <rshift+0x3c>
 800c842:	f100 0710 	add.w	r7, r0, #16
 800c846:	4629      	mov	r1, r5
 800c848:	42b1      	cmp	r1, r6
 800c84a:	d334      	bcc.n	800c8b6 <rshift+0x96>
 800c84c:	1a9b      	subs	r3, r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	1eea      	subs	r2, r5, #3
 800c852:	4296      	cmp	r6, r2
 800c854:	bf38      	it	cc
 800c856:	2300      	movcc	r3, #0
 800c858:	4423      	add	r3, r4
 800c85a:	e015      	b.n	800c888 <rshift+0x68>
 800c85c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c860:	f1c1 0820 	rsb	r8, r1, #32
 800c864:	40cf      	lsrs	r7, r1
 800c866:	f105 0e04 	add.w	lr, r5, #4
 800c86a:	46a1      	mov	r9, r4
 800c86c:	4576      	cmp	r6, lr
 800c86e:	46f4      	mov	ip, lr
 800c870:	d815      	bhi.n	800c89e <rshift+0x7e>
 800c872:	1a9b      	subs	r3, r3, r2
 800c874:	009a      	lsls	r2, r3, #2
 800c876:	3a04      	subs	r2, #4
 800c878:	3501      	adds	r5, #1
 800c87a:	42ae      	cmp	r6, r5
 800c87c:	bf38      	it	cc
 800c87e:	2200      	movcc	r2, #0
 800c880:	18a3      	adds	r3, r4, r2
 800c882:	50a7      	str	r7, [r4, r2]
 800c884:	b107      	cbz	r7, 800c888 <rshift+0x68>
 800c886:	3304      	adds	r3, #4
 800c888:	1b1a      	subs	r2, r3, r4
 800c88a:	42a3      	cmp	r3, r4
 800c88c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c890:	bf08      	it	eq
 800c892:	2300      	moveq	r3, #0
 800c894:	6102      	str	r2, [r0, #16]
 800c896:	bf08      	it	eq
 800c898:	6143      	streq	r3, [r0, #20]
 800c89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c89e:	f8dc c000 	ldr.w	ip, [ip]
 800c8a2:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8a6:	ea4c 0707 	orr.w	r7, ip, r7
 800c8aa:	f849 7b04 	str.w	r7, [r9], #4
 800c8ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8b2:	40cf      	lsrs	r7, r1
 800c8b4:	e7da      	b.n	800c86c <rshift+0x4c>
 800c8b6:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8ba:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8be:	e7c3      	b.n	800c848 <rshift+0x28>
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	e7e1      	b.n	800c888 <rshift+0x68>

0800c8c4 <__hexdig_fun>:
 800c8c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8c8:	2b09      	cmp	r3, #9
 800c8ca:	d802      	bhi.n	800c8d2 <__hexdig_fun+0xe>
 800c8cc:	3820      	subs	r0, #32
 800c8ce:	b2c0      	uxtb	r0, r0
 800c8d0:	4770      	bx	lr
 800c8d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8d6:	2b05      	cmp	r3, #5
 800c8d8:	d801      	bhi.n	800c8de <__hexdig_fun+0x1a>
 800c8da:	3847      	subs	r0, #71	; 0x47
 800c8dc:	e7f7      	b.n	800c8ce <__hexdig_fun+0xa>
 800c8de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c8e2:	2b05      	cmp	r3, #5
 800c8e4:	d801      	bhi.n	800c8ea <__hexdig_fun+0x26>
 800c8e6:	3827      	subs	r0, #39	; 0x27
 800c8e8:	e7f1      	b.n	800c8ce <__hexdig_fun+0xa>
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <__gethex>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	ed2d 8b02 	vpush	{d8}
 800c8f8:	b089      	sub	sp, #36	; 0x24
 800c8fa:	ee08 0a10 	vmov	s16, r0
 800c8fe:	9304      	str	r3, [sp, #16]
 800c900:	4bbc      	ldr	r3, [pc, #752]	; (800cbf4 <__gethex+0x304>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	4618      	mov	r0, r3
 800c908:	468b      	mov	fp, r1
 800c90a:	4690      	mov	r8, r2
 800c90c:	f7f3 fc60 	bl	80001d0 <strlen>
 800c910:	9b01      	ldr	r3, [sp, #4]
 800c912:	f8db 2000 	ldr.w	r2, [fp]
 800c916:	4403      	add	r3, r0
 800c918:	4682      	mov	sl, r0
 800c91a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c91e:	9305      	str	r3, [sp, #20]
 800c920:	1c93      	adds	r3, r2, #2
 800c922:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c926:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c92a:	32fe      	adds	r2, #254	; 0xfe
 800c92c:	18d1      	adds	r1, r2, r3
 800c92e:	461f      	mov	r7, r3
 800c930:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c934:	9100      	str	r1, [sp, #0]
 800c936:	2830      	cmp	r0, #48	; 0x30
 800c938:	d0f8      	beq.n	800c92c <__gethex+0x3c>
 800c93a:	f7ff ffc3 	bl	800c8c4 <__hexdig_fun>
 800c93e:	4604      	mov	r4, r0
 800c940:	2800      	cmp	r0, #0
 800c942:	d13a      	bne.n	800c9ba <__gethex+0xca>
 800c944:	9901      	ldr	r1, [sp, #4]
 800c946:	4652      	mov	r2, sl
 800c948:	4638      	mov	r0, r7
 800c94a:	f001 fb21 	bl	800df90 <strncmp>
 800c94e:	4605      	mov	r5, r0
 800c950:	2800      	cmp	r0, #0
 800c952:	d168      	bne.n	800ca26 <__gethex+0x136>
 800c954:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c958:	eb07 060a 	add.w	r6, r7, sl
 800c95c:	f7ff ffb2 	bl	800c8c4 <__hexdig_fun>
 800c960:	2800      	cmp	r0, #0
 800c962:	d062      	beq.n	800ca2a <__gethex+0x13a>
 800c964:	4633      	mov	r3, r6
 800c966:	7818      	ldrb	r0, [r3, #0]
 800c968:	2830      	cmp	r0, #48	; 0x30
 800c96a:	461f      	mov	r7, r3
 800c96c:	f103 0301 	add.w	r3, r3, #1
 800c970:	d0f9      	beq.n	800c966 <__gethex+0x76>
 800c972:	f7ff ffa7 	bl	800c8c4 <__hexdig_fun>
 800c976:	2301      	movs	r3, #1
 800c978:	fab0 f480 	clz	r4, r0
 800c97c:	0964      	lsrs	r4, r4, #5
 800c97e:	4635      	mov	r5, r6
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	463a      	mov	r2, r7
 800c984:	4616      	mov	r6, r2
 800c986:	3201      	adds	r2, #1
 800c988:	7830      	ldrb	r0, [r6, #0]
 800c98a:	f7ff ff9b 	bl	800c8c4 <__hexdig_fun>
 800c98e:	2800      	cmp	r0, #0
 800c990:	d1f8      	bne.n	800c984 <__gethex+0x94>
 800c992:	9901      	ldr	r1, [sp, #4]
 800c994:	4652      	mov	r2, sl
 800c996:	4630      	mov	r0, r6
 800c998:	f001 fafa 	bl	800df90 <strncmp>
 800c99c:	b980      	cbnz	r0, 800c9c0 <__gethex+0xd0>
 800c99e:	b94d      	cbnz	r5, 800c9b4 <__gethex+0xc4>
 800c9a0:	eb06 050a 	add.w	r5, r6, sl
 800c9a4:	462a      	mov	r2, r5
 800c9a6:	4616      	mov	r6, r2
 800c9a8:	3201      	adds	r2, #1
 800c9aa:	7830      	ldrb	r0, [r6, #0]
 800c9ac:	f7ff ff8a 	bl	800c8c4 <__hexdig_fun>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d1f8      	bne.n	800c9a6 <__gethex+0xb6>
 800c9b4:	1bad      	subs	r5, r5, r6
 800c9b6:	00ad      	lsls	r5, r5, #2
 800c9b8:	e004      	b.n	800c9c4 <__gethex+0xd4>
 800c9ba:	2400      	movs	r4, #0
 800c9bc:	4625      	mov	r5, r4
 800c9be:	e7e0      	b.n	800c982 <__gethex+0x92>
 800c9c0:	2d00      	cmp	r5, #0
 800c9c2:	d1f7      	bne.n	800c9b4 <__gethex+0xc4>
 800c9c4:	7833      	ldrb	r3, [r6, #0]
 800c9c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9ca:	2b50      	cmp	r3, #80	; 0x50
 800c9cc:	d13b      	bne.n	800ca46 <__gethex+0x156>
 800c9ce:	7873      	ldrb	r3, [r6, #1]
 800c9d0:	2b2b      	cmp	r3, #43	; 0x2b
 800c9d2:	d02c      	beq.n	800ca2e <__gethex+0x13e>
 800c9d4:	2b2d      	cmp	r3, #45	; 0x2d
 800c9d6:	d02e      	beq.n	800ca36 <__gethex+0x146>
 800c9d8:	1c71      	adds	r1, r6, #1
 800c9da:	f04f 0900 	mov.w	r9, #0
 800c9de:	7808      	ldrb	r0, [r1, #0]
 800c9e0:	f7ff ff70 	bl	800c8c4 <__hexdig_fun>
 800c9e4:	1e43      	subs	r3, r0, #1
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b18      	cmp	r3, #24
 800c9ea:	d82c      	bhi.n	800ca46 <__gethex+0x156>
 800c9ec:	f1a0 0210 	sub.w	r2, r0, #16
 800c9f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9f4:	f7ff ff66 	bl	800c8c4 <__hexdig_fun>
 800c9f8:	1e43      	subs	r3, r0, #1
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b18      	cmp	r3, #24
 800c9fe:	d91d      	bls.n	800ca3c <__gethex+0x14c>
 800ca00:	f1b9 0f00 	cmp.w	r9, #0
 800ca04:	d000      	beq.n	800ca08 <__gethex+0x118>
 800ca06:	4252      	negs	r2, r2
 800ca08:	4415      	add	r5, r2
 800ca0a:	f8cb 1000 	str.w	r1, [fp]
 800ca0e:	b1e4      	cbz	r4, 800ca4a <__gethex+0x15a>
 800ca10:	9b00      	ldr	r3, [sp, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	bf14      	ite	ne
 800ca16:	2700      	movne	r7, #0
 800ca18:	2706      	moveq	r7, #6
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	b009      	add	sp, #36	; 0x24
 800ca1e:	ecbd 8b02 	vpop	{d8}
 800ca22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca26:	463e      	mov	r6, r7
 800ca28:	4625      	mov	r5, r4
 800ca2a:	2401      	movs	r4, #1
 800ca2c:	e7ca      	b.n	800c9c4 <__gethex+0xd4>
 800ca2e:	f04f 0900 	mov.w	r9, #0
 800ca32:	1cb1      	adds	r1, r6, #2
 800ca34:	e7d3      	b.n	800c9de <__gethex+0xee>
 800ca36:	f04f 0901 	mov.w	r9, #1
 800ca3a:	e7fa      	b.n	800ca32 <__gethex+0x142>
 800ca3c:	230a      	movs	r3, #10
 800ca3e:	fb03 0202 	mla	r2, r3, r2, r0
 800ca42:	3a10      	subs	r2, #16
 800ca44:	e7d4      	b.n	800c9f0 <__gethex+0x100>
 800ca46:	4631      	mov	r1, r6
 800ca48:	e7df      	b.n	800ca0a <__gethex+0x11a>
 800ca4a:	1bf3      	subs	r3, r6, r7
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	4621      	mov	r1, r4
 800ca50:	2b07      	cmp	r3, #7
 800ca52:	dc0b      	bgt.n	800ca6c <__gethex+0x17c>
 800ca54:	ee18 0a10 	vmov	r0, s16
 800ca58:	f000 fb00 	bl	800d05c <_Balloc>
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	b940      	cbnz	r0, 800ca72 <__gethex+0x182>
 800ca60:	4b65      	ldr	r3, [pc, #404]	; (800cbf8 <__gethex+0x308>)
 800ca62:	4602      	mov	r2, r0
 800ca64:	21de      	movs	r1, #222	; 0xde
 800ca66:	4865      	ldr	r0, [pc, #404]	; (800cbfc <__gethex+0x30c>)
 800ca68:	f001 fb72 	bl	800e150 <__assert_func>
 800ca6c:	3101      	adds	r1, #1
 800ca6e:	105b      	asrs	r3, r3, #1
 800ca70:	e7ee      	b.n	800ca50 <__gethex+0x160>
 800ca72:	f100 0914 	add.w	r9, r0, #20
 800ca76:	f04f 0b00 	mov.w	fp, #0
 800ca7a:	f1ca 0301 	rsb	r3, sl, #1
 800ca7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca82:	f8cd b000 	str.w	fp, [sp]
 800ca86:	9306      	str	r3, [sp, #24]
 800ca88:	42b7      	cmp	r7, r6
 800ca8a:	d340      	bcc.n	800cb0e <__gethex+0x21e>
 800ca8c:	9802      	ldr	r0, [sp, #8]
 800ca8e:	9b00      	ldr	r3, [sp, #0]
 800ca90:	f840 3b04 	str.w	r3, [r0], #4
 800ca94:	eba0 0009 	sub.w	r0, r0, r9
 800ca98:	1080      	asrs	r0, r0, #2
 800ca9a:	0146      	lsls	r6, r0, #5
 800ca9c:	6120      	str	r0, [r4, #16]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 fbd2 	bl	800d248 <__hi0bits>
 800caa4:	1a30      	subs	r0, r6, r0
 800caa6:	f8d8 6000 	ldr.w	r6, [r8]
 800caaa:	42b0      	cmp	r0, r6
 800caac:	dd63      	ble.n	800cb76 <__gethex+0x286>
 800caae:	1b87      	subs	r7, r0, r6
 800cab0:	4639      	mov	r1, r7
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 ff6c 	bl	800d990 <__any_on>
 800cab8:	4682      	mov	sl, r0
 800caba:	b1a8      	cbz	r0, 800cae8 <__gethex+0x1f8>
 800cabc:	1e7b      	subs	r3, r7, #1
 800cabe:	1159      	asrs	r1, r3, #5
 800cac0:	f003 021f 	and.w	r2, r3, #31
 800cac4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cac8:	f04f 0a01 	mov.w	sl, #1
 800cacc:	fa0a f202 	lsl.w	r2, sl, r2
 800cad0:	420a      	tst	r2, r1
 800cad2:	d009      	beq.n	800cae8 <__gethex+0x1f8>
 800cad4:	4553      	cmp	r3, sl
 800cad6:	dd05      	ble.n	800cae4 <__gethex+0x1f4>
 800cad8:	1eb9      	subs	r1, r7, #2
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 ff58 	bl	800d990 <__any_on>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d145      	bne.n	800cb70 <__gethex+0x280>
 800cae4:	f04f 0a02 	mov.w	sl, #2
 800cae8:	4639      	mov	r1, r7
 800caea:	4620      	mov	r0, r4
 800caec:	f7ff fe98 	bl	800c820 <rshift>
 800caf0:	443d      	add	r5, r7
 800caf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800caf6:	42ab      	cmp	r3, r5
 800caf8:	da4c      	bge.n	800cb94 <__gethex+0x2a4>
 800cafa:	ee18 0a10 	vmov	r0, s16
 800cafe:	4621      	mov	r1, r4
 800cb00:	f000 faec 	bl	800d0dc <_Bfree>
 800cb04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb06:	2300      	movs	r3, #0
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	27a3      	movs	r7, #163	; 0xa3
 800cb0c:	e785      	b.n	800ca1a <__gethex+0x12a>
 800cb0e:	1e73      	subs	r3, r6, #1
 800cb10:	9a05      	ldr	r2, [sp, #20]
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d019      	beq.n	800cb50 <__gethex+0x260>
 800cb1c:	f1bb 0f20 	cmp.w	fp, #32
 800cb20:	d107      	bne.n	800cb32 <__gethex+0x242>
 800cb22:	9b02      	ldr	r3, [sp, #8]
 800cb24:	9a00      	ldr	r2, [sp, #0]
 800cb26:	f843 2b04 	str.w	r2, [r3], #4
 800cb2a:	9302      	str	r3, [sp, #8]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	469b      	mov	fp, r3
 800cb32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb36:	f7ff fec5 	bl	800c8c4 <__hexdig_fun>
 800cb3a:	9b00      	ldr	r3, [sp, #0]
 800cb3c:	f000 000f 	and.w	r0, r0, #15
 800cb40:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb44:	4303      	orrs	r3, r0
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	f10b 0b04 	add.w	fp, fp, #4
 800cb4c:	9b03      	ldr	r3, [sp, #12]
 800cb4e:	e00d      	b.n	800cb6c <__gethex+0x27c>
 800cb50:	9b03      	ldr	r3, [sp, #12]
 800cb52:	9a06      	ldr	r2, [sp, #24]
 800cb54:	4413      	add	r3, r2
 800cb56:	42bb      	cmp	r3, r7
 800cb58:	d3e0      	bcc.n	800cb1c <__gethex+0x22c>
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	9901      	ldr	r1, [sp, #4]
 800cb5e:	9307      	str	r3, [sp, #28]
 800cb60:	4652      	mov	r2, sl
 800cb62:	f001 fa15 	bl	800df90 <strncmp>
 800cb66:	9b07      	ldr	r3, [sp, #28]
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d1d7      	bne.n	800cb1c <__gethex+0x22c>
 800cb6c:	461e      	mov	r6, r3
 800cb6e:	e78b      	b.n	800ca88 <__gethex+0x198>
 800cb70:	f04f 0a03 	mov.w	sl, #3
 800cb74:	e7b8      	b.n	800cae8 <__gethex+0x1f8>
 800cb76:	da0a      	bge.n	800cb8e <__gethex+0x29e>
 800cb78:	1a37      	subs	r7, r6, r0
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	ee18 0a10 	vmov	r0, s16
 800cb80:	463a      	mov	r2, r7
 800cb82:	f000 fcc7 	bl	800d514 <__lshift>
 800cb86:	1bed      	subs	r5, r5, r7
 800cb88:	4604      	mov	r4, r0
 800cb8a:	f100 0914 	add.w	r9, r0, #20
 800cb8e:	f04f 0a00 	mov.w	sl, #0
 800cb92:	e7ae      	b.n	800caf2 <__gethex+0x202>
 800cb94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb98:	42a8      	cmp	r0, r5
 800cb9a:	dd72      	ble.n	800cc82 <__gethex+0x392>
 800cb9c:	1b45      	subs	r5, r0, r5
 800cb9e:	42ae      	cmp	r6, r5
 800cba0:	dc36      	bgt.n	800cc10 <__gethex+0x320>
 800cba2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d02a      	beq.n	800cc00 <__gethex+0x310>
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	d02c      	beq.n	800cc08 <__gethex+0x318>
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d115      	bne.n	800cbde <__gethex+0x2ee>
 800cbb2:	42ae      	cmp	r6, r5
 800cbb4:	d113      	bne.n	800cbde <__gethex+0x2ee>
 800cbb6:	2e01      	cmp	r6, #1
 800cbb8:	d10b      	bne.n	800cbd2 <__gethex+0x2e2>
 800cbba:	9a04      	ldr	r2, [sp, #16]
 800cbbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	6123      	str	r3, [r4, #16]
 800cbc6:	f8c9 3000 	str.w	r3, [r9]
 800cbca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbcc:	2762      	movs	r7, #98	; 0x62
 800cbce:	601c      	str	r4, [r3, #0]
 800cbd0:	e723      	b.n	800ca1a <__gethex+0x12a>
 800cbd2:	1e71      	subs	r1, r6, #1
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f000 fedb 	bl	800d990 <__any_on>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	d1ed      	bne.n	800cbba <__gethex+0x2ca>
 800cbde:	ee18 0a10 	vmov	r0, s16
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	f000 fa7a 	bl	800d0dc <_Bfree>
 800cbe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbea:	2300      	movs	r3, #0
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	2750      	movs	r7, #80	; 0x50
 800cbf0:	e713      	b.n	800ca1a <__gethex+0x12a>
 800cbf2:	bf00      	nop
 800cbf4:	0800e7d0 	.word	0x0800e7d0
 800cbf8:	0800e754 	.word	0x0800e754
 800cbfc:	0800e765 	.word	0x0800e765
 800cc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1eb      	bne.n	800cbde <__gethex+0x2ee>
 800cc06:	e7d8      	b.n	800cbba <__gethex+0x2ca>
 800cc08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1d5      	bne.n	800cbba <__gethex+0x2ca>
 800cc0e:	e7e6      	b.n	800cbde <__gethex+0x2ee>
 800cc10:	1e6f      	subs	r7, r5, #1
 800cc12:	f1ba 0f00 	cmp.w	sl, #0
 800cc16:	d131      	bne.n	800cc7c <__gethex+0x38c>
 800cc18:	b127      	cbz	r7, 800cc24 <__gethex+0x334>
 800cc1a:	4639      	mov	r1, r7
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 feb7 	bl	800d990 <__any_on>
 800cc22:	4682      	mov	sl, r0
 800cc24:	117b      	asrs	r3, r7, #5
 800cc26:	2101      	movs	r1, #1
 800cc28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cc2c:	f007 071f 	and.w	r7, r7, #31
 800cc30:	fa01 f707 	lsl.w	r7, r1, r7
 800cc34:	421f      	tst	r7, r3
 800cc36:	4629      	mov	r1, r5
 800cc38:	4620      	mov	r0, r4
 800cc3a:	bf18      	it	ne
 800cc3c:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc40:	1b76      	subs	r6, r6, r5
 800cc42:	f7ff fded 	bl	800c820 <rshift>
 800cc46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc4a:	2702      	movs	r7, #2
 800cc4c:	f1ba 0f00 	cmp.w	sl, #0
 800cc50:	d048      	beq.n	800cce4 <__gethex+0x3f4>
 800cc52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d015      	beq.n	800cc86 <__gethex+0x396>
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d017      	beq.n	800cc8e <__gethex+0x39e>
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d109      	bne.n	800cc76 <__gethex+0x386>
 800cc62:	f01a 0f02 	tst.w	sl, #2
 800cc66:	d006      	beq.n	800cc76 <__gethex+0x386>
 800cc68:	f8d9 0000 	ldr.w	r0, [r9]
 800cc6c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc70:	f01a 0f01 	tst.w	sl, #1
 800cc74:	d10e      	bne.n	800cc94 <__gethex+0x3a4>
 800cc76:	f047 0710 	orr.w	r7, r7, #16
 800cc7a:	e033      	b.n	800cce4 <__gethex+0x3f4>
 800cc7c:	f04f 0a01 	mov.w	sl, #1
 800cc80:	e7d0      	b.n	800cc24 <__gethex+0x334>
 800cc82:	2701      	movs	r7, #1
 800cc84:	e7e2      	b.n	800cc4c <__gethex+0x35c>
 800cc86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc88:	f1c3 0301 	rsb	r3, r3, #1
 800cc8c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d0f0      	beq.n	800cc76 <__gethex+0x386>
 800cc94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc98:	f104 0314 	add.w	r3, r4, #20
 800cc9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cca0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cca4:	f04f 0c00 	mov.w	ip, #0
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ccb2:	d01c      	beq.n	800ccee <__gethex+0x3fe>
 800ccb4:	3201      	adds	r2, #1
 800ccb6:	6002      	str	r2, [r0, #0]
 800ccb8:	2f02      	cmp	r7, #2
 800ccba:	f104 0314 	add.w	r3, r4, #20
 800ccbe:	d13f      	bne.n	800cd40 <__gethex+0x450>
 800ccc0:	f8d8 2000 	ldr.w	r2, [r8]
 800ccc4:	3a01      	subs	r2, #1
 800ccc6:	42b2      	cmp	r2, r6
 800ccc8:	d10a      	bne.n	800cce0 <__gethex+0x3f0>
 800ccca:	1171      	asrs	r1, r6, #5
 800cccc:	2201      	movs	r2, #1
 800ccce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccd2:	f006 061f 	and.w	r6, r6, #31
 800ccd6:	fa02 f606 	lsl.w	r6, r2, r6
 800ccda:	421e      	tst	r6, r3
 800ccdc:	bf18      	it	ne
 800ccde:	4617      	movne	r7, r2
 800cce0:	f047 0720 	orr.w	r7, r7, #32
 800cce4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cce6:	601c      	str	r4, [r3, #0]
 800cce8:	9b04      	ldr	r3, [sp, #16]
 800ccea:	601d      	str	r5, [r3, #0]
 800ccec:	e695      	b.n	800ca1a <__gethex+0x12a>
 800ccee:	4299      	cmp	r1, r3
 800ccf0:	f843 cc04 	str.w	ip, [r3, #-4]
 800ccf4:	d8d8      	bhi.n	800cca8 <__gethex+0x3b8>
 800ccf6:	68a3      	ldr	r3, [r4, #8]
 800ccf8:	459b      	cmp	fp, r3
 800ccfa:	db19      	blt.n	800cd30 <__gethex+0x440>
 800ccfc:	6861      	ldr	r1, [r4, #4]
 800ccfe:	ee18 0a10 	vmov	r0, s16
 800cd02:	3101      	adds	r1, #1
 800cd04:	f000 f9aa 	bl	800d05c <_Balloc>
 800cd08:	4681      	mov	r9, r0
 800cd0a:	b918      	cbnz	r0, 800cd14 <__gethex+0x424>
 800cd0c:	4b1a      	ldr	r3, [pc, #104]	; (800cd78 <__gethex+0x488>)
 800cd0e:	4602      	mov	r2, r0
 800cd10:	2184      	movs	r1, #132	; 0x84
 800cd12:	e6a8      	b.n	800ca66 <__gethex+0x176>
 800cd14:	6922      	ldr	r2, [r4, #16]
 800cd16:	3202      	adds	r2, #2
 800cd18:	f104 010c 	add.w	r1, r4, #12
 800cd1c:	0092      	lsls	r2, r2, #2
 800cd1e:	300c      	adds	r0, #12
 800cd20:	f000 f982 	bl	800d028 <memcpy>
 800cd24:	4621      	mov	r1, r4
 800cd26:	ee18 0a10 	vmov	r0, s16
 800cd2a:	f000 f9d7 	bl	800d0dc <_Bfree>
 800cd2e:	464c      	mov	r4, r9
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd38:	6122      	str	r2, [r4, #16]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	615a      	str	r2, [r3, #20]
 800cd3e:	e7bb      	b.n	800ccb8 <__gethex+0x3c8>
 800cd40:	6922      	ldr	r2, [r4, #16]
 800cd42:	455a      	cmp	r2, fp
 800cd44:	dd0b      	ble.n	800cd5e <__gethex+0x46e>
 800cd46:	2101      	movs	r1, #1
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f7ff fd69 	bl	800c820 <rshift>
 800cd4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd52:	3501      	adds	r5, #1
 800cd54:	42ab      	cmp	r3, r5
 800cd56:	f6ff aed0 	blt.w	800cafa <__gethex+0x20a>
 800cd5a:	2701      	movs	r7, #1
 800cd5c:	e7c0      	b.n	800cce0 <__gethex+0x3f0>
 800cd5e:	f016 061f 	ands.w	r6, r6, #31
 800cd62:	d0fa      	beq.n	800cd5a <__gethex+0x46a>
 800cd64:	449a      	add	sl, r3
 800cd66:	f1c6 0620 	rsb	r6, r6, #32
 800cd6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cd6e:	f000 fa6b 	bl	800d248 <__hi0bits>
 800cd72:	42b0      	cmp	r0, r6
 800cd74:	dbe7      	blt.n	800cd46 <__gethex+0x456>
 800cd76:	e7f0      	b.n	800cd5a <__gethex+0x46a>
 800cd78:	0800e754 	.word	0x0800e754

0800cd7c <L_shift>:
 800cd7c:	f1c2 0208 	rsb	r2, r2, #8
 800cd80:	0092      	lsls	r2, r2, #2
 800cd82:	b570      	push	{r4, r5, r6, lr}
 800cd84:	f1c2 0620 	rsb	r6, r2, #32
 800cd88:	6843      	ldr	r3, [r0, #4]
 800cd8a:	6804      	ldr	r4, [r0, #0]
 800cd8c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd90:	432c      	orrs	r4, r5
 800cd92:	40d3      	lsrs	r3, r2
 800cd94:	6004      	str	r4, [r0, #0]
 800cd96:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd9a:	4288      	cmp	r0, r1
 800cd9c:	d3f4      	bcc.n	800cd88 <L_shift+0xc>
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}

0800cda0 <__match>:
 800cda0:	b530      	push	{r4, r5, lr}
 800cda2:	6803      	ldr	r3, [r0, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdaa:	b914      	cbnz	r4, 800cdb2 <__match+0x12>
 800cdac:	6003      	str	r3, [r0, #0]
 800cdae:	2001      	movs	r0, #1
 800cdb0:	bd30      	pop	{r4, r5, pc}
 800cdb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cdba:	2d19      	cmp	r5, #25
 800cdbc:	bf98      	it	ls
 800cdbe:	3220      	addls	r2, #32
 800cdc0:	42a2      	cmp	r2, r4
 800cdc2:	d0f0      	beq.n	800cda6 <__match+0x6>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e7f3      	b.n	800cdb0 <__match+0x10>

0800cdc8 <__hexnan>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	680b      	ldr	r3, [r1, #0]
 800cdce:	6801      	ldr	r1, [r0, #0]
 800cdd0:	115e      	asrs	r6, r3, #5
 800cdd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdd6:	f013 031f 	ands.w	r3, r3, #31
 800cdda:	b087      	sub	sp, #28
 800cddc:	bf18      	it	ne
 800cdde:	3604      	addne	r6, #4
 800cde0:	2500      	movs	r5, #0
 800cde2:	1f37      	subs	r7, r6, #4
 800cde4:	4682      	mov	sl, r0
 800cde6:	4690      	mov	r8, r2
 800cde8:	9301      	str	r3, [sp, #4]
 800cdea:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdee:	46b9      	mov	r9, r7
 800cdf0:	463c      	mov	r4, r7
 800cdf2:	9502      	str	r5, [sp, #8]
 800cdf4:	46ab      	mov	fp, r5
 800cdf6:	784a      	ldrb	r2, [r1, #1]
 800cdf8:	1c4b      	adds	r3, r1, #1
 800cdfa:	9303      	str	r3, [sp, #12]
 800cdfc:	b342      	cbz	r2, 800ce50 <__hexnan+0x88>
 800cdfe:	4610      	mov	r0, r2
 800ce00:	9105      	str	r1, [sp, #20]
 800ce02:	9204      	str	r2, [sp, #16]
 800ce04:	f7ff fd5e 	bl	800c8c4 <__hexdig_fun>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d14f      	bne.n	800ceac <__hexnan+0xe4>
 800ce0c:	9a04      	ldr	r2, [sp, #16]
 800ce0e:	9905      	ldr	r1, [sp, #20]
 800ce10:	2a20      	cmp	r2, #32
 800ce12:	d818      	bhi.n	800ce46 <__hexnan+0x7e>
 800ce14:	9b02      	ldr	r3, [sp, #8]
 800ce16:	459b      	cmp	fp, r3
 800ce18:	dd13      	ble.n	800ce42 <__hexnan+0x7a>
 800ce1a:	454c      	cmp	r4, r9
 800ce1c:	d206      	bcs.n	800ce2c <__hexnan+0x64>
 800ce1e:	2d07      	cmp	r5, #7
 800ce20:	dc04      	bgt.n	800ce2c <__hexnan+0x64>
 800ce22:	462a      	mov	r2, r5
 800ce24:	4649      	mov	r1, r9
 800ce26:	4620      	mov	r0, r4
 800ce28:	f7ff ffa8 	bl	800cd7c <L_shift>
 800ce2c:	4544      	cmp	r4, r8
 800ce2e:	d950      	bls.n	800ced2 <__hexnan+0x10a>
 800ce30:	2300      	movs	r3, #0
 800ce32:	f1a4 0904 	sub.w	r9, r4, #4
 800ce36:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce3a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce3e:	464c      	mov	r4, r9
 800ce40:	461d      	mov	r5, r3
 800ce42:	9903      	ldr	r1, [sp, #12]
 800ce44:	e7d7      	b.n	800cdf6 <__hexnan+0x2e>
 800ce46:	2a29      	cmp	r2, #41	; 0x29
 800ce48:	d156      	bne.n	800cef8 <__hexnan+0x130>
 800ce4a:	3102      	adds	r1, #2
 800ce4c:	f8ca 1000 	str.w	r1, [sl]
 800ce50:	f1bb 0f00 	cmp.w	fp, #0
 800ce54:	d050      	beq.n	800cef8 <__hexnan+0x130>
 800ce56:	454c      	cmp	r4, r9
 800ce58:	d206      	bcs.n	800ce68 <__hexnan+0xa0>
 800ce5a:	2d07      	cmp	r5, #7
 800ce5c:	dc04      	bgt.n	800ce68 <__hexnan+0xa0>
 800ce5e:	462a      	mov	r2, r5
 800ce60:	4649      	mov	r1, r9
 800ce62:	4620      	mov	r0, r4
 800ce64:	f7ff ff8a 	bl	800cd7c <L_shift>
 800ce68:	4544      	cmp	r4, r8
 800ce6a:	d934      	bls.n	800ced6 <__hexnan+0x10e>
 800ce6c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce70:	4623      	mov	r3, r4
 800ce72:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce76:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce7a:	429f      	cmp	r7, r3
 800ce7c:	d2f9      	bcs.n	800ce72 <__hexnan+0xaa>
 800ce7e:	1b3b      	subs	r3, r7, r4
 800ce80:	f023 0303 	bic.w	r3, r3, #3
 800ce84:	3304      	adds	r3, #4
 800ce86:	3401      	adds	r4, #1
 800ce88:	3e03      	subs	r6, #3
 800ce8a:	42b4      	cmp	r4, r6
 800ce8c:	bf88      	it	hi
 800ce8e:	2304      	movhi	r3, #4
 800ce90:	4443      	add	r3, r8
 800ce92:	2200      	movs	r2, #0
 800ce94:	f843 2b04 	str.w	r2, [r3], #4
 800ce98:	429f      	cmp	r7, r3
 800ce9a:	d2fb      	bcs.n	800ce94 <__hexnan+0xcc>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	b91b      	cbnz	r3, 800cea8 <__hexnan+0xe0>
 800cea0:	4547      	cmp	r7, r8
 800cea2:	d127      	bne.n	800cef4 <__hexnan+0x12c>
 800cea4:	2301      	movs	r3, #1
 800cea6:	603b      	str	r3, [r7, #0]
 800cea8:	2005      	movs	r0, #5
 800ceaa:	e026      	b.n	800cefa <__hexnan+0x132>
 800ceac:	3501      	adds	r5, #1
 800ceae:	2d08      	cmp	r5, #8
 800ceb0:	f10b 0b01 	add.w	fp, fp, #1
 800ceb4:	dd06      	ble.n	800cec4 <__hexnan+0xfc>
 800ceb6:	4544      	cmp	r4, r8
 800ceb8:	d9c3      	bls.n	800ce42 <__hexnan+0x7a>
 800ceba:	2300      	movs	r3, #0
 800cebc:	f844 3c04 	str.w	r3, [r4, #-4]
 800cec0:	2501      	movs	r5, #1
 800cec2:	3c04      	subs	r4, #4
 800cec4:	6822      	ldr	r2, [r4, #0]
 800cec6:	f000 000f 	and.w	r0, r0, #15
 800ceca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cece:	6022      	str	r2, [r4, #0]
 800ced0:	e7b7      	b.n	800ce42 <__hexnan+0x7a>
 800ced2:	2508      	movs	r5, #8
 800ced4:	e7b5      	b.n	800ce42 <__hexnan+0x7a>
 800ced6:	9b01      	ldr	r3, [sp, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d0df      	beq.n	800ce9c <__hexnan+0xd4>
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295
 800cee0:	f1c3 0320 	rsb	r3, r3, #32
 800cee4:	fa22 f303 	lsr.w	r3, r2, r3
 800cee8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ceec:	401a      	ands	r2, r3
 800ceee:	f846 2c04 	str.w	r2, [r6, #-4]
 800cef2:	e7d3      	b.n	800ce9c <__hexnan+0xd4>
 800cef4:	3f04      	subs	r7, #4
 800cef6:	e7d1      	b.n	800ce9c <__hexnan+0xd4>
 800cef8:	2004      	movs	r0, #4
 800cefa:	b007      	add	sp, #28
 800cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf00 <_localeconv_r>:
 800cf00:	4800      	ldr	r0, [pc, #0]	; (800cf04 <_localeconv_r+0x4>)
 800cf02:	4770      	bx	lr
 800cf04:	20000174 	.word	0x20000174

0800cf08 <_lseek_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d07      	ldr	r5, [pc, #28]	; (800cf28 <_lseek_r+0x20>)
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	4608      	mov	r0, r1
 800cf10:	4611      	mov	r1, r2
 800cf12:	2200      	movs	r2, #0
 800cf14:	602a      	str	r2, [r5, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	f7f7 f9c2 	bl	80042a0 <_lseek>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_lseek_r+0x1e>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_lseek_r+0x1e>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	200017b4 	.word	0x200017b4

0800cf2c <__swhatbuf_r>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	460e      	mov	r6, r1
 800cf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf34:	2900      	cmp	r1, #0
 800cf36:	b096      	sub	sp, #88	; 0x58
 800cf38:	4614      	mov	r4, r2
 800cf3a:	461d      	mov	r5, r3
 800cf3c:	da07      	bge.n	800cf4e <__swhatbuf_r+0x22>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	602b      	str	r3, [r5, #0]
 800cf42:	89b3      	ldrh	r3, [r6, #12]
 800cf44:	061a      	lsls	r2, r3, #24
 800cf46:	d410      	bmi.n	800cf6a <__swhatbuf_r+0x3e>
 800cf48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf4c:	e00e      	b.n	800cf6c <__swhatbuf_r+0x40>
 800cf4e:	466a      	mov	r2, sp
 800cf50:	f001 f92e 	bl	800e1b0 <_fstat_r>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	dbf2      	blt.n	800cf3e <__swhatbuf_r+0x12>
 800cf58:	9a01      	ldr	r2, [sp, #4]
 800cf5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf62:	425a      	negs	r2, r3
 800cf64:	415a      	adcs	r2, r3
 800cf66:	602a      	str	r2, [r5, #0]
 800cf68:	e7ee      	b.n	800cf48 <__swhatbuf_r+0x1c>
 800cf6a:	2340      	movs	r3, #64	; 0x40
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	b016      	add	sp, #88	; 0x58
 800cf72:	bd70      	pop	{r4, r5, r6, pc}

0800cf74 <__smakebuf_r>:
 800cf74:	898b      	ldrh	r3, [r1, #12]
 800cf76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf78:	079d      	lsls	r5, r3, #30
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	d507      	bpl.n	800cf90 <__smakebuf_r+0x1c>
 800cf80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf84:	6023      	str	r3, [r4, #0]
 800cf86:	6123      	str	r3, [r4, #16]
 800cf88:	2301      	movs	r3, #1
 800cf8a:	6163      	str	r3, [r4, #20]
 800cf8c:	b002      	add	sp, #8
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	ab01      	add	r3, sp, #4
 800cf92:	466a      	mov	r2, sp
 800cf94:	f7ff ffca 	bl	800cf2c <__swhatbuf_r>
 800cf98:	9900      	ldr	r1, [sp, #0]
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f7fc febd 	bl	8009d1c <_malloc_r>
 800cfa2:	b948      	cbnz	r0, 800cfb8 <__smakebuf_r+0x44>
 800cfa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa8:	059a      	lsls	r2, r3, #22
 800cfaa:	d4ef      	bmi.n	800cf8c <__smakebuf_r+0x18>
 800cfac:	f023 0303 	bic.w	r3, r3, #3
 800cfb0:	f043 0302 	orr.w	r3, r3, #2
 800cfb4:	81a3      	strh	r3, [r4, #12]
 800cfb6:	e7e3      	b.n	800cf80 <__smakebuf_r+0xc>
 800cfb8:	4b0d      	ldr	r3, [pc, #52]	; (800cff0 <__smakebuf_r+0x7c>)
 800cfba:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	6020      	str	r0, [r4, #0]
 800cfc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	9b00      	ldr	r3, [sp, #0]
 800cfc8:	6163      	str	r3, [r4, #20]
 800cfca:	9b01      	ldr	r3, [sp, #4]
 800cfcc:	6120      	str	r0, [r4, #16]
 800cfce:	b15b      	cbz	r3, 800cfe8 <__smakebuf_r+0x74>
 800cfd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f001 f8fd 	bl	800e1d4 <_isatty_r>
 800cfda:	b128      	cbz	r0, 800cfe8 <__smakebuf_r+0x74>
 800cfdc:	89a3      	ldrh	r3, [r4, #12]
 800cfde:	f023 0303 	bic.w	r3, r3, #3
 800cfe2:	f043 0301 	orr.w	r3, r3, #1
 800cfe6:	81a3      	strh	r3, [r4, #12]
 800cfe8:	89a0      	ldrh	r0, [r4, #12]
 800cfea:	4305      	orrs	r5, r0
 800cfec:	81a5      	strh	r5, [r4, #12]
 800cfee:	e7cd      	b.n	800cf8c <__smakebuf_r+0x18>
 800cff0:	08009a79 	.word	0x08009a79

0800cff4 <malloc>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <malloc+0xc>)
 800cff6:	4601      	mov	r1, r0
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f7fc be8f 	b.w	8009d1c <_malloc_r>
 800cffe:	bf00      	nop
 800d000:	2000001c 	.word	0x2000001c

0800d004 <__ascii_mbtowc>:
 800d004:	b082      	sub	sp, #8
 800d006:	b901      	cbnz	r1, 800d00a <__ascii_mbtowc+0x6>
 800d008:	a901      	add	r1, sp, #4
 800d00a:	b142      	cbz	r2, 800d01e <__ascii_mbtowc+0x1a>
 800d00c:	b14b      	cbz	r3, 800d022 <__ascii_mbtowc+0x1e>
 800d00e:	7813      	ldrb	r3, [r2, #0]
 800d010:	600b      	str	r3, [r1, #0]
 800d012:	7812      	ldrb	r2, [r2, #0]
 800d014:	1e10      	subs	r0, r2, #0
 800d016:	bf18      	it	ne
 800d018:	2001      	movne	r0, #1
 800d01a:	b002      	add	sp, #8
 800d01c:	4770      	bx	lr
 800d01e:	4610      	mov	r0, r2
 800d020:	e7fb      	b.n	800d01a <__ascii_mbtowc+0x16>
 800d022:	f06f 0001 	mvn.w	r0, #1
 800d026:	e7f8      	b.n	800d01a <__ascii_mbtowc+0x16>

0800d028 <memcpy>:
 800d028:	440a      	add	r2, r1
 800d02a:	4291      	cmp	r1, r2
 800d02c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d030:	d100      	bne.n	800d034 <memcpy+0xc>
 800d032:	4770      	bx	lr
 800d034:	b510      	push	{r4, lr}
 800d036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d03e:	4291      	cmp	r1, r2
 800d040:	d1f9      	bne.n	800d036 <memcpy+0xe>
 800d042:	bd10      	pop	{r4, pc}

0800d044 <__malloc_lock>:
 800d044:	4801      	ldr	r0, [pc, #4]	; (800d04c <__malloc_lock+0x8>)
 800d046:	f7fc be0e 	b.w	8009c66 <__retarget_lock_acquire_recursive>
 800d04a:	bf00      	nop
 800d04c:	200017ac 	.word	0x200017ac

0800d050 <__malloc_unlock>:
 800d050:	4801      	ldr	r0, [pc, #4]	; (800d058 <__malloc_unlock+0x8>)
 800d052:	f7fc be09 	b.w	8009c68 <__retarget_lock_release_recursive>
 800d056:	bf00      	nop
 800d058:	200017ac 	.word	0x200017ac

0800d05c <_Balloc>:
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d060:	4604      	mov	r4, r0
 800d062:	460d      	mov	r5, r1
 800d064:	b976      	cbnz	r6, 800d084 <_Balloc+0x28>
 800d066:	2010      	movs	r0, #16
 800d068:	f7ff ffc4 	bl	800cff4 <malloc>
 800d06c:	4602      	mov	r2, r0
 800d06e:	6260      	str	r0, [r4, #36]	; 0x24
 800d070:	b920      	cbnz	r0, 800d07c <_Balloc+0x20>
 800d072:	4b18      	ldr	r3, [pc, #96]	; (800d0d4 <_Balloc+0x78>)
 800d074:	4818      	ldr	r0, [pc, #96]	; (800d0d8 <_Balloc+0x7c>)
 800d076:	2166      	movs	r1, #102	; 0x66
 800d078:	f001 f86a 	bl	800e150 <__assert_func>
 800d07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d080:	6006      	str	r6, [r0, #0]
 800d082:	60c6      	str	r6, [r0, #12]
 800d084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d086:	68f3      	ldr	r3, [r6, #12]
 800d088:	b183      	cbz	r3, 800d0ac <_Balloc+0x50>
 800d08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d092:	b9b8      	cbnz	r0, 800d0c4 <_Balloc+0x68>
 800d094:	2101      	movs	r1, #1
 800d096:	fa01 f605 	lsl.w	r6, r1, r5
 800d09a:	1d72      	adds	r2, r6, #5
 800d09c:	0092      	lsls	r2, r2, #2
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f000 fc97 	bl	800d9d2 <_calloc_r>
 800d0a4:	b160      	cbz	r0, 800d0c0 <_Balloc+0x64>
 800d0a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0aa:	e00e      	b.n	800d0ca <_Balloc+0x6e>
 800d0ac:	2221      	movs	r2, #33	; 0x21
 800d0ae:	2104      	movs	r1, #4
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f000 fc8e 	bl	800d9d2 <_calloc_r>
 800d0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0b8:	60f0      	str	r0, [r6, #12]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1e4      	bne.n	800d08a <_Balloc+0x2e>
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}
 800d0c4:	6802      	ldr	r2, [r0, #0]
 800d0c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0d0:	e7f7      	b.n	800d0c2 <_Balloc+0x66>
 800d0d2:	bf00      	nop
 800d0d4:	0800e6de 	.word	0x0800e6de
 800d0d8:	0800e7e4 	.word	0x0800e7e4

0800d0dc <_Bfree>:
 800d0dc:	b570      	push	{r4, r5, r6, lr}
 800d0de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	b976      	cbnz	r6, 800d104 <_Bfree+0x28>
 800d0e6:	2010      	movs	r0, #16
 800d0e8:	f7ff ff84 	bl	800cff4 <malloc>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	6268      	str	r0, [r5, #36]	; 0x24
 800d0f0:	b920      	cbnz	r0, 800d0fc <_Bfree+0x20>
 800d0f2:	4b09      	ldr	r3, [pc, #36]	; (800d118 <_Bfree+0x3c>)
 800d0f4:	4809      	ldr	r0, [pc, #36]	; (800d11c <_Bfree+0x40>)
 800d0f6:	218a      	movs	r1, #138	; 0x8a
 800d0f8:	f001 f82a 	bl	800e150 <__assert_func>
 800d0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d100:	6006      	str	r6, [r0, #0]
 800d102:	60c6      	str	r6, [r0, #12]
 800d104:	b13c      	cbz	r4, 800d116 <_Bfree+0x3a>
 800d106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d108:	6862      	ldr	r2, [r4, #4]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d110:	6021      	str	r1, [r4, #0]
 800d112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d116:	bd70      	pop	{r4, r5, r6, pc}
 800d118:	0800e6de 	.word	0x0800e6de
 800d11c:	0800e7e4 	.word	0x0800e7e4

0800d120 <__multadd>:
 800d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d124:	690e      	ldr	r6, [r1, #16]
 800d126:	4607      	mov	r7, r0
 800d128:	4698      	mov	r8, r3
 800d12a:	460c      	mov	r4, r1
 800d12c:	f101 0014 	add.w	r0, r1, #20
 800d130:	2300      	movs	r3, #0
 800d132:	6805      	ldr	r5, [r0, #0]
 800d134:	b2a9      	uxth	r1, r5
 800d136:	fb02 8101 	mla	r1, r2, r1, r8
 800d13a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d13e:	0c2d      	lsrs	r5, r5, #16
 800d140:	fb02 c505 	mla	r5, r2, r5, ip
 800d144:	b289      	uxth	r1, r1
 800d146:	3301      	adds	r3, #1
 800d148:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d14c:	429e      	cmp	r6, r3
 800d14e:	f840 1b04 	str.w	r1, [r0], #4
 800d152:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d156:	dcec      	bgt.n	800d132 <__multadd+0x12>
 800d158:	f1b8 0f00 	cmp.w	r8, #0
 800d15c:	d022      	beq.n	800d1a4 <__multadd+0x84>
 800d15e:	68a3      	ldr	r3, [r4, #8]
 800d160:	42b3      	cmp	r3, r6
 800d162:	dc19      	bgt.n	800d198 <__multadd+0x78>
 800d164:	6861      	ldr	r1, [r4, #4]
 800d166:	4638      	mov	r0, r7
 800d168:	3101      	adds	r1, #1
 800d16a:	f7ff ff77 	bl	800d05c <_Balloc>
 800d16e:	4605      	mov	r5, r0
 800d170:	b928      	cbnz	r0, 800d17e <__multadd+0x5e>
 800d172:	4602      	mov	r2, r0
 800d174:	4b0d      	ldr	r3, [pc, #52]	; (800d1ac <__multadd+0x8c>)
 800d176:	480e      	ldr	r0, [pc, #56]	; (800d1b0 <__multadd+0x90>)
 800d178:	21b5      	movs	r1, #181	; 0xb5
 800d17a:	f000 ffe9 	bl	800e150 <__assert_func>
 800d17e:	6922      	ldr	r2, [r4, #16]
 800d180:	3202      	adds	r2, #2
 800d182:	f104 010c 	add.w	r1, r4, #12
 800d186:	0092      	lsls	r2, r2, #2
 800d188:	300c      	adds	r0, #12
 800d18a:	f7ff ff4d 	bl	800d028 <memcpy>
 800d18e:	4621      	mov	r1, r4
 800d190:	4638      	mov	r0, r7
 800d192:	f7ff ffa3 	bl	800d0dc <_Bfree>
 800d196:	462c      	mov	r4, r5
 800d198:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d19c:	3601      	adds	r6, #1
 800d19e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d1a2:	6126      	str	r6, [r4, #16]
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1aa:	bf00      	nop
 800d1ac:	0800e754 	.word	0x0800e754
 800d1b0:	0800e7e4 	.word	0x0800e7e4

0800d1b4 <__s2b>:
 800d1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	4615      	mov	r5, r2
 800d1bc:	461f      	mov	r7, r3
 800d1be:	2209      	movs	r2, #9
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	4606      	mov	r6, r0
 800d1c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	db09      	blt.n	800d1e4 <__s2b+0x30>
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f7ff ff43 	bl	800d05c <_Balloc>
 800d1d6:	b940      	cbnz	r0, 800d1ea <__s2b+0x36>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	4b19      	ldr	r3, [pc, #100]	; (800d240 <__s2b+0x8c>)
 800d1dc:	4819      	ldr	r0, [pc, #100]	; (800d244 <__s2b+0x90>)
 800d1de:	21ce      	movs	r1, #206	; 0xce
 800d1e0:	f000 ffb6 	bl	800e150 <__assert_func>
 800d1e4:	0052      	lsls	r2, r2, #1
 800d1e6:	3101      	adds	r1, #1
 800d1e8:	e7f0      	b.n	800d1cc <__s2b+0x18>
 800d1ea:	9b08      	ldr	r3, [sp, #32]
 800d1ec:	6143      	str	r3, [r0, #20]
 800d1ee:	2d09      	cmp	r5, #9
 800d1f0:	f04f 0301 	mov.w	r3, #1
 800d1f4:	6103      	str	r3, [r0, #16]
 800d1f6:	dd16      	ble.n	800d226 <__s2b+0x72>
 800d1f8:	f104 0909 	add.w	r9, r4, #9
 800d1fc:	46c8      	mov	r8, r9
 800d1fe:	442c      	add	r4, r5
 800d200:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d204:	4601      	mov	r1, r0
 800d206:	3b30      	subs	r3, #48	; 0x30
 800d208:	220a      	movs	r2, #10
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ff88 	bl	800d120 <__multadd>
 800d210:	45a0      	cmp	r8, r4
 800d212:	d1f5      	bne.n	800d200 <__s2b+0x4c>
 800d214:	f1a5 0408 	sub.w	r4, r5, #8
 800d218:	444c      	add	r4, r9
 800d21a:	1b2d      	subs	r5, r5, r4
 800d21c:	1963      	adds	r3, r4, r5
 800d21e:	42bb      	cmp	r3, r7
 800d220:	db04      	blt.n	800d22c <__s2b+0x78>
 800d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d226:	340a      	adds	r4, #10
 800d228:	2509      	movs	r5, #9
 800d22a:	e7f6      	b.n	800d21a <__s2b+0x66>
 800d22c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d230:	4601      	mov	r1, r0
 800d232:	3b30      	subs	r3, #48	; 0x30
 800d234:	220a      	movs	r2, #10
 800d236:	4630      	mov	r0, r6
 800d238:	f7ff ff72 	bl	800d120 <__multadd>
 800d23c:	e7ee      	b.n	800d21c <__s2b+0x68>
 800d23e:	bf00      	nop
 800d240:	0800e754 	.word	0x0800e754
 800d244:	0800e7e4 	.word	0x0800e7e4

0800d248 <__hi0bits>:
 800d248:	0c03      	lsrs	r3, r0, #16
 800d24a:	041b      	lsls	r3, r3, #16
 800d24c:	b9d3      	cbnz	r3, 800d284 <__hi0bits+0x3c>
 800d24e:	0400      	lsls	r0, r0, #16
 800d250:	2310      	movs	r3, #16
 800d252:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d256:	bf04      	itt	eq
 800d258:	0200      	lsleq	r0, r0, #8
 800d25a:	3308      	addeq	r3, #8
 800d25c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d260:	bf04      	itt	eq
 800d262:	0100      	lsleq	r0, r0, #4
 800d264:	3304      	addeq	r3, #4
 800d266:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d26a:	bf04      	itt	eq
 800d26c:	0080      	lsleq	r0, r0, #2
 800d26e:	3302      	addeq	r3, #2
 800d270:	2800      	cmp	r0, #0
 800d272:	db05      	blt.n	800d280 <__hi0bits+0x38>
 800d274:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d278:	f103 0301 	add.w	r3, r3, #1
 800d27c:	bf08      	it	eq
 800d27e:	2320      	moveq	r3, #32
 800d280:	4618      	mov	r0, r3
 800d282:	4770      	bx	lr
 800d284:	2300      	movs	r3, #0
 800d286:	e7e4      	b.n	800d252 <__hi0bits+0xa>

0800d288 <__lo0bits>:
 800d288:	6803      	ldr	r3, [r0, #0]
 800d28a:	f013 0207 	ands.w	r2, r3, #7
 800d28e:	4601      	mov	r1, r0
 800d290:	d00b      	beq.n	800d2aa <__lo0bits+0x22>
 800d292:	07da      	lsls	r2, r3, #31
 800d294:	d424      	bmi.n	800d2e0 <__lo0bits+0x58>
 800d296:	0798      	lsls	r0, r3, #30
 800d298:	bf49      	itett	mi
 800d29a:	085b      	lsrmi	r3, r3, #1
 800d29c:	089b      	lsrpl	r3, r3, #2
 800d29e:	2001      	movmi	r0, #1
 800d2a0:	600b      	strmi	r3, [r1, #0]
 800d2a2:	bf5c      	itt	pl
 800d2a4:	600b      	strpl	r3, [r1, #0]
 800d2a6:	2002      	movpl	r0, #2
 800d2a8:	4770      	bx	lr
 800d2aa:	b298      	uxth	r0, r3
 800d2ac:	b9b0      	cbnz	r0, 800d2dc <__lo0bits+0x54>
 800d2ae:	0c1b      	lsrs	r3, r3, #16
 800d2b0:	2010      	movs	r0, #16
 800d2b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2b6:	bf04      	itt	eq
 800d2b8:	0a1b      	lsreq	r3, r3, #8
 800d2ba:	3008      	addeq	r0, #8
 800d2bc:	071a      	lsls	r2, r3, #28
 800d2be:	bf04      	itt	eq
 800d2c0:	091b      	lsreq	r3, r3, #4
 800d2c2:	3004      	addeq	r0, #4
 800d2c4:	079a      	lsls	r2, r3, #30
 800d2c6:	bf04      	itt	eq
 800d2c8:	089b      	lsreq	r3, r3, #2
 800d2ca:	3002      	addeq	r0, #2
 800d2cc:	07da      	lsls	r2, r3, #31
 800d2ce:	d403      	bmi.n	800d2d8 <__lo0bits+0x50>
 800d2d0:	085b      	lsrs	r3, r3, #1
 800d2d2:	f100 0001 	add.w	r0, r0, #1
 800d2d6:	d005      	beq.n	800d2e4 <__lo0bits+0x5c>
 800d2d8:	600b      	str	r3, [r1, #0]
 800d2da:	4770      	bx	lr
 800d2dc:	4610      	mov	r0, r2
 800d2de:	e7e8      	b.n	800d2b2 <__lo0bits+0x2a>
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	4770      	bx	lr
 800d2e4:	2020      	movs	r0, #32
 800d2e6:	4770      	bx	lr

0800d2e8 <__i2b>:
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	f7ff feb5 	bl	800d05c <_Balloc>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	b928      	cbnz	r0, 800d302 <__i2b+0x1a>
 800d2f6:	4b05      	ldr	r3, [pc, #20]	; (800d30c <__i2b+0x24>)
 800d2f8:	4805      	ldr	r0, [pc, #20]	; (800d310 <__i2b+0x28>)
 800d2fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d2fe:	f000 ff27 	bl	800e150 <__assert_func>
 800d302:	2301      	movs	r3, #1
 800d304:	6144      	str	r4, [r0, #20]
 800d306:	6103      	str	r3, [r0, #16]
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	bf00      	nop
 800d30c:	0800e754 	.word	0x0800e754
 800d310:	0800e7e4 	.word	0x0800e7e4

0800d314 <__multiply>:
 800d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	4614      	mov	r4, r2
 800d31a:	690a      	ldr	r2, [r1, #16]
 800d31c:	6923      	ldr	r3, [r4, #16]
 800d31e:	429a      	cmp	r2, r3
 800d320:	bfb8      	it	lt
 800d322:	460b      	movlt	r3, r1
 800d324:	460d      	mov	r5, r1
 800d326:	bfbc      	itt	lt
 800d328:	4625      	movlt	r5, r4
 800d32a:	461c      	movlt	r4, r3
 800d32c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d330:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d334:	68ab      	ldr	r3, [r5, #8]
 800d336:	6869      	ldr	r1, [r5, #4]
 800d338:	eb0a 0709 	add.w	r7, sl, r9
 800d33c:	42bb      	cmp	r3, r7
 800d33e:	b085      	sub	sp, #20
 800d340:	bfb8      	it	lt
 800d342:	3101      	addlt	r1, #1
 800d344:	f7ff fe8a 	bl	800d05c <_Balloc>
 800d348:	b930      	cbnz	r0, 800d358 <__multiply+0x44>
 800d34a:	4602      	mov	r2, r0
 800d34c:	4b42      	ldr	r3, [pc, #264]	; (800d458 <__multiply+0x144>)
 800d34e:	4843      	ldr	r0, [pc, #268]	; (800d45c <__multiply+0x148>)
 800d350:	f240 115d 	movw	r1, #349	; 0x15d
 800d354:	f000 fefc 	bl	800e150 <__assert_func>
 800d358:	f100 0614 	add.w	r6, r0, #20
 800d35c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d360:	4633      	mov	r3, r6
 800d362:	2200      	movs	r2, #0
 800d364:	4543      	cmp	r3, r8
 800d366:	d31e      	bcc.n	800d3a6 <__multiply+0x92>
 800d368:	f105 0c14 	add.w	ip, r5, #20
 800d36c:	f104 0314 	add.w	r3, r4, #20
 800d370:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d374:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d378:	9202      	str	r2, [sp, #8]
 800d37a:	ebac 0205 	sub.w	r2, ip, r5
 800d37e:	3a15      	subs	r2, #21
 800d380:	f022 0203 	bic.w	r2, r2, #3
 800d384:	3204      	adds	r2, #4
 800d386:	f105 0115 	add.w	r1, r5, #21
 800d38a:	458c      	cmp	ip, r1
 800d38c:	bf38      	it	cc
 800d38e:	2204      	movcc	r2, #4
 800d390:	9201      	str	r2, [sp, #4]
 800d392:	9a02      	ldr	r2, [sp, #8]
 800d394:	9303      	str	r3, [sp, #12]
 800d396:	429a      	cmp	r2, r3
 800d398:	d808      	bhi.n	800d3ac <__multiply+0x98>
 800d39a:	2f00      	cmp	r7, #0
 800d39c:	dc55      	bgt.n	800d44a <__multiply+0x136>
 800d39e:	6107      	str	r7, [r0, #16]
 800d3a0:	b005      	add	sp, #20
 800d3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a6:	f843 2b04 	str.w	r2, [r3], #4
 800d3aa:	e7db      	b.n	800d364 <__multiply+0x50>
 800d3ac:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3b0:	f1ba 0f00 	cmp.w	sl, #0
 800d3b4:	d020      	beq.n	800d3f8 <__multiply+0xe4>
 800d3b6:	f105 0e14 	add.w	lr, r5, #20
 800d3ba:	46b1      	mov	r9, r6
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d3c2:	f8d9 b000 	ldr.w	fp, [r9]
 800d3c6:	b2a1      	uxth	r1, r4
 800d3c8:	fa1f fb8b 	uxth.w	fp, fp
 800d3cc:	fb0a b101 	mla	r1, sl, r1, fp
 800d3d0:	4411      	add	r1, r2
 800d3d2:	f8d9 2000 	ldr.w	r2, [r9]
 800d3d6:	0c24      	lsrs	r4, r4, #16
 800d3d8:	0c12      	lsrs	r2, r2, #16
 800d3da:	fb0a 2404 	mla	r4, sl, r4, r2
 800d3de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d3e2:	b289      	uxth	r1, r1
 800d3e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d3e8:	45f4      	cmp	ip, lr
 800d3ea:	f849 1b04 	str.w	r1, [r9], #4
 800d3ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d3f2:	d8e4      	bhi.n	800d3be <__multiply+0xaa>
 800d3f4:	9901      	ldr	r1, [sp, #4]
 800d3f6:	5072      	str	r2, [r6, r1]
 800d3f8:	9a03      	ldr	r2, [sp, #12]
 800d3fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3fe:	3304      	adds	r3, #4
 800d400:	f1b9 0f00 	cmp.w	r9, #0
 800d404:	d01f      	beq.n	800d446 <__multiply+0x132>
 800d406:	6834      	ldr	r4, [r6, #0]
 800d408:	f105 0114 	add.w	r1, r5, #20
 800d40c:	46b6      	mov	lr, r6
 800d40e:	f04f 0a00 	mov.w	sl, #0
 800d412:	880a      	ldrh	r2, [r1, #0]
 800d414:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d418:	fb09 b202 	mla	r2, r9, r2, fp
 800d41c:	4492      	add	sl, r2
 800d41e:	b2a4      	uxth	r4, r4
 800d420:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d424:	f84e 4b04 	str.w	r4, [lr], #4
 800d428:	f851 4b04 	ldr.w	r4, [r1], #4
 800d42c:	f8be 2000 	ldrh.w	r2, [lr]
 800d430:	0c24      	lsrs	r4, r4, #16
 800d432:	fb09 2404 	mla	r4, r9, r4, r2
 800d436:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d43a:	458c      	cmp	ip, r1
 800d43c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d440:	d8e7      	bhi.n	800d412 <__multiply+0xfe>
 800d442:	9a01      	ldr	r2, [sp, #4]
 800d444:	50b4      	str	r4, [r6, r2]
 800d446:	3604      	adds	r6, #4
 800d448:	e7a3      	b.n	800d392 <__multiply+0x7e>
 800d44a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1a5      	bne.n	800d39e <__multiply+0x8a>
 800d452:	3f01      	subs	r7, #1
 800d454:	e7a1      	b.n	800d39a <__multiply+0x86>
 800d456:	bf00      	nop
 800d458:	0800e754 	.word	0x0800e754
 800d45c:	0800e7e4 	.word	0x0800e7e4

0800d460 <__pow5mult>:
 800d460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d464:	4615      	mov	r5, r2
 800d466:	f012 0203 	ands.w	r2, r2, #3
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	d007      	beq.n	800d480 <__pow5mult+0x20>
 800d470:	4c25      	ldr	r4, [pc, #148]	; (800d508 <__pow5mult+0xa8>)
 800d472:	3a01      	subs	r2, #1
 800d474:	2300      	movs	r3, #0
 800d476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d47a:	f7ff fe51 	bl	800d120 <__multadd>
 800d47e:	4607      	mov	r7, r0
 800d480:	10ad      	asrs	r5, r5, #2
 800d482:	d03d      	beq.n	800d500 <__pow5mult+0xa0>
 800d484:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d486:	b97c      	cbnz	r4, 800d4a8 <__pow5mult+0x48>
 800d488:	2010      	movs	r0, #16
 800d48a:	f7ff fdb3 	bl	800cff4 <malloc>
 800d48e:	4602      	mov	r2, r0
 800d490:	6270      	str	r0, [r6, #36]	; 0x24
 800d492:	b928      	cbnz	r0, 800d4a0 <__pow5mult+0x40>
 800d494:	4b1d      	ldr	r3, [pc, #116]	; (800d50c <__pow5mult+0xac>)
 800d496:	481e      	ldr	r0, [pc, #120]	; (800d510 <__pow5mult+0xb0>)
 800d498:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d49c:	f000 fe58 	bl	800e150 <__assert_func>
 800d4a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4a4:	6004      	str	r4, [r0, #0]
 800d4a6:	60c4      	str	r4, [r0, #12]
 800d4a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4b0:	b94c      	cbnz	r4, 800d4c6 <__pow5mult+0x66>
 800d4b2:	f240 2171 	movw	r1, #625	; 0x271
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	f7ff ff16 	bl	800d2e8 <__i2b>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	6003      	str	r3, [r0, #0]
 800d4c6:	f04f 0900 	mov.w	r9, #0
 800d4ca:	07eb      	lsls	r3, r5, #31
 800d4cc:	d50a      	bpl.n	800d4e4 <__pow5mult+0x84>
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	4622      	mov	r2, r4
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f7ff ff1e 	bl	800d314 <__multiply>
 800d4d8:	4639      	mov	r1, r7
 800d4da:	4680      	mov	r8, r0
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7ff fdfd 	bl	800d0dc <_Bfree>
 800d4e2:	4647      	mov	r7, r8
 800d4e4:	106d      	asrs	r5, r5, #1
 800d4e6:	d00b      	beq.n	800d500 <__pow5mult+0xa0>
 800d4e8:	6820      	ldr	r0, [r4, #0]
 800d4ea:	b938      	cbnz	r0, 800d4fc <__pow5mult+0x9c>
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7ff ff0f 	bl	800d314 <__multiply>
 800d4f6:	6020      	str	r0, [r4, #0]
 800d4f8:	f8c0 9000 	str.w	r9, [r0]
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	e7e4      	b.n	800d4ca <__pow5mult+0x6a>
 800d500:	4638      	mov	r0, r7
 800d502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d506:	bf00      	nop
 800d508:	0800e938 	.word	0x0800e938
 800d50c:	0800e6de 	.word	0x0800e6de
 800d510:	0800e7e4 	.word	0x0800e7e4

0800d514 <__lshift>:
 800d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	460c      	mov	r4, r1
 800d51a:	6849      	ldr	r1, [r1, #4]
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d522:	68a3      	ldr	r3, [r4, #8]
 800d524:	4607      	mov	r7, r0
 800d526:	4691      	mov	r9, r2
 800d528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d52c:	f108 0601 	add.w	r6, r8, #1
 800d530:	42b3      	cmp	r3, r6
 800d532:	db0b      	blt.n	800d54c <__lshift+0x38>
 800d534:	4638      	mov	r0, r7
 800d536:	f7ff fd91 	bl	800d05c <_Balloc>
 800d53a:	4605      	mov	r5, r0
 800d53c:	b948      	cbnz	r0, 800d552 <__lshift+0x3e>
 800d53e:	4602      	mov	r2, r0
 800d540:	4b28      	ldr	r3, [pc, #160]	; (800d5e4 <__lshift+0xd0>)
 800d542:	4829      	ldr	r0, [pc, #164]	; (800d5e8 <__lshift+0xd4>)
 800d544:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d548:	f000 fe02 	bl	800e150 <__assert_func>
 800d54c:	3101      	adds	r1, #1
 800d54e:	005b      	lsls	r3, r3, #1
 800d550:	e7ee      	b.n	800d530 <__lshift+0x1c>
 800d552:	2300      	movs	r3, #0
 800d554:	f100 0114 	add.w	r1, r0, #20
 800d558:	f100 0210 	add.w	r2, r0, #16
 800d55c:	4618      	mov	r0, r3
 800d55e:	4553      	cmp	r3, sl
 800d560:	db33      	blt.n	800d5ca <__lshift+0xb6>
 800d562:	6920      	ldr	r0, [r4, #16]
 800d564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d568:	f104 0314 	add.w	r3, r4, #20
 800d56c:	f019 091f 	ands.w	r9, r9, #31
 800d570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d578:	d02b      	beq.n	800d5d2 <__lshift+0xbe>
 800d57a:	f1c9 0e20 	rsb	lr, r9, #32
 800d57e:	468a      	mov	sl, r1
 800d580:	2200      	movs	r2, #0
 800d582:	6818      	ldr	r0, [r3, #0]
 800d584:	fa00 f009 	lsl.w	r0, r0, r9
 800d588:	4302      	orrs	r2, r0
 800d58a:	f84a 2b04 	str.w	r2, [sl], #4
 800d58e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d592:	459c      	cmp	ip, r3
 800d594:	fa22 f20e 	lsr.w	r2, r2, lr
 800d598:	d8f3      	bhi.n	800d582 <__lshift+0x6e>
 800d59a:	ebac 0304 	sub.w	r3, ip, r4
 800d59e:	3b15      	subs	r3, #21
 800d5a0:	f023 0303 	bic.w	r3, r3, #3
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	f104 0015 	add.w	r0, r4, #21
 800d5aa:	4584      	cmp	ip, r0
 800d5ac:	bf38      	it	cc
 800d5ae:	2304      	movcc	r3, #4
 800d5b0:	50ca      	str	r2, [r1, r3]
 800d5b2:	b10a      	cbz	r2, 800d5b8 <__lshift+0xa4>
 800d5b4:	f108 0602 	add.w	r6, r8, #2
 800d5b8:	3e01      	subs	r6, #1
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	612e      	str	r6, [r5, #16]
 800d5be:	4621      	mov	r1, r4
 800d5c0:	f7ff fd8c 	bl	800d0dc <_Bfree>
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	e7c5      	b.n	800d55e <__lshift+0x4a>
 800d5d2:	3904      	subs	r1, #4
 800d5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5dc:	459c      	cmp	ip, r3
 800d5de:	d8f9      	bhi.n	800d5d4 <__lshift+0xc0>
 800d5e0:	e7ea      	b.n	800d5b8 <__lshift+0xa4>
 800d5e2:	bf00      	nop
 800d5e4:	0800e754 	.word	0x0800e754
 800d5e8:	0800e7e4 	.word	0x0800e7e4

0800d5ec <__mcmp>:
 800d5ec:	b530      	push	{r4, r5, lr}
 800d5ee:	6902      	ldr	r2, [r0, #16]
 800d5f0:	690c      	ldr	r4, [r1, #16]
 800d5f2:	1b12      	subs	r2, r2, r4
 800d5f4:	d10e      	bne.n	800d614 <__mcmp+0x28>
 800d5f6:	f100 0314 	add.w	r3, r0, #20
 800d5fa:	3114      	adds	r1, #20
 800d5fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d600:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d604:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d608:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d60c:	42a5      	cmp	r5, r4
 800d60e:	d003      	beq.n	800d618 <__mcmp+0x2c>
 800d610:	d305      	bcc.n	800d61e <__mcmp+0x32>
 800d612:	2201      	movs	r2, #1
 800d614:	4610      	mov	r0, r2
 800d616:	bd30      	pop	{r4, r5, pc}
 800d618:	4283      	cmp	r3, r0
 800d61a:	d3f3      	bcc.n	800d604 <__mcmp+0x18>
 800d61c:	e7fa      	b.n	800d614 <__mcmp+0x28>
 800d61e:	f04f 32ff 	mov.w	r2, #4294967295
 800d622:	e7f7      	b.n	800d614 <__mcmp+0x28>

0800d624 <__mdiff>:
 800d624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d628:	460c      	mov	r4, r1
 800d62a:	4606      	mov	r6, r0
 800d62c:	4611      	mov	r1, r2
 800d62e:	4620      	mov	r0, r4
 800d630:	4617      	mov	r7, r2
 800d632:	f7ff ffdb 	bl	800d5ec <__mcmp>
 800d636:	1e05      	subs	r5, r0, #0
 800d638:	d110      	bne.n	800d65c <__mdiff+0x38>
 800d63a:	4629      	mov	r1, r5
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7ff fd0d 	bl	800d05c <_Balloc>
 800d642:	b930      	cbnz	r0, 800d652 <__mdiff+0x2e>
 800d644:	4b39      	ldr	r3, [pc, #228]	; (800d72c <__mdiff+0x108>)
 800d646:	4602      	mov	r2, r0
 800d648:	f240 2132 	movw	r1, #562	; 0x232
 800d64c:	4838      	ldr	r0, [pc, #224]	; (800d730 <__mdiff+0x10c>)
 800d64e:	f000 fd7f 	bl	800e150 <__assert_func>
 800d652:	2301      	movs	r3, #1
 800d654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65c:	bfa4      	itt	ge
 800d65e:	463b      	movge	r3, r7
 800d660:	4627      	movge	r7, r4
 800d662:	4630      	mov	r0, r6
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	bfa6      	itte	ge
 800d668:	461c      	movge	r4, r3
 800d66a:	2500      	movge	r5, #0
 800d66c:	2501      	movlt	r5, #1
 800d66e:	f7ff fcf5 	bl	800d05c <_Balloc>
 800d672:	b920      	cbnz	r0, 800d67e <__mdiff+0x5a>
 800d674:	4b2d      	ldr	r3, [pc, #180]	; (800d72c <__mdiff+0x108>)
 800d676:	4602      	mov	r2, r0
 800d678:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d67c:	e7e6      	b.n	800d64c <__mdiff+0x28>
 800d67e:	693e      	ldr	r6, [r7, #16]
 800d680:	60c5      	str	r5, [r0, #12]
 800d682:	6925      	ldr	r5, [r4, #16]
 800d684:	f107 0114 	add.w	r1, r7, #20
 800d688:	f104 0914 	add.w	r9, r4, #20
 800d68c:	f100 0e14 	add.w	lr, r0, #20
 800d690:	f107 0210 	add.w	r2, r7, #16
 800d694:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d698:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d69c:	46f2      	mov	sl, lr
 800d69e:	2700      	movs	r7, #0
 800d6a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d6a8:	fa1f f883 	uxth.w	r8, r3
 800d6ac:	fa17 f78b 	uxtah	r7, r7, fp
 800d6b0:	0c1b      	lsrs	r3, r3, #16
 800d6b2:	eba7 0808 	sub.w	r8, r7, r8
 800d6b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d6be:	fa1f f888 	uxth.w	r8, r8
 800d6c2:	141f      	asrs	r7, r3, #16
 800d6c4:	454d      	cmp	r5, r9
 800d6c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d6ca:	f84a 3b04 	str.w	r3, [sl], #4
 800d6ce:	d8e7      	bhi.n	800d6a0 <__mdiff+0x7c>
 800d6d0:	1b2b      	subs	r3, r5, r4
 800d6d2:	3b15      	subs	r3, #21
 800d6d4:	f023 0303 	bic.w	r3, r3, #3
 800d6d8:	3304      	adds	r3, #4
 800d6da:	3415      	adds	r4, #21
 800d6dc:	42a5      	cmp	r5, r4
 800d6de:	bf38      	it	cc
 800d6e0:	2304      	movcc	r3, #4
 800d6e2:	4419      	add	r1, r3
 800d6e4:	4473      	add	r3, lr
 800d6e6:	469e      	mov	lr, r3
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	4565      	cmp	r5, ip
 800d6ec:	d30e      	bcc.n	800d70c <__mdiff+0xe8>
 800d6ee:	f10c 0203 	add.w	r2, ip, #3
 800d6f2:	1a52      	subs	r2, r2, r1
 800d6f4:	f022 0203 	bic.w	r2, r2, #3
 800d6f8:	3903      	subs	r1, #3
 800d6fa:	458c      	cmp	ip, r1
 800d6fc:	bf38      	it	cc
 800d6fe:	2200      	movcc	r2, #0
 800d700:	441a      	add	r2, r3
 800d702:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d706:	b17b      	cbz	r3, 800d728 <__mdiff+0x104>
 800d708:	6106      	str	r6, [r0, #16]
 800d70a:	e7a5      	b.n	800d658 <__mdiff+0x34>
 800d70c:	f855 8b04 	ldr.w	r8, [r5], #4
 800d710:	fa17 f488 	uxtah	r4, r7, r8
 800d714:	1422      	asrs	r2, r4, #16
 800d716:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d71a:	b2a4      	uxth	r4, r4
 800d71c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d720:	f84e 4b04 	str.w	r4, [lr], #4
 800d724:	1417      	asrs	r7, r2, #16
 800d726:	e7e0      	b.n	800d6ea <__mdiff+0xc6>
 800d728:	3e01      	subs	r6, #1
 800d72a:	e7ea      	b.n	800d702 <__mdiff+0xde>
 800d72c:	0800e754 	.word	0x0800e754
 800d730:	0800e7e4 	.word	0x0800e7e4

0800d734 <__ulp>:
 800d734:	b082      	sub	sp, #8
 800d736:	ed8d 0b00 	vstr	d0, [sp]
 800d73a:	9b01      	ldr	r3, [sp, #4]
 800d73c:	4912      	ldr	r1, [pc, #72]	; (800d788 <__ulp+0x54>)
 800d73e:	4019      	ands	r1, r3
 800d740:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d744:	2900      	cmp	r1, #0
 800d746:	dd05      	ble.n	800d754 <__ulp+0x20>
 800d748:	2200      	movs	r2, #0
 800d74a:	460b      	mov	r3, r1
 800d74c:	ec43 2b10 	vmov	d0, r2, r3
 800d750:	b002      	add	sp, #8
 800d752:	4770      	bx	lr
 800d754:	4249      	negs	r1, r1
 800d756:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d75a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d75e:	f04f 0200 	mov.w	r2, #0
 800d762:	f04f 0300 	mov.w	r3, #0
 800d766:	da04      	bge.n	800d772 <__ulp+0x3e>
 800d768:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d76c:	fa41 f300 	asr.w	r3, r1, r0
 800d770:	e7ec      	b.n	800d74c <__ulp+0x18>
 800d772:	f1a0 0114 	sub.w	r1, r0, #20
 800d776:	291e      	cmp	r1, #30
 800d778:	bfda      	itte	le
 800d77a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d77e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d782:	2101      	movgt	r1, #1
 800d784:	460a      	mov	r2, r1
 800d786:	e7e1      	b.n	800d74c <__ulp+0x18>
 800d788:	7ff00000 	.word	0x7ff00000

0800d78c <__b2d>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	6905      	ldr	r5, [r0, #16]
 800d790:	f100 0714 	add.w	r7, r0, #20
 800d794:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d798:	1f2e      	subs	r6, r5, #4
 800d79a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f7ff fd52 	bl	800d248 <__hi0bits>
 800d7a4:	f1c0 0320 	rsb	r3, r0, #32
 800d7a8:	280a      	cmp	r0, #10
 800d7aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d828 <__b2d+0x9c>
 800d7ae:	600b      	str	r3, [r1, #0]
 800d7b0:	dc14      	bgt.n	800d7dc <__b2d+0x50>
 800d7b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d7b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d7ba:	42b7      	cmp	r7, r6
 800d7bc:	ea41 030c 	orr.w	r3, r1, ip
 800d7c0:	bf34      	ite	cc
 800d7c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7c6:	2100      	movcs	r1, #0
 800d7c8:	3015      	adds	r0, #21
 800d7ca:	fa04 f000 	lsl.w	r0, r4, r0
 800d7ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800d7d2:	ea40 0201 	orr.w	r2, r0, r1
 800d7d6:	ec43 2b10 	vmov	d0, r2, r3
 800d7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7dc:	42b7      	cmp	r7, r6
 800d7de:	bf3a      	itte	cc
 800d7e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d7e8:	2100      	movcs	r1, #0
 800d7ea:	380b      	subs	r0, #11
 800d7ec:	d017      	beq.n	800d81e <__b2d+0x92>
 800d7ee:	f1c0 0c20 	rsb	ip, r0, #32
 800d7f2:	fa04 f500 	lsl.w	r5, r4, r0
 800d7f6:	42be      	cmp	r6, r7
 800d7f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d7fc:	ea45 0504 	orr.w	r5, r5, r4
 800d800:	bf8c      	ite	hi
 800d802:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d806:	2400      	movls	r4, #0
 800d808:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d80c:	fa01 f000 	lsl.w	r0, r1, r0
 800d810:	fa24 f40c 	lsr.w	r4, r4, ip
 800d814:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d818:	ea40 0204 	orr.w	r2, r0, r4
 800d81c:	e7db      	b.n	800d7d6 <__b2d+0x4a>
 800d81e:	ea44 030c 	orr.w	r3, r4, ip
 800d822:	460a      	mov	r2, r1
 800d824:	e7d7      	b.n	800d7d6 <__b2d+0x4a>
 800d826:	bf00      	nop
 800d828:	3ff00000 	.word	0x3ff00000

0800d82c <__d2b>:
 800d82c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d830:	4689      	mov	r9, r1
 800d832:	2101      	movs	r1, #1
 800d834:	ec57 6b10 	vmov	r6, r7, d0
 800d838:	4690      	mov	r8, r2
 800d83a:	f7ff fc0f 	bl	800d05c <_Balloc>
 800d83e:	4604      	mov	r4, r0
 800d840:	b930      	cbnz	r0, 800d850 <__d2b+0x24>
 800d842:	4602      	mov	r2, r0
 800d844:	4b25      	ldr	r3, [pc, #148]	; (800d8dc <__d2b+0xb0>)
 800d846:	4826      	ldr	r0, [pc, #152]	; (800d8e0 <__d2b+0xb4>)
 800d848:	f240 310a 	movw	r1, #778	; 0x30a
 800d84c:	f000 fc80 	bl	800e150 <__assert_func>
 800d850:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d854:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d858:	bb35      	cbnz	r5, 800d8a8 <__d2b+0x7c>
 800d85a:	2e00      	cmp	r6, #0
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	d028      	beq.n	800d8b2 <__d2b+0x86>
 800d860:	4668      	mov	r0, sp
 800d862:	9600      	str	r6, [sp, #0]
 800d864:	f7ff fd10 	bl	800d288 <__lo0bits>
 800d868:	9900      	ldr	r1, [sp, #0]
 800d86a:	b300      	cbz	r0, 800d8ae <__d2b+0x82>
 800d86c:	9a01      	ldr	r2, [sp, #4]
 800d86e:	f1c0 0320 	rsb	r3, r0, #32
 800d872:	fa02 f303 	lsl.w	r3, r2, r3
 800d876:	430b      	orrs	r3, r1
 800d878:	40c2      	lsrs	r2, r0
 800d87a:	6163      	str	r3, [r4, #20]
 800d87c:	9201      	str	r2, [sp, #4]
 800d87e:	9b01      	ldr	r3, [sp, #4]
 800d880:	61a3      	str	r3, [r4, #24]
 800d882:	2b00      	cmp	r3, #0
 800d884:	bf14      	ite	ne
 800d886:	2202      	movne	r2, #2
 800d888:	2201      	moveq	r2, #1
 800d88a:	6122      	str	r2, [r4, #16]
 800d88c:	b1d5      	cbz	r5, 800d8c4 <__d2b+0x98>
 800d88e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d892:	4405      	add	r5, r0
 800d894:	f8c9 5000 	str.w	r5, [r9]
 800d898:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d89c:	f8c8 0000 	str.w	r0, [r8]
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	b003      	add	sp, #12
 800d8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8ac:	e7d5      	b.n	800d85a <__d2b+0x2e>
 800d8ae:	6161      	str	r1, [r4, #20]
 800d8b0:	e7e5      	b.n	800d87e <__d2b+0x52>
 800d8b2:	a801      	add	r0, sp, #4
 800d8b4:	f7ff fce8 	bl	800d288 <__lo0bits>
 800d8b8:	9b01      	ldr	r3, [sp, #4]
 800d8ba:	6163      	str	r3, [r4, #20]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	6122      	str	r2, [r4, #16]
 800d8c0:	3020      	adds	r0, #32
 800d8c2:	e7e3      	b.n	800d88c <__d2b+0x60>
 800d8c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d8c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d8cc:	f8c9 0000 	str.w	r0, [r9]
 800d8d0:	6918      	ldr	r0, [r3, #16]
 800d8d2:	f7ff fcb9 	bl	800d248 <__hi0bits>
 800d8d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8da:	e7df      	b.n	800d89c <__d2b+0x70>
 800d8dc:	0800e754 	.word	0x0800e754
 800d8e0:	0800e7e4 	.word	0x0800e7e4

0800d8e4 <__ratio>:
 800d8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	4688      	mov	r8, r1
 800d8ea:	4669      	mov	r1, sp
 800d8ec:	4681      	mov	r9, r0
 800d8ee:	f7ff ff4d 	bl	800d78c <__b2d>
 800d8f2:	a901      	add	r1, sp, #4
 800d8f4:	4640      	mov	r0, r8
 800d8f6:	ec55 4b10 	vmov	r4, r5, d0
 800d8fa:	f7ff ff47 	bl	800d78c <__b2d>
 800d8fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d902:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d906:	eba3 0c02 	sub.w	ip, r3, r2
 800d90a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d914:	ec51 0b10 	vmov	r0, r1, d0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	bfd6      	itet	le
 800d91c:	460a      	movle	r2, r1
 800d91e:	462a      	movgt	r2, r5
 800d920:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d924:	468b      	mov	fp, r1
 800d926:	462f      	mov	r7, r5
 800d928:	bfd4      	ite	le
 800d92a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d92e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d932:	4620      	mov	r0, r4
 800d934:	ee10 2a10 	vmov	r2, s0
 800d938:	465b      	mov	r3, fp
 800d93a:	4639      	mov	r1, r7
 800d93c:	f7f2 ff86 	bl	800084c <__aeabi_ddiv>
 800d940:	ec41 0b10 	vmov	d0, r0, r1
 800d944:	b003      	add	sp, #12
 800d946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d94a <__copybits>:
 800d94a:	3901      	subs	r1, #1
 800d94c:	b570      	push	{r4, r5, r6, lr}
 800d94e:	1149      	asrs	r1, r1, #5
 800d950:	6914      	ldr	r4, [r2, #16]
 800d952:	3101      	adds	r1, #1
 800d954:	f102 0314 	add.w	r3, r2, #20
 800d958:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d95c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d960:	1f05      	subs	r5, r0, #4
 800d962:	42a3      	cmp	r3, r4
 800d964:	d30c      	bcc.n	800d980 <__copybits+0x36>
 800d966:	1aa3      	subs	r3, r4, r2
 800d968:	3b11      	subs	r3, #17
 800d96a:	f023 0303 	bic.w	r3, r3, #3
 800d96e:	3211      	adds	r2, #17
 800d970:	42a2      	cmp	r2, r4
 800d972:	bf88      	it	hi
 800d974:	2300      	movhi	r3, #0
 800d976:	4418      	add	r0, r3
 800d978:	2300      	movs	r3, #0
 800d97a:	4288      	cmp	r0, r1
 800d97c:	d305      	bcc.n	800d98a <__copybits+0x40>
 800d97e:	bd70      	pop	{r4, r5, r6, pc}
 800d980:	f853 6b04 	ldr.w	r6, [r3], #4
 800d984:	f845 6f04 	str.w	r6, [r5, #4]!
 800d988:	e7eb      	b.n	800d962 <__copybits+0x18>
 800d98a:	f840 3b04 	str.w	r3, [r0], #4
 800d98e:	e7f4      	b.n	800d97a <__copybits+0x30>

0800d990 <__any_on>:
 800d990:	f100 0214 	add.w	r2, r0, #20
 800d994:	6900      	ldr	r0, [r0, #16]
 800d996:	114b      	asrs	r3, r1, #5
 800d998:	4298      	cmp	r0, r3
 800d99a:	b510      	push	{r4, lr}
 800d99c:	db11      	blt.n	800d9c2 <__any_on+0x32>
 800d99e:	dd0a      	ble.n	800d9b6 <__any_on+0x26>
 800d9a0:	f011 011f 	ands.w	r1, r1, #31
 800d9a4:	d007      	beq.n	800d9b6 <__any_on+0x26>
 800d9a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d9aa:	fa24 f001 	lsr.w	r0, r4, r1
 800d9ae:	fa00 f101 	lsl.w	r1, r0, r1
 800d9b2:	428c      	cmp	r4, r1
 800d9b4:	d10b      	bne.n	800d9ce <__any_on+0x3e>
 800d9b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d803      	bhi.n	800d9c6 <__any_on+0x36>
 800d9be:	2000      	movs	r0, #0
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	e7f7      	b.n	800d9b6 <__any_on+0x26>
 800d9c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9ca:	2900      	cmp	r1, #0
 800d9cc:	d0f5      	beq.n	800d9ba <__any_on+0x2a>
 800d9ce:	2001      	movs	r0, #1
 800d9d0:	e7f6      	b.n	800d9c0 <__any_on+0x30>

0800d9d2 <_calloc_r>:
 800d9d2:	b513      	push	{r0, r1, r4, lr}
 800d9d4:	434a      	muls	r2, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	9201      	str	r2, [sp, #4]
 800d9da:	f7fc f99f 	bl	8009d1c <_malloc_r>
 800d9de:	4604      	mov	r4, r0
 800d9e0:	b118      	cbz	r0, 800d9ea <_calloc_r+0x18>
 800d9e2:	9a01      	ldr	r2, [sp, #4]
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	f7fc f940 	bl	8009c6a <memset>
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	b002      	add	sp, #8
 800d9ee:	bd10      	pop	{r4, pc}

0800d9f0 <__ssputs_r>:
 800d9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	688e      	ldr	r6, [r1, #8]
 800d9f6:	429e      	cmp	r6, r3
 800d9f8:	4682      	mov	sl, r0
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	4690      	mov	r8, r2
 800d9fe:	461f      	mov	r7, r3
 800da00:	d838      	bhi.n	800da74 <__ssputs_r+0x84>
 800da02:	898a      	ldrh	r2, [r1, #12]
 800da04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da08:	d032      	beq.n	800da70 <__ssputs_r+0x80>
 800da0a:	6825      	ldr	r5, [r4, #0]
 800da0c:	6909      	ldr	r1, [r1, #16]
 800da0e:	eba5 0901 	sub.w	r9, r5, r1
 800da12:	6965      	ldr	r5, [r4, #20]
 800da14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da1c:	3301      	adds	r3, #1
 800da1e:	444b      	add	r3, r9
 800da20:	106d      	asrs	r5, r5, #1
 800da22:	429d      	cmp	r5, r3
 800da24:	bf38      	it	cc
 800da26:	461d      	movcc	r5, r3
 800da28:	0553      	lsls	r3, r2, #21
 800da2a:	d531      	bpl.n	800da90 <__ssputs_r+0xa0>
 800da2c:	4629      	mov	r1, r5
 800da2e:	f7fc f975 	bl	8009d1c <_malloc_r>
 800da32:	4606      	mov	r6, r0
 800da34:	b950      	cbnz	r0, 800da4c <__ssputs_r+0x5c>
 800da36:	230c      	movs	r3, #12
 800da38:	f8ca 3000 	str.w	r3, [sl]
 800da3c:	89a3      	ldrh	r3, [r4, #12]
 800da3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da42:	81a3      	strh	r3, [r4, #12]
 800da44:	f04f 30ff 	mov.w	r0, #4294967295
 800da48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da4c:	6921      	ldr	r1, [r4, #16]
 800da4e:	464a      	mov	r2, r9
 800da50:	f7ff faea 	bl	800d028 <memcpy>
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	6126      	str	r6, [r4, #16]
 800da62:	6165      	str	r5, [r4, #20]
 800da64:	444e      	add	r6, r9
 800da66:	eba5 0509 	sub.w	r5, r5, r9
 800da6a:	6026      	str	r6, [r4, #0]
 800da6c:	60a5      	str	r5, [r4, #8]
 800da6e:	463e      	mov	r6, r7
 800da70:	42be      	cmp	r6, r7
 800da72:	d900      	bls.n	800da76 <__ssputs_r+0x86>
 800da74:	463e      	mov	r6, r7
 800da76:	4632      	mov	r2, r6
 800da78:	6820      	ldr	r0, [r4, #0]
 800da7a:	4641      	mov	r1, r8
 800da7c:	f000 fbba 	bl	800e1f4 <memmove>
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	6822      	ldr	r2, [r4, #0]
 800da84:	1b9b      	subs	r3, r3, r6
 800da86:	4432      	add	r2, r6
 800da88:	60a3      	str	r3, [r4, #8]
 800da8a:	6022      	str	r2, [r4, #0]
 800da8c:	2000      	movs	r0, #0
 800da8e:	e7db      	b.n	800da48 <__ssputs_r+0x58>
 800da90:	462a      	mov	r2, r5
 800da92:	f000 fbc9 	bl	800e228 <_realloc_r>
 800da96:	4606      	mov	r6, r0
 800da98:	2800      	cmp	r0, #0
 800da9a:	d1e1      	bne.n	800da60 <__ssputs_r+0x70>
 800da9c:	6921      	ldr	r1, [r4, #16]
 800da9e:	4650      	mov	r0, sl
 800daa0:	f7fc f8ec 	bl	8009c7c <_free_r>
 800daa4:	e7c7      	b.n	800da36 <__ssputs_r+0x46>
	...

0800daa8 <_svfiprintf_r>:
 800daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	4698      	mov	r8, r3
 800daae:	898b      	ldrh	r3, [r1, #12]
 800dab0:	061b      	lsls	r3, r3, #24
 800dab2:	b09d      	sub	sp, #116	; 0x74
 800dab4:	4607      	mov	r7, r0
 800dab6:	460d      	mov	r5, r1
 800dab8:	4614      	mov	r4, r2
 800daba:	d50e      	bpl.n	800dada <_svfiprintf_r+0x32>
 800dabc:	690b      	ldr	r3, [r1, #16]
 800dabe:	b963      	cbnz	r3, 800dada <_svfiprintf_r+0x32>
 800dac0:	2140      	movs	r1, #64	; 0x40
 800dac2:	f7fc f92b 	bl	8009d1c <_malloc_r>
 800dac6:	6028      	str	r0, [r5, #0]
 800dac8:	6128      	str	r0, [r5, #16]
 800daca:	b920      	cbnz	r0, 800dad6 <_svfiprintf_r+0x2e>
 800dacc:	230c      	movs	r3, #12
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	f04f 30ff 	mov.w	r0, #4294967295
 800dad4:	e0d1      	b.n	800dc7a <_svfiprintf_r+0x1d2>
 800dad6:	2340      	movs	r3, #64	; 0x40
 800dad8:	616b      	str	r3, [r5, #20]
 800dada:	2300      	movs	r3, #0
 800dadc:	9309      	str	r3, [sp, #36]	; 0x24
 800dade:	2320      	movs	r3, #32
 800dae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dae4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dae8:	2330      	movs	r3, #48	; 0x30
 800daea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc94 <_svfiprintf_r+0x1ec>
 800daee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daf2:	f04f 0901 	mov.w	r9, #1
 800daf6:	4623      	mov	r3, r4
 800daf8:	469a      	mov	sl, r3
 800dafa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dafe:	b10a      	cbz	r2, 800db04 <_svfiprintf_r+0x5c>
 800db00:	2a25      	cmp	r2, #37	; 0x25
 800db02:	d1f9      	bne.n	800daf8 <_svfiprintf_r+0x50>
 800db04:	ebba 0b04 	subs.w	fp, sl, r4
 800db08:	d00b      	beq.n	800db22 <_svfiprintf_r+0x7a>
 800db0a:	465b      	mov	r3, fp
 800db0c:	4622      	mov	r2, r4
 800db0e:	4629      	mov	r1, r5
 800db10:	4638      	mov	r0, r7
 800db12:	f7ff ff6d 	bl	800d9f0 <__ssputs_r>
 800db16:	3001      	adds	r0, #1
 800db18:	f000 80aa 	beq.w	800dc70 <_svfiprintf_r+0x1c8>
 800db1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db1e:	445a      	add	r2, fp
 800db20:	9209      	str	r2, [sp, #36]	; 0x24
 800db22:	f89a 3000 	ldrb.w	r3, [sl]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f000 80a2 	beq.w	800dc70 <_svfiprintf_r+0x1c8>
 800db2c:	2300      	movs	r3, #0
 800db2e:	f04f 32ff 	mov.w	r2, #4294967295
 800db32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db36:	f10a 0a01 	add.w	sl, sl, #1
 800db3a:	9304      	str	r3, [sp, #16]
 800db3c:	9307      	str	r3, [sp, #28]
 800db3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db42:	931a      	str	r3, [sp, #104]	; 0x68
 800db44:	4654      	mov	r4, sl
 800db46:	2205      	movs	r2, #5
 800db48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4c:	4851      	ldr	r0, [pc, #324]	; (800dc94 <_svfiprintf_r+0x1ec>)
 800db4e:	f7f2 fb47 	bl	80001e0 <memchr>
 800db52:	9a04      	ldr	r2, [sp, #16]
 800db54:	b9d8      	cbnz	r0, 800db8e <_svfiprintf_r+0xe6>
 800db56:	06d0      	lsls	r0, r2, #27
 800db58:	bf44      	itt	mi
 800db5a:	2320      	movmi	r3, #32
 800db5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db60:	0711      	lsls	r1, r2, #28
 800db62:	bf44      	itt	mi
 800db64:	232b      	movmi	r3, #43	; 0x2b
 800db66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db6a:	f89a 3000 	ldrb.w	r3, [sl]
 800db6e:	2b2a      	cmp	r3, #42	; 0x2a
 800db70:	d015      	beq.n	800db9e <_svfiprintf_r+0xf6>
 800db72:	9a07      	ldr	r2, [sp, #28]
 800db74:	4654      	mov	r4, sl
 800db76:	2000      	movs	r0, #0
 800db78:	f04f 0c0a 	mov.w	ip, #10
 800db7c:	4621      	mov	r1, r4
 800db7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db82:	3b30      	subs	r3, #48	; 0x30
 800db84:	2b09      	cmp	r3, #9
 800db86:	d94e      	bls.n	800dc26 <_svfiprintf_r+0x17e>
 800db88:	b1b0      	cbz	r0, 800dbb8 <_svfiprintf_r+0x110>
 800db8a:	9207      	str	r2, [sp, #28]
 800db8c:	e014      	b.n	800dbb8 <_svfiprintf_r+0x110>
 800db8e:	eba0 0308 	sub.w	r3, r0, r8
 800db92:	fa09 f303 	lsl.w	r3, r9, r3
 800db96:	4313      	orrs	r3, r2
 800db98:	9304      	str	r3, [sp, #16]
 800db9a:	46a2      	mov	sl, r4
 800db9c:	e7d2      	b.n	800db44 <_svfiprintf_r+0x9c>
 800db9e:	9b03      	ldr	r3, [sp, #12]
 800dba0:	1d19      	adds	r1, r3, #4
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	9103      	str	r1, [sp, #12]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	bfbb      	ittet	lt
 800dbaa:	425b      	neglt	r3, r3
 800dbac:	f042 0202 	orrlt.w	r2, r2, #2
 800dbb0:	9307      	strge	r3, [sp, #28]
 800dbb2:	9307      	strlt	r3, [sp, #28]
 800dbb4:	bfb8      	it	lt
 800dbb6:	9204      	strlt	r2, [sp, #16]
 800dbb8:	7823      	ldrb	r3, [r4, #0]
 800dbba:	2b2e      	cmp	r3, #46	; 0x2e
 800dbbc:	d10c      	bne.n	800dbd8 <_svfiprintf_r+0x130>
 800dbbe:	7863      	ldrb	r3, [r4, #1]
 800dbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc2:	d135      	bne.n	800dc30 <_svfiprintf_r+0x188>
 800dbc4:	9b03      	ldr	r3, [sp, #12]
 800dbc6:	1d1a      	adds	r2, r3, #4
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	9203      	str	r2, [sp, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bfb8      	it	lt
 800dbd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbd4:	3402      	adds	r4, #2
 800dbd6:	9305      	str	r3, [sp, #20]
 800dbd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dca4 <_svfiprintf_r+0x1fc>
 800dbdc:	7821      	ldrb	r1, [r4, #0]
 800dbde:	2203      	movs	r2, #3
 800dbe0:	4650      	mov	r0, sl
 800dbe2:	f7f2 fafd 	bl	80001e0 <memchr>
 800dbe6:	b140      	cbz	r0, 800dbfa <_svfiprintf_r+0x152>
 800dbe8:	2340      	movs	r3, #64	; 0x40
 800dbea:	eba0 000a 	sub.w	r0, r0, sl
 800dbee:	fa03 f000 	lsl.w	r0, r3, r0
 800dbf2:	9b04      	ldr	r3, [sp, #16]
 800dbf4:	4303      	orrs	r3, r0
 800dbf6:	3401      	adds	r4, #1
 800dbf8:	9304      	str	r3, [sp, #16]
 800dbfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbfe:	4826      	ldr	r0, [pc, #152]	; (800dc98 <_svfiprintf_r+0x1f0>)
 800dc00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc04:	2206      	movs	r2, #6
 800dc06:	f7f2 faeb 	bl	80001e0 <memchr>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d038      	beq.n	800dc80 <_svfiprintf_r+0x1d8>
 800dc0e:	4b23      	ldr	r3, [pc, #140]	; (800dc9c <_svfiprintf_r+0x1f4>)
 800dc10:	bb1b      	cbnz	r3, 800dc5a <_svfiprintf_r+0x1b2>
 800dc12:	9b03      	ldr	r3, [sp, #12]
 800dc14:	3307      	adds	r3, #7
 800dc16:	f023 0307 	bic.w	r3, r3, #7
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	9303      	str	r3, [sp, #12]
 800dc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc20:	4433      	add	r3, r6
 800dc22:	9309      	str	r3, [sp, #36]	; 0x24
 800dc24:	e767      	b.n	800daf6 <_svfiprintf_r+0x4e>
 800dc26:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	2001      	movs	r0, #1
 800dc2e:	e7a5      	b.n	800db7c <_svfiprintf_r+0xd4>
 800dc30:	2300      	movs	r3, #0
 800dc32:	3401      	adds	r4, #1
 800dc34:	9305      	str	r3, [sp, #20]
 800dc36:	4619      	mov	r1, r3
 800dc38:	f04f 0c0a 	mov.w	ip, #10
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc42:	3a30      	subs	r2, #48	; 0x30
 800dc44:	2a09      	cmp	r2, #9
 800dc46:	d903      	bls.n	800dc50 <_svfiprintf_r+0x1a8>
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d0c5      	beq.n	800dbd8 <_svfiprintf_r+0x130>
 800dc4c:	9105      	str	r1, [sp, #20]
 800dc4e:	e7c3      	b.n	800dbd8 <_svfiprintf_r+0x130>
 800dc50:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc54:	4604      	mov	r4, r0
 800dc56:	2301      	movs	r3, #1
 800dc58:	e7f0      	b.n	800dc3c <_svfiprintf_r+0x194>
 800dc5a:	ab03      	add	r3, sp, #12
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	462a      	mov	r2, r5
 800dc60:	4b0f      	ldr	r3, [pc, #60]	; (800dca0 <_svfiprintf_r+0x1f8>)
 800dc62:	a904      	add	r1, sp, #16
 800dc64:	4638      	mov	r0, r7
 800dc66:	f7fc f953 	bl	8009f10 <_printf_float>
 800dc6a:	1c42      	adds	r2, r0, #1
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	d1d6      	bne.n	800dc1e <_svfiprintf_r+0x176>
 800dc70:	89ab      	ldrh	r3, [r5, #12]
 800dc72:	065b      	lsls	r3, r3, #25
 800dc74:	f53f af2c 	bmi.w	800dad0 <_svfiprintf_r+0x28>
 800dc78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc7a:	b01d      	add	sp, #116	; 0x74
 800dc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc80:	ab03      	add	r3, sp, #12
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	462a      	mov	r2, r5
 800dc86:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <_svfiprintf_r+0x1f8>)
 800dc88:	a904      	add	r1, sp, #16
 800dc8a:	4638      	mov	r0, r7
 800dc8c:	f7fc fbe4 	bl	800a458 <_printf_i>
 800dc90:	e7eb      	b.n	800dc6a <_svfiprintf_r+0x1c2>
 800dc92:	bf00      	nop
 800dc94:	0800e944 	.word	0x0800e944
 800dc98:	0800e94e 	.word	0x0800e94e
 800dc9c:	08009f11 	.word	0x08009f11
 800dca0:	0800d9f1 	.word	0x0800d9f1
 800dca4:	0800e94a 	.word	0x0800e94a

0800dca8 <__sfputc_r>:
 800dca8:	6893      	ldr	r3, [r2, #8]
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	b410      	push	{r4}
 800dcb0:	6093      	str	r3, [r2, #8]
 800dcb2:	da08      	bge.n	800dcc6 <__sfputc_r+0x1e>
 800dcb4:	6994      	ldr	r4, [r2, #24]
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	db01      	blt.n	800dcbe <__sfputc_r+0x16>
 800dcba:	290a      	cmp	r1, #10
 800dcbc:	d103      	bne.n	800dcc6 <__sfputc_r+0x1e>
 800dcbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcc2:	f000 b977 	b.w	800dfb4 <__swbuf_r>
 800dcc6:	6813      	ldr	r3, [r2, #0]
 800dcc8:	1c58      	adds	r0, r3, #1
 800dcca:	6010      	str	r0, [r2, #0]
 800dccc:	7019      	strb	r1, [r3, #0]
 800dcce:	4608      	mov	r0, r1
 800dcd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <__sfputs_r>:
 800dcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd8:	4606      	mov	r6, r0
 800dcda:	460f      	mov	r7, r1
 800dcdc:	4614      	mov	r4, r2
 800dcde:	18d5      	adds	r5, r2, r3
 800dce0:	42ac      	cmp	r4, r5
 800dce2:	d101      	bne.n	800dce8 <__sfputs_r+0x12>
 800dce4:	2000      	movs	r0, #0
 800dce6:	e007      	b.n	800dcf8 <__sfputs_r+0x22>
 800dce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcec:	463a      	mov	r2, r7
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f7ff ffda 	bl	800dca8 <__sfputc_r>
 800dcf4:	1c43      	adds	r3, r0, #1
 800dcf6:	d1f3      	bne.n	800dce0 <__sfputs_r+0xa>
 800dcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcfc <_vfiprintf_r>:
 800dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	460d      	mov	r5, r1
 800dd02:	b09d      	sub	sp, #116	; 0x74
 800dd04:	4614      	mov	r4, r2
 800dd06:	4698      	mov	r8, r3
 800dd08:	4606      	mov	r6, r0
 800dd0a:	b118      	cbz	r0, 800dd14 <_vfiprintf_r+0x18>
 800dd0c:	6983      	ldr	r3, [r0, #24]
 800dd0e:	b90b      	cbnz	r3, 800dd14 <_vfiprintf_r+0x18>
 800dd10:	f7fb fee6 	bl	8009ae0 <__sinit>
 800dd14:	4b89      	ldr	r3, [pc, #548]	; (800df3c <_vfiprintf_r+0x240>)
 800dd16:	429d      	cmp	r5, r3
 800dd18:	d11b      	bne.n	800dd52 <_vfiprintf_r+0x56>
 800dd1a:	6875      	ldr	r5, [r6, #4]
 800dd1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd1e:	07d9      	lsls	r1, r3, #31
 800dd20:	d405      	bmi.n	800dd2e <_vfiprintf_r+0x32>
 800dd22:	89ab      	ldrh	r3, [r5, #12]
 800dd24:	059a      	lsls	r2, r3, #22
 800dd26:	d402      	bmi.n	800dd2e <_vfiprintf_r+0x32>
 800dd28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd2a:	f7fb ff9c 	bl	8009c66 <__retarget_lock_acquire_recursive>
 800dd2e:	89ab      	ldrh	r3, [r5, #12]
 800dd30:	071b      	lsls	r3, r3, #28
 800dd32:	d501      	bpl.n	800dd38 <_vfiprintf_r+0x3c>
 800dd34:	692b      	ldr	r3, [r5, #16]
 800dd36:	b9eb      	cbnz	r3, 800dd74 <_vfiprintf_r+0x78>
 800dd38:	4629      	mov	r1, r5
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f000 f99a 	bl	800e074 <__swsetup_r>
 800dd40:	b1c0      	cbz	r0, 800dd74 <_vfiprintf_r+0x78>
 800dd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd44:	07dc      	lsls	r4, r3, #31
 800dd46:	d50e      	bpl.n	800dd66 <_vfiprintf_r+0x6a>
 800dd48:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4c:	b01d      	add	sp, #116	; 0x74
 800dd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd52:	4b7b      	ldr	r3, [pc, #492]	; (800df40 <_vfiprintf_r+0x244>)
 800dd54:	429d      	cmp	r5, r3
 800dd56:	d101      	bne.n	800dd5c <_vfiprintf_r+0x60>
 800dd58:	68b5      	ldr	r5, [r6, #8]
 800dd5a:	e7df      	b.n	800dd1c <_vfiprintf_r+0x20>
 800dd5c:	4b79      	ldr	r3, [pc, #484]	; (800df44 <_vfiprintf_r+0x248>)
 800dd5e:	429d      	cmp	r5, r3
 800dd60:	bf08      	it	eq
 800dd62:	68f5      	ldreq	r5, [r6, #12]
 800dd64:	e7da      	b.n	800dd1c <_vfiprintf_r+0x20>
 800dd66:	89ab      	ldrh	r3, [r5, #12]
 800dd68:	0598      	lsls	r0, r3, #22
 800dd6a:	d4ed      	bmi.n	800dd48 <_vfiprintf_r+0x4c>
 800dd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd6e:	f7fb ff7b 	bl	8009c68 <__retarget_lock_release_recursive>
 800dd72:	e7e9      	b.n	800dd48 <_vfiprintf_r+0x4c>
 800dd74:	2300      	movs	r3, #0
 800dd76:	9309      	str	r3, [sp, #36]	; 0x24
 800dd78:	2320      	movs	r3, #32
 800dd7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd82:	2330      	movs	r3, #48	; 0x30
 800dd84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df48 <_vfiprintf_r+0x24c>
 800dd88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd8c:	f04f 0901 	mov.w	r9, #1
 800dd90:	4623      	mov	r3, r4
 800dd92:	469a      	mov	sl, r3
 800dd94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd98:	b10a      	cbz	r2, 800dd9e <_vfiprintf_r+0xa2>
 800dd9a:	2a25      	cmp	r2, #37	; 0x25
 800dd9c:	d1f9      	bne.n	800dd92 <_vfiprintf_r+0x96>
 800dd9e:	ebba 0b04 	subs.w	fp, sl, r4
 800dda2:	d00b      	beq.n	800ddbc <_vfiprintf_r+0xc0>
 800dda4:	465b      	mov	r3, fp
 800dda6:	4622      	mov	r2, r4
 800dda8:	4629      	mov	r1, r5
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f7ff ff93 	bl	800dcd6 <__sfputs_r>
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	f000 80aa 	beq.w	800df0a <_vfiprintf_r+0x20e>
 800ddb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddb8:	445a      	add	r2, fp
 800ddba:	9209      	str	r2, [sp, #36]	; 0x24
 800ddbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 80a2 	beq.w	800df0a <_vfiprintf_r+0x20e>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddd0:	f10a 0a01 	add.w	sl, sl, #1
 800ddd4:	9304      	str	r3, [sp, #16]
 800ddd6:	9307      	str	r3, [sp, #28]
 800ddd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dddc:	931a      	str	r3, [sp, #104]	; 0x68
 800ddde:	4654      	mov	r4, sl
 800dde0:	2205      	movs	r2, #5
 800dde2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dde6:	4858      	ldr	r0, [pc, #352]	; (800df48 <_vfiprintf_r+0x24c>)
 800dde8:	f7f2 f9fa 	bl	80001e0 <memchr>
 800ddec:	9a04      	ldr	r2, [sp, #16]
 800ddee:	b9d8      	cbnz	r0, 800de28 <_vfiprintf_r+0x12c>
 800ddf0:	06d1      	lsls	r1, r2, #27
 800ddf2:	bf44      	itt	mi
 800ddf4:	2320      	movmi	r3, #32
 800ddf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddfa:	0713      	lsls	r3, r2, #28
 800ddfc:	bf44      	itt	mi
 800ddfe:	232b      	movmi	r3, #43	; 0x2b
 800de00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de04:	f89a 3000 	ldrb.w	r3, [sl]
 800de08:	2b2a      	cmp	r3, #42	; 0x2a
 800de0a:	d015      	beq.n	800de38 <_vfiprintf_r+0x13c>
 800de0c:	9a07      	ldr	r2, [sp, #28]
 800de0e:	4654      	mov	r4, sl
 800de10:	2000      	movs	r0, #0
 800de12:	f04f 0c0a 	mov.w	ip, #10
 800de16:	4621      	mov	r1, r4
 800de18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de1c:	3b30      	subs	r3, #48	; 0x30
 800de1e:	2b09      	cmp	r3, #9
 800de20:	d94e      	bls.n	800dec0 <_vfiprintf_r+0x1c4>
 800de22:	b1b0      	cbz	r0, 800de52 <_vfiprintf_r+0x156>
 800de24:	9207      	str	r2, [sp, #28]
 800de26:	e014      	b.n	800de52 <_vfiprintf_r+0x156>
 800de28:	eba0 0308 	sub.w	r3, r0, r8
 800de2c:	fa09 f303 	lsl.w	r3, r9, r3
 800de30:	4313      	orrs	r3, r2
 800de32:	9304      	str	r3, [sp, #16]
 800de34:	46a2      	mov	sl, r4
 800de36:	e7d2      	b.n	800ddde <_vfiprintf_r+0xe2>
 800de38:	9b03      	ldr	r3, [sp, #12]
 800de3a:	1d19      	adds	r1, r3, #4
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	9103      	str	r1, [sp, #12]
 800de40:	2b00      	cmp	r3, #0
 800de42:	bfbb      	ittet	lt
 800de44:	425b      	neglt	r3, r3
 800de46:	f042 0202 	orrlt.w	r2, r2, #2
 800de4a:	9307      	strge	r3, [sp, #28]
 800de4c:	9307      	strlt	r3, [sp, #28]
 800de4e:	bfb8      	it	lt
 800de50:	9204      	strlt	r2, [sp, #16]
 800de52:	7823      	ldrb	r3, [r4, #0]
 800de54:	2b2e      	cmp	r3, #46	; 0x2e
 800de56:	d10c      	bne.n	800de72 <_vfiprintf_r+0x176>
 800de58:	7863      	ldrb	r3, [r4, #1]
 800de5a:	2b2a      	cmp	r3, #42	; 0x2a
 800de5c:	d135      	bne.n	800deca <_vfiprintf_r+0x1ce>
 800de5e:	9b03      	ldr	r3, [sp, #12]
 800de60:	1d1a      	adds	r2, r3, #4
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	9203      	str	r2, [sp, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	bfb8      	it	lt
 800de6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800de6e:	3402      	adds	r4, #2
 800de70:	9305      	str	r3, [sp, #20]
 800de72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df58 <_vfiprintf_r+0x25c>
 800de76:	7821      	ldrb	r1, [r4, #0]
 800de78:	2203      	movs	r2, #3
 800de7a:	4650      	mov	r0, sl
 800de7c:	f7f2 f9b0 	bl	80001e0 <memchr>
 800de80:	b140      	cbz	r0, 800de94 <_vfiprintf_r+0x198>
 800de82:	2340      	movs	r3, #64	; 0x40
 800de84:	eba0 000a 	sub.w	r0, r0, sl
 800de88:	fa03 f000 	lsl.w	r0, r3, r0
 800de8c:	9b04      	ldr	r3, [sp, #16]
 800de8e:	4303      	orrs	r3, r0
 800de90:	3401      	adds	r4, #1
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de98:	482c      	ldr	r0, [pc, #176]	; (800df4c <_vfiprintf_r+0x250>)
 800de9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de9e:	2206      	movs	r2, #6
 800dea0:	f7f2 f99e 	bl	80001e0 <memchr>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d03f      	beq.n	800df28 <_vfiprintf_r+0x22c>
 800dea8:	4b29      	ldr	r3, [pc, #164]	; (800df50 <_vfiprintf_r+0x254>)
 800deaa:	bb1b      	cbnz	r3, 800def4 <_vfiprintf_r+0x1f8>
 800deac:	9b03      	ldr	r3, [sp, #12]
 800deae:	3307      	adds	r3, #7
 800deb0:	f023 0307 	bic.w	r3, r3, #7
 800deb4:	3308      	adds	r3, #8
 800deb6:	9303      	str	r3, [sp, #12]
 800deb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deba:	443b      	add	r3, r7
 800debc:	9309      	str	r3, [sp, #36]	; 0x24
 800debe:	e767      	b.n	800dd90 <_vfiprintf_r+0x94>
 800dec0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dec4:	460c      	mov	r4, r1
 800dec6:	2001      	movs	r0, #1
 800dec8:	e7a5      	b.n	800de16 <_vfiprintf_r+0x11a>
 800deca:	2300      	movs	r3, #0
 800decc:	3401      	adds	r4, #1
 800dece:	9305      	str	r3, [sp, #20]
 800ded0:	4619      	mov	r1, r3
 800ded2:	f04f 0c0a 	mov.w	ip, #10
 800ded6:	4620      	mov	r0, r4
 800ded8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dedc:	3a30      	subs	r2, #48	; 0x30
 800dede:	2a09      	cmp	r2, #9
 800dee0:	d903      	bls.n	800deea <_vfiprintf_r+0x1ee>
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d0c5      	beq.n	800de72 <_vfiprintf_r+0x176>
 800dee6:	9105      	str	r1, [sp, #20]
 800dee8:	e7c3      	b.n	800de72 <_vfiprintf_r+0x176>
 800deea:	fb0c 2101 	mla	r1, ip, r1, r2
 800deee:	4604      	mov	r4, r0
 800def0:	2301      	movs	r3, #1
 800def2:	e7f0      	b.n	800ded6 <_vfiprintf_r+0x1da>
 800def4:	ab03      	add	r3, sp, #12
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	462a      	mov	r2, r5
 800defa:	4b16      	ldr	r3, [pc, #88]	; (800df54 <_vfiprintf_r+0x258>)
 800defc:	a904      	add	r1, sp, #16
 800defe:	4630      	mov	r0, r6
 800df00:	f7fc f806 	bl	8009f10 <_printf_float>
 800df04:	4607      	mov	r7, r0
 800df06:	1c78      	adds	r0, r7, #1
 800df08:	d1d6      	bne.n	800deb8 <_vfiprintf_r+0x1bc>
 800df0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df0c:	07d9      	lsls	r1, r3, #31
 800df0e:	d405      	bmi.n	800df1c <_vfiprintf_r+0x220>
 800df10:	89ab      	ldrh	r3, [r5, #12]
 800df12:	059a      	lsls	r2, r3, #22
 800df14:	d402      	bmi.n	800df1c <_vfiprintf_r+0x220>
 800df16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df18:	f7fb fea6 	bl	8009c68 <__retarget_lock_release_recursive>
 800df1c:	89ab      	ldrh	r3, [r5, #12]
 800df1e:	065b      	lsls	r3, r3, #25
 800df20:	f53f af12 	bmi.w	800dd48 <_vfiprintf_r+0x4c>
 800df24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df26:	e711      	b.n	800dd4c <_vfiprintf_r+0x50>
 800df28:	ab03      	add	r3, sp, #12
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	462a      	mov	r2, r5
 800df2e:	4b09      	ldr	r3, [pc, #36]	; (800df54 <_vfiprintf_r+0x258>)
 800df30:	a904      	add	r1, sp, #16
 800df32:	4630      	mov	r0, r6
 800df34:	f7fc fa90 	bl	800a458 <_printf_i>
 800df38:	e7e4      	b.n	800df04 <_vfiprintf_r+0x208>
 800df3a:	bf00      	nop
 800df3c:	0800e4fc 	.word	0x0800e4fc
 800df40:	0800e51c 	.word	0x0800e51c
 800df44:	0800e4dc 	.word	0x0800e4dc
 800df48:	0800e944 	.word	0x0800e944
 800df4c:	0800e94e 	.word	0x0800e94e
 800df50:	08009f11 	.word	0x08009f11
 800df54:	0800dcd7 	.word	0x0800dcd7
 800df58:	0800e94a 	.word	0x0800e94a

0800df5c <_read_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4d07      	ldr	r5, [pc, #28]	; (800df7c <_read_r+0x20>)
 800df60:	4604      	mov	r4, r0
 800df62:	4608      	mov	r0, r1
 800df64:	4611      	mov	r1, r2
 800df66:	2200      	movs	r2, #0
 800df68:	602a      	str	r2, [r5, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f7f6 f938 	bl	80041e0 <_read>
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	d102      	bne.n	800df7a <_read_r+0x1e>
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	b103      	cbz	r3, 800df7a <_read_r+0x1e>
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	200017b4 	.word	0x200017b4

0800df80 <nan>:
 800df80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df88 <nan+0x8>
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	00000000 	.word	0x00000000
 800df8c:	7ff80000 	.word	0x7ff80000

0800df90 <strncmp>:
 800df90:	b510      	push	{r4, lr}
 800df92:	b16a      	cbz	r2, 800dfb0 <strncmp+0x20>
 800df94:	3901      	subs	r1, #1
 800df96:	1884      	adds	r4, r0, r2
 800df98:	f810 3b01 	ldrb.w	r3, [r0], #1
 800df9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d103      	bne.n	800dfac <strncmp+0x1c>
 800dfa4:	42a0      	cmp	r0, r4
 800dfa6:	d001      	beq.n	800dfac <strncmp+0x1c>
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1f5      	bne.n	800df98 <strncmp+0x8>
 800dfac:	1a98      	subs	r0, r3, r2
 800dfae:	bd10      	pop	{r4, pc}
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	e7fc      	b.n	800dfae <strncmp+0x1e>

0800dfb4 <__swbuf_r>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	460e      	mov	r6, r1
 800dfb8:	4614      	mov	r4, r2
 800dfba:	4605      	mov	r5, r0
 800dfbc:	b118      	cbz	r0, 800dfc6 <__swbuf_r+0x12>
 800dfbe:	6983      	ldr	r3, [r0, #24]
 800dfc0:	b90b      	cbnz	r3, 800dfc6 <__swbuf_r+0x12>
 800dfc2:	f7fb fd8d 	bl	8009ae0 <__sinit>
 800dfc6:	4b21      	ldr	r3, [pc, #132]	; (800e04c <__swbuf_r+0x98>)
 800dfc8:	429c      	cmp	r4, r3
 800dfca:	d12b      	bne.n	800e024 <__swbuf_r+0x70>
 800dfcc:	686c      	ldr	r4, [r5, #4]
 800dfce:	69a3      	ldr	r3, [r4, #24]
 800dfd0:	60a3      	str	r3, [r4, #8]
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	071a      	lsls	r2, r3, #28
 800dfd6:	d52f      	bpl.n	800e038 <__swbuf_r+0x84>
 800dfd8:	6923      	ldr	r3, [r4, #16]
 800dfda:	b36b      	cbz	r3, 800e038 <__swbuf_r+0x84>
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	6820      	ldr	r0, [r4, #0]
 800dfe0:	1ac0      	subs	r0, r0, r3
 800dfe2:	6963      	ldr	r3, [r4, #20]
 800dfe4:	b2f6      	uxtb	r6, r6
 800dfe6:	4283      	cmp	r3, r0
 800dfe8:	4637      	mov	r7, r6
 800dfea:	dc04      	bgt.n	800dff6 <__swbuf_r+0x42>
 800dfec:	4621      	mov	r1, r4
 800dfee:	4628      	mov	r0, r5
 800dff0:	f7fb fcd0 	bl	8009994 <_fflush_r>
 800dff4:	bb30      	cbnz	r0, 800e044 <__swbuf_r+0x90>
 800dff6:	68a3      	ldr	r3, [r4, #8]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	60a3      	str	r3, [r4, #8]
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	6022      	str	r2, [r4, #0]
 800e002:	701e      	strb	r6, [r3, #0]
 800e004:	6963      	ldr	r3, [r4, #20]
 800e006:	3001      	adds	r0, #1
 800e008:	4283      	cmp	r3, r0
 800e00a:	d004      	beq.n	800e016 <__swbuf_r+0x62>
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	07db      	lsls	r3, r3, #31
 800e010:	d506      	bpl.n	800e020 <__swbuf_r+0x6c>
 800e012:	2e0a      	cmp	r6, #10
 800e014:	d104      	bne.n	800e020 <__swbuf_r+0x6c>
 800e016:	4621      	mov	r1, r4
 800e018:	4628      	mov	r0, r5
 800e01a:	f7fb fcbb 	bl	8009994 <_fflush_r>
 800e01e:	b988      	cbnz	r0, 800e044 <__swbuf_r+0x90>
 800e020:	4638      	mov	r0, r7
 800e022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e024:	4b0a      	ldr	r3, [pc, #40]	; (800e050 <__swbuf_r+0x9c>)
 800e026:	429c      	cmp	r4, r3
 800e028:	d101      	bne.n	800e02e <__swbuf_r+0x7a>
 800e02a:	68ac      	ldr	r4, [r5, #8]
 800e02c:	e7cf      	b.n	800dfce <__swbuf_r+0x1a>
 800e02e:	4b09      	ldr	r3, [pc, #36]	; (800e054 <__swbuf_r+0xa0>)
 800e030:	429c      	cmp	r4, r3
 800e032:	bf08      	it	eq
 800e034:	68ec      	ldreq	r4, [r5, #12]
 800e036:	e7ca      	b.n	800dfce <__swbuf_r+0x1a>
 800e038:	4621      	mov	r1, r4
 800e03a:	4628      	mov	r0, r5
 800e03c:	f000 f81a 	bl	800e074 <__swsetup_r>
 800e040:	2800      	cmp	r0, #0
 800e042:	d0cb      	beq.n	800dfdc <__swbuf_r+0x28>
 800e044:	f04f 37ff 	mov.w	r7, #4294967295
 800e048:	e7ea      	b.n	800e020 <__swbuf_r+0x6c>
 800e04a:	bf00      	nop
 800e04c:	0800e4fc 	.word	0x0800e4fc
 800e050:	0800e51c 	.word	0x0800e51c
 800e054:	0800e4dc 	.word	0x0800e4dc

0800e058 <__ascii_wctomb>:
 800e058:	b149      	cbz	r1, 800e06e <__ascii_wctomb+0x16>
 800e05a:	2aff      	cmp	r2, #255	; 0xff
 800e05c:	bf85      	ittet	hi
 800e05e:	238a      	movhi	r3, #138	; 0x8a
 800e060:	6003      	strhi	r3, [r0, #0]
 800e062:	700a      	strbls	r2, [r1, #0]
 800e064:	f04f 30ff 	movhi.w	r0, #4294967295
 800e068:	bf98      	it	ls
 800e06a:	2001      	movls	r0, #1
 800e06c:	4770      	bx	lr
 800e06e:	4608      	mov	r0, r1
 800e070:	4770      	bx	lr
	...

0800e074 <__swsetup_r>:
 800e074:	4b32      	ldr	r3, [pc, #200]	; (800e140 <__swsetup_r+0xcc>)
 800e076:	b570      	push	{r4, r5, r6, lr}
 800e078:	681d      	ldr	r5, [r3, #0]
 800e07a:	4606      	mov	r6, r0
 800e07c:	460c      	mov	r4, r1
 800e07e:	b125      	cbz	r5, 800e08a <__swsetup_r+0x16>
 800e080:	69ab      	ldr	r3, [r5, #24]
 800e082:	b913      	cbnz	r3, 800e08a <__swsetup_r+0x16>
 800e084:	4628      	mov	r0, r5
 800e086:	f7fb fd2b 	bl	8009ae0 <__sinit>
 800e08a:	4b2e      	ldr	r3, [pc, #184]	; (800e144 <__swsetup_r+0xd0>)
 800e08c:	429c      	cmp	r4, r3
 800e08e:	d10f      	bne.n	800e0b0 <__swsetup_r+0x3c>
 800e090:	686c      	ldr	r4, [r5, #4]
 800e092:	89a3      	ldrh	r3, [r4, #12]
 800e094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e098:	0719      	lsls	r1, r3, #28
 800e09a:	d42c      	bmi.n	800e0f6 <__swsetup_r+0x82>
 800e09c:	06dd      	lsls	r5, r3, #27
 800e09e:	d411      	bmi.n	800e0c4 <__swsetup_r+0x50>
 800e0a0:	2309      	movs	r3, #9
 800e0a2:	6033      	str	r3, [r6, #0]
 800e0a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0a8:	81a3      	strh	r3, [r4, #12]
 800e0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ae:	e03e      	b.n	800e12e <__swsetup_r+0xba>
 800e0b0:	4b25      	ldr	r3, [pc, #148]	; (800e148 <__swsetup_r+0xd4>)
 800e0b2:	429c      	cmp	r4, r3
 800e0b4:	d101      	bne.n	800e0ba <__swsetup_r+0x46>
 800e0b6:	68ac      	ldr	r4, [r5, #8]
 800e0b8:	e7eb      	b.n	800e092 <__swsetup_r+0x1e>
 800e0ba:	4b24      	ldr	r3, [pc, #144]	; (800e14c <__swsetup_r+0xd8>)
 800e0bc:	429c      	cmp	r4, r3
 800e0be:	bf08      	it	eq
 800e0c0:	68ec      	ldreq	r4, [r5, #12]
 800e0c2:	e7e6      	b.n	800e092 <__swsetup_r+0x1e>
 800e0c4:	0758      	lsls	r0, r3, #29
 800e0c6:	d512      	bpl.n	800e0ee <__swsetup_r+0x7a>
 800e0c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0ca:	b141      	cbz	r1, 800e0de <__swsetup_r+0x6a>
 800e0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0d0:	4299      	cmp	r1, r3
 800e0d2:	d002      	beq.n	800e0da <__swsetup_r+0x66>
 800e0d4:	4630      	mov	r0, r6
 800e0d6:	f7fb fdd1 	bl	8009c7c <_free_r>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	6363      	str	r3, [r4, #52]	; 0x34
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0e4:	81a3      	strh	r3, [r4, #12]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	6063      	str	r3, [r4, #4]
 800e0ea:	6923      	ldr	r3, [r4, #16]
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	f043 0308 	orr.w	r3, r3, #8
 800e0f4:	81a3      	strh	r3, [r4, #12]
 800e0f6:	6923      	ldr	r3, [r4, #16]
 800e0f8:	b94b      	cbnz	r3, 800e10e <__swsetup_r+0x9a>
 800e0fa:	89a3      	ldrh	r3, [r4, #12]
 800e0fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e104:	d003      	beq.n	800e10e <__swsetup_r+0x9a>
 800e106:	4621      	mov	r1, r4
 800e108:	4630      	mov	r0, r6
 800e10a:	f7fe ff33 	bl	800cf74 <__smakebuf_r>
 800e10e:	89a0      	ldrh	r0, [r4, #12]
 800e110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e114:	f010 0301 	ands.w	r3, r0, #1
 800e118:	d00a      	beq.n	800e130 <__swsetup_r+0xbc>
 800e11a:	2300      	movs	r3, #0
 800e11c:	60a3      	str	r3, [r4, #8]
 800e11e:	6963      	ldr	r3, [r4, #20]
 800e120:	425b      	negs	r3, r3
 800e122:	61a3      	str	r3, [r4, #24]
 800e124:	6923      	ldr	r3, [r4, #16]
 800e126:	b943      	cbnz	r3, 800e13a <__swsetup_r+0xc6>
 800e128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e12c:	d1ba      	bne.n	800e0a4 <__swsetup_r+0x30>
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	0781      	lsls	r1, r0, #30
 800e132:	bf58      	it	pl
 800e134:	6963      	ldrpl	r3, [r4, #20]
 800e136:	60a3      	str	r3, [r4, #8]
 800e138:	e7f4      	b.n	800e124 <__swsetup_r+0xb0>
 800e13a:	2000      	movs	r0, #0
 800e13c:	e7f7      	b.n	800e12e <__swsetup_r+0xba>
 800e13e:	bf00      	nop
 800e140:	2000001c 	.word	0x2000001c
 800e144:	0800e4fc 	.word	0x0800e4fc
 800e148:	0800e51c 	.word	0x0800e51c
 800e14c:	0800e4dc 	.word	0x0800e4dc

0800e150 <__assert_func>:
 800e150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e152:	4614      	mov	r4, r2
 800e154:	461a      	mov	r2, r3
 800e156:	4b09      	ldr	r3, [pc, #36]	; (800e17c <__assert_func+0x2c>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4605      	mov	r5, r0
 800e15c:	68d8      	ldr	r0, [r3, #12]
 800e15e:	b14c      	cbz	r4, 800e174 <__assert_func+0x24>
 800e160:	4b07      	ldr	r3, [pc, #28]	; (800e180 <__assert_func+0x30>)
 800e162:	9100      	str	r1, [sp, #0]
 800e164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e168:	4906      	ldr	r1, [pc, #24]	; (800e184 <__assert_func+0x34>)
 800e16a:	462b      	mov	r3, r5
 800e16c:	f000 f80e 	bl	800e18c <fiprintf>
 800e170:	f000 f880 	bl	800e274 <abort>
 800e174:	4b04      	ldr	r3, [pc, #16]	; (800e188 <__assert_func+0x38>)
 800e176:	461c      	mov	r4, r3
 800e178:	e7f3      	b.n	800e162 <__assert_func+0x12>
 800e17a:	bf00      	nop
 800e17c:	2000001c 	.word	0x2000001c
 800e180:	0800e955 	.word	0x0800e955
 800e184:	0800e962 	.word	0x0800e962
 800e188:	0800e990 	.word	0x0800e990

0800e18c <fiprintf>:
 800e18c:	b40e      	push	{r1, r2, r3}
 800e18e:	b503      	push	{r0, r1, lr}
 800e190:	4601      	mov	r1, r0
 800e192:	ab03      	add	r3, sp, #12
 800e194:	4805      	ldr	r0, [pc, #20]	; (800e1ac <fiprintf+0x20>)
 800e196:	f853 2b04 	ldr.w	r2, [r3], #4
 800e19a:	6800      	ldr	r0, [r0, #0]
 800e19c:	9301      	str	r3, [sp, #4]
 800e19e:	f7ff fdad 	bl	800dcfc <_vfiprintf_r>
 800e1a2:	b002      	add	sp, #8
 800e1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1a8:	b003      	add	sp, #12
 800e1aa:	4770      	bx	lr
 800e1ac:	2000001c 	.word	0x2000001c

0800e1b0 <_fstat_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d07      	ldr	r5, [pc, #28]	; (800e1d0 <_fstat_r+0x20>)
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	4608      	mov	r0, r1
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	602b      	str	r3, [r5, #0]
 800e1be:	f7f6 f854 	bl	800426a <_fstat>
 800e1c2:	1c43      	adds	r3, r0, #1
 800e1c4:	d102      	bne.n	800e1cc <_fstat_r+0x1c>
 800e1c6:	682b      	ldr	r3, [r5, #0]
 800e1c8:	b103      	cbz	r3, 800e1cc <_fstat_r+0x1c>
 800e1ca:	6023      	str	r3, [r4, #0]
 800e1cc:	bd38      	pop	{r3, r4, r5, pc}
 800e1ce:	bf00      	nop
 800e1d0:	200017b4 	.word	0x200017b4

0800e1d4 <_isatty_r>:
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	4d06      	ldr	r5, [pc, #24]	; (800e1f0 <_isatty_r+0x1c>)
 800e1d8:	2300      	movs	r3, #0
 800e1da:	4604      	mov	r4, r0
 800e1dc:	4608      	mov	r0, r1
 800e1de:	602b      	str	r3, [r5, #0]
 800e1e0:	f7f6 f853 	bl	800428a <_isatty>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d102      	bne.n	800e1ee <_isatty_r+0x1a>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	b103      	cbz	r3, 800e1ee <_isatty_r+0x1a>
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	200017b4 	.word	0x200017b4

0800e1f4 <memmove>:
 800e1f4:	4288      	cmp	r0, r1
 800e1f6:	b510      	push	{r4, lr}
 800e1f8:	eb01 0402 	add.w	r4, r1, r2
 800e1fc:	d902      	bls.n	800e204 <memmove+0x10>
 800e1fe:	4284      	cmp	r4, r0
 800e200:	4623      	mov	r3, r4
 800e202:	d807      	bhi.n	800e214 <memmove+0x20>
 800e204:	1e43      	subs	r3, r0, #1
 800e206:	42a1      	cmp	r1, r4
 800e208:	d008      	beq.n	800e21c <memmove+0x28>
 800e20a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e20e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e212:	e7f8      	b.n	800e206 <memmove+0x12>
 800e214:	4402      	add	r2, r0
 800e216:	4601      	mov	r1, r0
 800e218:	428a      	cmp	r2, r1
 800e21a:	d100      	bne.n	800e21e <memmove+0x2a>
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e226:	e7f7      	b.n	800e218 <memmove+0x24>

0800e228 <_realloc_r>:
 800e228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22a:	4607      	mov	r7, r0
 800e22c:	4614      	mov	r4, r2
 800e22e:	460e      	mov	r6, r1
 800e230:	b921      	cbnz	r1, 800e23c <_realloc_r+0x14>
 800e232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e236:	4611      	mov	r1, r2
 800e238:	f7fb bd70 	b.w	8009d1c <_malloc_r>
 800e23c:	b922      	cbnz	r2, 800e248 <_realloc_r+0x20>
 800e23e:	f7fb fd1d 	bl	8009c7c <_free_r>
 800e242:	4625      	mov	r5, r4
 800e244:	4628      	mov	r0, r5
 800e246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e248:	f000 f81b 	bl	800e282 <_malloc_usable_size_r>
 800e24c:	42a0      	cmp	r0, r4
 800e24e:	d20f      	bcs.n	800e270 <_realloc_r+0x48>
 800e250:	4621      	mov	r1, r4
 800e252:	4638      	mov	r0, r7
 800e254:	f7fb fd62 	bl	8009d1c <_malloc_r>
 800e258:	4605      	mov	r5, r0
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d0f2      	beq.n	800e244 <_realloc_r+0x1c>
 800e25e:	4631      	mov	r1, r6
 800e260:	4622      	mov	r2, r4
 800e262:	f7fe fee1 	bl	800d028 <memcpy>
 800e266:	4631      	mov	r1, r6
 800e268:	4638      	mov	r0, r7
 800e26a:	f7fb fd07 	bl	8009c7c <_free_r>
 800e26e:	e7e9      	b.n	800e244 <_realloc_r+0x1c>
 800e270:	4635      	mov	r5, r6
 800e272:	e7e7      	b.n	800e244 <_realloc_r+0x1c>

0800e274 <abort>:
 800e274:	b508      	push	{r3, lr}
 800e276:	2006      	movs	r0, #6
 800e278:	f000 f834 	bl	800e2e4 <raise>
 800e27c:	2001      	movs	r0, #1
 800e27e:	f7f5 ffa5 	bl	80041cc <_exit>

0800e282 <_malloc_usable_size_r>:
 800e282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e286:	1f18      	subs	r0, r3, #4
 800e288:	2b00      	cmp	r3, #0
 800e28a:	bfbc      	itt	lt
 800e28c:	580b      	ldrlt	r3, [r1, r0]
 800e28e:	18c0      	addlt	r0, r0, r3
 800e290:	4770      	bx	lr

0800e292 <_raise_r>:
 800e292:	291f      	cmp	r1, #31
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	4604      	mov	r4, r0
 800e298:	460d      	mov	r5, r1
 800e29a:	d904      	bls.n	800e2a6 <_raise_r+0x14>
 800e29c:	2316      	movs	r3, #22
 800e29e:	6003      	str	r3, [r0, #0]
 800e2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a4:	bd38      	pop	{r3, r4, r5, pc}
 800e2a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2a8:	b112      	cbz	r2, 800e2b0 <_raise_r+0x1e>
 800e2aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2ae:	b94b      	cbnz	r3, 800e2c4 <_raise_r+0x32>
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f000 f831 	bl	800e318 <_getpid_r>
 800e2b6:	462a      	mov	r2, r5
 800e2b8:	4601      	mov	r1, r0
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2c0:	f000 b818 	b.w	800e2f4 <_kill_r>
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d00a      	beq.n	800e2de <_raise_r+0x4c>
 800e2c8:	1c59      	adds	r1, r3, #1
 800e2ca:	d103      	bne.n	800e2d4 <_raise_r+0x42>
 800e2cc:	2316      	movs	r3, #22
 800e2ce:	6003      	str	r3, [r0, #0]
 800e2d0:	2001      	movs	r0, #1
 800e2d2:	e7e7      	b.n	800e2a4 <_raise_r+0x12>
 800e2d4:	2400      	movs	r4, #0
 800e2d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2da:	4628      	mov	r0, r5
 800e2dc:	4798      	blx	r3
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e7e0      	b.n	800e2a4 <_raise_r+0x12>
	...

0800e2e4 <raise>:
 800e2e4:	4b02      	ldr	r3, [pc, #8]	; (800e2f0 <raise+0xc>)
 800e2e6:	4601      	mov	r1, r0
 800e2e8:	6818      	ldr	r0, [r3, #0]
 800e2ea:	f7ff bfd2 	b.w	800e292 <_raise_r>
 800e2ee:	bf00      	nop
 800e2f0:	2000001c 	.word	0x2000001c

0800e2f4 <_kill_r>:
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4d07      	ldr	r5, [pc, #28]	; (800e314 <_kill_r+0x20>)
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	4608      	mov	r0, r1
 800e2fe:	4611      	mov	r1, r2
 800e300:	602b      	str	r3, [r5, #0]
 800e302:	f7f5 ff53 	bl	80041ac <_kill>
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	d102      	bne.n	800e310 <_kill_r+0x1c>
 800e30a:	682b      	ldr	r3, [r5, #0]
 800e30c:	b103      	cbz	r3, 800e310 <_kill_r+0x1c>
 800e30e:	6023      	str	r3, [r4, #0]
 800e310:	bd38      	pop	{r3, r4, r5, pc}
 800e312:	bf00      	nop
 800e314:	200017b4 	.word	0x200017b4

0800e318 <_getpid_r>:
 800e318:	f7f5 bf40 	b.w	800419c <_getpid>

0800e31c <_init>:
 800e31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31e:	bf00      	nop
 800e320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e322:	bc08      	pop	{r3}
 800e324:	469e      	mov	lr, r3
 800e326:	4770      	bx	lr

0800e328 <_fini>:
 800e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32a:	bf00      	nop
 800e32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e32e:	bc08      	pop	{r3}
 800e330:	469e      	mov	lr, r3
 800e332:	4770      	bx	lr
